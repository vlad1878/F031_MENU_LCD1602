
F031_MENU_LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033c0  080033c0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080033c0  080033c0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033c0  080033c0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080033c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000008c  08003454  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003454  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c13a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f91  00000000  00000000  0002c1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002e180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ddf  00000000  00000000  0002fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f506  00000000  00000000  00040807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000641e4  00000000  00000000  0004fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3ef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ac  00000000  00000000  000b3f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003330 	.word	0x08003330

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08003330 	.word	0x08003330

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <BUTTON_LowLevelManager>:

/* Functions -----------------------------------------------------------------*/

/******************************************************************************/
void BUTTON_LowLevelManager()
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
  uint8_t currentStates[BUTTONS_NUM];
  
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	e07a      	b.n	8000348 <BUTTON_LowLevelManager+0x104>
  {
    currentStates[i] = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781a      	ldrb	r2, [r3, #0]
 8000256:	4b41      	ldr	r3, [pc, #260]	; (800035c <BUTTON_LowLevelManager+0x118>)
 8000258:	00d2      	lsls	r2, r2, #3
 800025a:	58d0      	ldr	r0, [r2, r3]
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4a3e      	ldr	r2, [pc, #248]	; (800035c <BUTTON_LowLevelManager+0x118>)
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	18d3      	adds	r3, r2, r3
 8000266:	3304      	adds	r3, #4
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	781c      	ldrb	r4, [r3, #0]
 800026e:	0011      	movs	r1, r2
 8000270:	f001 f870 	bl	8001354 <HAL_GPIO_ReadPin>
 8000274:	0003      	movs	r3, r0
 8000276:	001a      	movs	r2, r3
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	551a      	strb	r2, [r3, r4]
    
    switch (buttonState[i])
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4a37      	ldr	r2, [pc, #220]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 8000282:	5cd3      	ldrb	r3, [r2, r3]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d03f      	beq.n	8000308 <BUTTON_LowLevelManager+0xc4>
 8000288:	dc50      	bgt.n	800032c <BUTTON_LowLevelManager+0xe8>
 800028a:	2b02      	cmp	r3, #2
 800028c:	d023      	beq.n	80002d6 <BUTTON_LowLevelManager+0x92>
 800028e:	dc4d      	bgt.n	800032c <BUTTON_LowLevelManager+0xe8>
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <BUTTON_LowLevelManager+0x56>
 8000294:	2b01      	cmp	r3, #1
 8000296:	d00c      	beq.n	80002b2 <BUTTON_LowLevelManager+0x6e>
          debounceCounter[i] = 0;
        } 
        break;
        
      default:
        break;
 8000298:	e048      	b.n	800032c <BUTTON_LowLevelManager+0xe8>
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	1d3a      	adds	r2, r7, #4
 80002a0:	5cd3      	ldrb	r3, [r2, r3]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d144      	bne.n	8000330 <BUTTON_LowLevelManager+0xec>
          buttonState[i] = BUTTON_NOT_PRESSED;
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	4a2d      	ldr	r2, [pc, #180]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	54d1      	strb	r1, [r2, r3]
        break;
 80002b0:	e03e      	b.n	8000330 <BUTTON_LowLevelManager+0xec>
        if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	1d3a      	adds	r2, r7, #4
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d13a      	bne.n	8000334 <BUTTON_LowLevelManager+0xf0>
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4a27      	ldr	r2, [pc, #156]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 80002c4:	2102      	movs	r1, #2
 80002c6:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <BUTTON_LowLevelManager+0x120>)
 80002ce:	0052      	lsls	r2, r2, #1
 80002d0:	2100      	movs	r1, #0
 80002d2:	52d1      	strh	r1, [r2, r3]
        break;
 80002d4:	e02e      	b.n	8000334 <BUTTON_LowLevelManager+0xf0>
        if (debounceCounter[i] == DEBOUNCE_TIME_MS)
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	4b22      	ldr	r3, [pc, #136]	; (8000364 <BUTTON_LowLevelManager+0x120>)
 80002dc:	0052      	lsls	r2, r2, #1
 80002de:	5ad3      	ldrh	r3, [r2, r3]
 80002e0:	2b0a      	cmp	r3, #10
 80002e2:	d129      	bne.n	8000338 <BUTTON_LowLevelManager+0xf4>
          if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	1d3a      	adds	r2, r7, #4
 80002ea:	5cd3      	ldrb	r3, [r2, r3]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d105      	bne.n	80002fc <BUTTON_LowLevelManager+0xb8>
            buttonState[i] = BUTTON_PRESSED;
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 80002f6:	2103      	movs	r1, #3
 80002f8:	54d1      	strb	r1, [r2, r3]
        break;
 80002fa:	e01d      	b.n	8000338 <BUTTON_LowLevelManager+0xf4>
            buttonState[i] = BUTTON_NOT_PRESSED;
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 8000302:	2101      	movs	r1, #1
 8000304:	54d1      	strb	r1, [r2, r3]
        break;
 8000306:	e017      	b.n	8000338 <BUTTON_LowLevelManager+0xf4>
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	1d3a      	adds	r2, r7, #4
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d113      	bne.n	800033c <BUTTON_LowLevelManager+0xf8>
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 800031a:	2102      	movs	r1, #2
 800031c:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781a      	ldrb	r2, [r3, #0]
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <BUTTON_LowLevelManager+0x120>)
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	2100      	movs	r1, #0
 8000328:	52d1      	strh	r1, [r2, r3]
        break;
 800032a:	e007      	b.n	800033c <BUTTON_LowLevelManager+0xf8>
        break;
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	e006      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	e004      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	e002      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	e000      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 800033c:	46c0      	nop			; (mov r8, r8)
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	3201      	adds	r2, #1
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b02      	cmp	r3, #2
 800034e:	d800      	bhi.n	8000352 <BUTTON_LowLevelManager+0x10e>
 8000350:	e77f      	b.n	8000252 <BUTTON_LowLevelManager+0xe>
    }
  }
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b003      	add	sp, #12
 800035a:	bd90      	pop	{r4, r7, pc}
 800035c:	20000000 	.word	0x20000000
 8000360:	200000c0 	.word	0x200000c0
 8000364:	200000a8 	.word	0x200000a8

08000368 <BUTTON_HighLevelManager>:



/******************************************************************************/
void BUTTON_HighLevelManager()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	e049      	b.n	800040a <BUTTON_HighLevelManager+0xa2>
  {
    if (buttonActions[i] == BUTTON_NONE)
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4a28      	ldr	r2, [pc, #160]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d13e      	bne.n	8000400 <BUTTON_HighLevelManager+0x98>
    {
      if (waitButtonRelease[i] == 0)
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4a26      	ldr	r2, [pc, #152]	; (8000420 <BUTTON_HighLevelManager+0xb8>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d10b      	bne.n	80003a6 <BUTTON_HighLevelManager+0x3e>
      {
        if (buttonState[i] == BUTTON_PRESSED)
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4a24      	ldr	r2, [pc, #144]	; (8000424 <BUTTON_HighLevelManager+0xbc>)
 8000394:	5cd3      	ldrb	r3, [r2, r3]
 8000396:	2b03      	cmp	r3, #3
 8000398:	d132      	bne.n	8000400 <BUTTON_HighLevelManager+0x98>
        {
          waitButtonRelease[i] = 1;
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	4a20      	ldr	r2, [pc, #128]	; (8000420 <BUTTON_HighLevelManager+0xb8>)
 80003a0:	2101      	movs	r1, #1
 80003a2:	54d1      	strb	r1, [r2, r3]
 80003a4:	e02c      	b.n	8000400 <BUTTON_HighLevelManager+0x98>
        }
      }
      else
      {
        if (buttonState[i] == BUTTON_NOT_PRESSED)
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <BUTTON_HighLevelManager+0xbc>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d126      	bne.n	8000400 <BUTTON_HighLevelManager+0x98>
        {
          waitButtonRelease[i] = 0;
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <BUTTON_HighLevelManager+0xb8>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	54d1      	strb	r1, [r2, r3]

          if (buttonPressCounter[i] >= BUTTONS_VERY_LONG_PRESS_MS)
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <BUTTON_HighLevelManager+0xc0>)
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	5ad3      	ldrh	r3, [r2, r3]
 80003c6:	4a19      	ldr	r2, [pc, #100]	; (800042c <BUTTON_HighLevelManager+0xc4>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d905      	bls.n	80003d8 <BUTTON_HighLevelManager+0x70>
          {
            buttonActions[i] = BUTTON_VERY_LONG_PRESS;
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 80003d2:	2103      	movs	r1, #3
 80003d4:	54d1      	strb	r1, [r2, r3]
 80003d6:	e013      	b.n	8000400 <BUTTON_HighLevelManager+0x98>
          }
          else
          {
            if (buttonPressCounter[i] >= BUTTONS_LONG_PRESS_MS)
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781a      	ldrb	r2, [r3, #0]
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <BUTTON_HighLevelManager+0xc0>)
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	5ad2      	ldrh	r2, [r2, r3]
 80003e2:	23fa      	movs	r3, #250	; 0xfa
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d305      	bcc.n	80003f6 <BUTTON_HighLevelManager+0x8e>
            {
              buttonActions[i] = BUTTON_LONG_PRESS;
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 80003f0:	2102      	movs	r1, #2
 80003f2:	54d1      	strb	r1, [r2, r3]
 80003f4:	e004      	b.n	8000400 <BUTTON_HighLevelManager+0x98>
            }
            else
            {
              buttonActions[i] = BUTTON_SHORT_PRESS;
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4a08      	ldr	r2, [pc, #32]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	3201      	adds	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b02      	cmp	r3, #2
 8000410:	d9b1      	bls.n	8000376 <BUTTON_HighLevelManager+0xe>
          }
        }
      }
    }
  }
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000bc 	.word	0x200000bc
 8000420:	200000b0 	.word	0x200000b0
 8000424:	200000c0 	.word	0x200000c0
 8000428:	200000b4 	.word	0x200000b4
 800042c:	00000bb7 	.word	0x00000bb7

08000430 <BUTTON_Process>:



/******************************************************************************/
void BUTTON_Process()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  BUTTON_LowLevelManager();
 8000434:	f7ff ff06 	bl	8000244 <BUTTON_LowLevelManager>
  BUTTON_HighLevelManager();
 8000438:	f7ff ff96 	bl	8000368 <BUTTON_HighLevelManager>
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <BUTTON_TimerProcess>:



/******************************************************************************/
void BUTTON_TimerProcess()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800044a:	1dfb      	adds	r3, r7, #7
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	e02c      	b.n	80004ac <BUTTON_TimerProcess+0x68>
  {
    if (debounceCounter[i] < DEBOUNCE_TIME_MS)
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781a      	ldrb	r2, [r3, #0]
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <BUTTON_TimerProcess+0x7c>)
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	5ad3      	ldrh	r3, [r2, r3]
 800045c:	2b09      	cmp	r3, #9
 800045e:	d809      	bhi.n	8000474 <BUTTON_TimerProcess+0x30>
    {
      debounceCounter[i]++;
 8000460:	1dfb      	adds	r3, r7, #7
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <BUTTON_TimerProcess+0x7c>)
 8000466:	0059      	lsls	r1, r3, #1
 8000468:	5a8a      	ldrh	r2, [r1, r2]
 800046a:	3201      	adds	r2, #1
 800046c:	b291      	uxth	r1, r2
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <BUTTON_TimerProcess+0x7c>)
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	5299      	strh	r1, [r3, r2]
    }

    if (waitButtonRelease[i] == 1)
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <BUTTON_TimerProcess+0x80>)
 800047a:	5cd3      	ldrb	r3, [r2, r3]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10a      	bne.n	8000496 <BUTTON_TimerProcess+0x52>
    {
      buttonPressCounter[i]++;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <BUTTON_TimerProcess+0x84>)
 8000486:	0059      	lsls	r1, r3, #1
 8000488:	5a8a      	ldrh	r2, [r1, r2]
 800048a:	3201      	adds	r2, #1
 800048c:	b291      	uxth	r1, r2
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <BUTTON_TimerProcess+0x84>)
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	5299      	strh	r1, [r3, r2]
 8000494:	e005      	b.n	80004a2 <BUTTON_TimerProcess+0x5e>
    }
    else
    {
      buttonPressCounter[i] = 0;
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	781a      	ldrb	r2, [r3, #0]
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <BUTTON_TimerProcess+0x84>)
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	2100      	movs	r1, #0
 80004a0:	52d1      	strh	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	3201      	adds	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d9ce      	bls.n	8000452 <BUTTON_TimerProcess+0xe>
    }
  }
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200000a8 	.word	0x200000a8
 80004c4:	200000b0 	.word	0x200000b0
 80004c8:	200000b4 	.word	0x200000b4

080004cc <BUTTON_GetAction>:



/******************************************************************************/
ButtonAction BUTTON_GetAction(uint8_t index)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
  return buttonActions[index];
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <BUTTON_GetAction+0x1c>)
 80004de:	5cd3      	ldrb	r3, [r2, r3]
}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000bc 	.word	0x200000bc

080004ec <BUTTON_ResetActions>:



/******************************************************************************/
void BUTTON_ResetActions()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e009      	b.n	800050e <BUTTON_ResetActions+0x22>
  {
    buttonActions[i] = BUTTON_NONE;
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <BUTTON_ResetActions+0x34>)
 8000500:	2100      	movs	r1, #0
 8000502:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	3201      	adds	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d9f1      	bls.n	80004fa <BUTTON_ResetActions+0xe>
  }
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000bc 	.word	0x200000bc

08000524 <lcd1602_Send_init_Data>:
char tx_buffer_lcd[40] = {0, };
uint8_t global_buffer = 0;

/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af02      	add	r7, sp, #8
 800052a:	6078      	str	r0, [r7, #4]
	if (backlight) {
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <lcd1602_Send_init_Data+0x80>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d007      	beq.n	8000544 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2208      	movs	r2, #8
 800053a:	4313      	orrs	r3, r2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e006      	b.n	8000552 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2208      	movs	r2, #8
 800054a:	4393      	bics	r3, r2
 800054c:	b2da      	uxtb	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2204      	movs	r2, #4
 8000558:	4313      	orrs	r3, r2
 800055a:	b2da      	uxtb	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4811      	ldr	r0, [pc, #68]	; (80005a8 <lcd1602_Send_init_Data+0x84>)
 8000564:	230a      	movs	r3, #10
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	214e      	movs	r1, #78	; 0x4e
 800056c:	f000 ffa6 	bl	80014bc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f000 fc85 	bl	8000e80 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2204      	movs	r2, #4
 800057c:	4393      	bics	r3, r2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <lcd1602_Send_init_Data+0x84>)
 8000588:	230a      	movs	r3, #10
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	214e      	movs	r1, #78	; 0x4e
 8000590:	f000 ff94 	bl	80014bc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000594:	2005      	movs	r0, #5
 8000596:	f000 fc73 	bl	8000e80 <HAL_Delay>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000018 	.word	0x20000018
 80005a8:	200000ec 	.word	0x200000ec

080005ac <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]

	if (backlight) {
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <lcd1602_Send_data+0x74>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d007      	beq.n	80005cc <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2208      	movs	r2, #8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e006      	b.n	80005da <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2208      	movs	r2, #8
 80005d2:	4393      	bics	r3, r2
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2204      	movs	r2, #4
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <lcd1602_Send_data+0x78>)
 80005ec:	230a      	movs	r3, #10
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	214e      	movs	r1, #78	; 0x4e
 80005f4:	f000 ff62 	bl	80014bc <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2204      	movs	r2, #4
 80005fe:	4393      	bics	r3, r2
 8000600:	b2da      	uxtb	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <lcd1602_Send_data+0x78>)
 800060a:	230a      	movs	r3, #10
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	214e      	movs	r1, #78	; 0x4e
 8000612:	f000 ff53 	bl	80014bc <HAL_I2C_Master_Transmit>
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	20000018 	.word	0x20000018
 8000624:	200000ec 	.word	0x200000ec

08000628 <lcd1602_Init>:

void lcd1602_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2230      	movs	r2, #48	; 0x30
 8000632:	701a      	strb	r2, [r3, #0]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000634:	200f      	movs	r0, #15
 8000636:	f000 fc23 	bl	8000e80 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff ff71 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000642:	2005      	movs	r0, #5
 8000644:	f000 fc1c 	bl	8000e80 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff6a 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fc15 	bl	8000e80 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff63 	bl	8000524 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	2220      	movs	r2, #32
 8000662:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff5c 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2220      	movs	r2, #32
 8000670:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff55 	bl	8000524 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff4e 	bl	8000524 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ff47 	bl	8000524 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff40 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff ff39 	bl	8000524 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	2210      	movs	r2, #16
 80006b6:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ff32 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ff2b 	bl	8000524 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	2230      	movs	r2, #48	; 0x30
 80006d2:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff24 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff ff1d 	bl	8000524 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	22c0      	movs	r2, #192	; 0xc0
 80006ee:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff ff16 	bl	8000524 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}

08000700 <lcd1602_Print_symbol>:

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	701a      	strb	r2, [r3, #0]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b25b      	sxtb	r3, r3
 8000712:	220f      	movs	r2, #15
 8000714:	4393      	bics	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	2209      	movs	r2, #9
 800071a:	4313      	orrs	r3, r2
 800071c:	b25b      	sxtb	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	240f      	movs	r4, #15
 8000722:	193b      	adds	r3, r7, r4
 8000724:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ff3f 	bl	80005ac <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	b25b      	sxtb	r3, r3
 8000736:	2209      	movs	r2, #9
 8000738:	4313      	orrs	r3, r2
 800073a:	b25b      	sxtb	r3, r3
 800073c:	b2da      	uxtb	r2, r3
 800073e:	193b      	adds	r3, r7, r4
 8000740:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff31 	bl	80005ac <lcd1602_Send_data>
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b005      	add	sp, #20
 8000750:	bd90      	pop	{r4, r7, pc}

08000752 <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e009      	b.n	8000774 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff ffc9 	bl	8000700 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fcc6 	bl	8000108 <strlen>
 800077c:	0002      	movs	r2, r0
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8ed      	bhi.n	8000760 <lcd1602_Print_text+0xe>
	}
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}

0800078e <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 800078e:	b5b0      	push	{r4, r5, r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	0002      	movs	r2, r0
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	1c0a      	adds	r2, r1, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t command, adr;
	if (y > 3)
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d902      	bls.n	80007ae <lcd1602_SetCursor+0x20>
		y = 3;
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	2203      	movs	r2, #3
 80007ac:	701a      	strb	r2, [r3, #0]
	if (x > 39)
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b27      	cmp	r3, #39	; 0x27
 80007b4:	d902      	bls.n	80007bc <lcd1602_SetCursor+0x2e>
		x = 39;
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	2227      	movs	r2, #39	; 0x27
 80007ba:	701a      	strb	r2, [r3, #0]
	if (y == 0) {
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <lcd1602_SetCursor+0x40>
		adr = x;
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	1dfa      	adds	r2, r7, #7
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	701a      	strb	r2, [r3, #0]
	}
	if (y == 1) {
 80007ce:	1dbb      	adds	r3, r7, #6
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d105      	bne.n	80007e2 <lcd1602_SetCursor+0x54>
		adr = x + 0x40;
 80007d6:	230f      	movs	r3, #15
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	1dfa      	adds	r2, r7, #7
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	3240      	adds	r2, #64	; 0x40
 80007e0:	701a      	strb	r2, [r3, #0]
	}
	if (y == 2) {
 80007e2:	1dbb      	adds	r3, r7, #6
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d105      	bne.n	80007f6 <lcd1602_SetCursor+0x68>
		adr = x + 0x14;
 80007ea:	230f      	movs	r3, #15
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	1dfa      	adds	r2, r7, #7
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	3214      	adds	r2, #20
 80007f4:	701a      	strb	r2, [r3, #0]
	}
	if (y == 3) {
 80007f6:	1dbb      	adds	r3, r7, #6
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d105      	bne.n	800080a <lcd1602_SetCursor+0x7c>
		adr = x + 0x54;
 80007fe:	230f      	movs	r3, #15
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	1dfa      	adds	r2, r7, #7
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	3254      	adds	r2, #84	; 0x54
 8000808:	701a      	strb	r2, [r3, #0]
	}
	command = ((adr & 0xf0) | 0x80);
 800080a:	250f      	movs	r5, #15
 800080c:	197b      	adds	r3, r7, r5
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	2270      	movs	r2, #112	; 0x70
 8000814:	4013      	ands	r3, r2
 8000816:	b25b      	sxtb	r3, r3
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	4252      	negs	r2, r2
 800081c:	4313      	orrs	r3, r2
 800081e:	b25b      	sxtb	r3, r3
 8000820:	b2da      	uxtb	r2, r3
 8000822:	240e      	movs	r4, #14
 8000824:	193b      	adds	r3, r7, r4
 8000826:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff febe 	bl	80005ac <lcd1602_Send_data>

	command = (adr << 4);
 8000830:	197b      	adds	r3, r7, r5
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	b2da      	uxtb	r2, r3
 8000838:	193b      	adds	r3, r7, r4
 800083a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff feb4 	bl	80005ac <lcd1602_Send_data>

}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bdb0      	pop	{r4, r5, r7, pc}

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fab2 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f828 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f8e6 	bl	8000a28 <MX_GPIO_Init>
  MX_I2C1_Init();
 800085c:	f000 f87c 	bl	8000958 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000860:	f000 f8ba 	bl	80009d8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f000 fb0b 	bl	8000e80 <HAL_Delay>
  lcd1602_Init();
 800086a:	f7ff fedd 	bl	8000628 <lcd1602_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <main+0x50>)
 8000870:	0018      	movs	r0, r3
 8000872:	f001 feb9 	bl	80025e8 <HAL_TIM_Base_Start_IT>
  lcd1602_SetCursor(0, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ff88 	bl	800078e <lcd1602_SetCursor>
  sprintf(tx_buffer_lcd, "Goog job dude!   ");
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <main+0x54>)
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <main+0x58>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f002 f8e9 	bl	8002a5c <siprintf>
  lcd1602_Print_text(tx_buffer_lcd);
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <main+0x58>)
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff60 	bl	8000752 <lcd1602_Print_text>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BUTTON_Process();
 8000892:	f7ff fdcd 	bl	8000430 <BUTTON_Process>
	  Button_Processing();
 8000896:	f000 f913 	bl	8000ac0 <Button_Processing>
	  BUTTON_Process();
 800089a:	e7fa      	b.n	8000892 <main+0x46>
 800089c:	20000138 	.word	0x20000138
 80008a0:	08003348 	.word	0x08003348
 80008a4:	200000c4 	.word	0x200000c4

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b095      	sub	sp, #84	; 0x54
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	2420      	movs	r4, #32
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2330      	movs	r3, #48	; 0x30
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 f8c7 	bl	8002a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	2310      	movs	r3, #16
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2310      	movs	r3, #16
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f002 f8bf 	bl	8002a4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2310      	movs	r3, #16
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 f8b8 	bl	8002a4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	0021      	movs	r1, r4
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2202      	movs	r2, #2
 80008e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2201      	movs	r2, #1
 80008e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2210      	movs	r2, #16
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f90b 	bl	8001b14 <HAL_RCC_OscConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000902:	f000 f92f 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	2110      	movs	r1, #16
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2207      	movs	r2, #7
 800090c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2100      	movs	r1, #0
 8000924:	0018      	movs	r0, r3
 8000926:	f001 fc0f 	bl	8002148 <HAL_RCC_ClockConfig>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800092e:	f000 f919 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000932:	003b      	movs	r3, r7
 8000934:	2220      	movs	r2, #32
 8000936:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000938:	003b      	movs	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fd33 	bl	80023ac <HAL_RCCEx_PeriphCLKConfig>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094a:	f000 f90b 	bl	8000b64 <Error_Handler>
  }
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b015      	add	sp, #84	; 0x54
 8000954:	bd90      	pop	{r4, r7, pc}
	...

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_I2C1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_I2C1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_I2C1_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_I2C1_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_I2C1_Init+0x74>)
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fcfb 	bl	8001390 <HAL_I2C_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 f8e1 	bl	8000b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_I2C1_Init+0x74>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 f81c 	bl	80019e4 <HAL_I2CEx_ConfigAnalogFilter>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 f8d8 	bl	8000b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_I2C1_Init+0x74>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 f85f 	bl	8001a7c <HAL_I2CEx_ConfigDigitalFilter>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 f8cf 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000ec 	.word	0x200000ec
 80009d0:	40005400 	.word	0x40005400
 80009d4:	2000090e 	.word	0x2000090e

080009d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_TIM16_Init+0x44>)
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <MX_TIM16_Init+0x48>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_TIM16_Init+0x44>)
 80009e4:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_TIM16_Init+0x4c>)
 80009e6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_TIM16_Init+0x44>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_TIM16_Init+0x44>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_TIM16_Init+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_TIM16_Init+0x44>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_TIM16_Init+0x44>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <MX_TIM16_Init+0x44>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fd9d 	bl	8002548 <HAL_TIM_Base_Init>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000a12:	f000 f8a7 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000138 	.word	0x20000138
 8000a20:	40014400 	.word	0x40014400
 8000a24:	000012bf 	.word	0x000012bf

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	240c      	movs	r4, #12
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	0018      	movs	r0, r3
 8000a34:	2314      	movs	r3, #20
 8000a36:	001a      	movs	r2, r3
 8000a38:	2100      	movs	r1, #0
 8000a3a:	f002 f807 	bl	8002a4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	03c9      	lsls	r1, r1, #15
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	03db      	lsls	r3, r3, #15
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0289      	lsls	r1, r1, #10
 8000a64:	430a      	orrs	r2, r1
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	029b      	lsls	r3, r3, #10
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	02c9      	lsls	r1, r1, #11
 8000a80:	430a      	orrs	r2, r1
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0x90>)
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	02db      	lsls	r3, r3, #11
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_DOWN_Pin BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_DOWN_Pin|BUTTON_ENTER_Pin;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2238      	movs	r2, #56	; 0x38
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <MX_GPIO_Init+0x94>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f000 faea 	bl	8001084 <HAL_GPIO_Init>

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b009      	add	sp, #36	; 0x24
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400

08000ac0 <Button_Processing>:

/* USER CODE BEGIN 4 */
void Button_Processing(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	if(BUTTON_GetAction(BUTTON_UP) == BUTTON_SHORT_PRESS){
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fd01 	bl	80004cc <BUTTON_GetAction>
 8000aca:	0003      	movs	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d105      	bne.n	8000adc <Button_Processing+0x1c>
		counter_up++;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <Button_Processing+0x74>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <Button_Processing+0x74>)
 8000ada:	701a      	strb	r2, [r3, #0]
	}
	if(BUTTON_GetAction(BUTTON_DOWN) == BUTTON_SHORT_PRESS){
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fcf5 	bl	80004cc <BUTTON_GetAction>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <Button_Processing+0x34>
		counter_down++;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <Button_Processing+0x78>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <Button_Processing+0x78>)
 8000af2:	701a      	strb	r2, [r3, #0]
	}
	if(BUTTON_GetAction(BUTTON_ENTER) == BUTTON_SHORT_PRESS){
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fce9 	bl	80004cc <BUTTON_GetAction>
 8000afa:	0003      	movs	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d105      	bne.n	8000b0c <Button_Processing+0x4c>
		counter_enter++;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <Button_Processing+0x7c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <Button_Processing+0x7c>)
 8000b0a:	701a      	strb	r2, [r3, #0]
	}
	if(BUTTON_GetAction(BUTTON_ENTER) == BUTTON_LONG_PRESS){
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fcdd 	bl	80004cc <BUTTON_GetAction>
 8000b12:	0003      	movs	r3, r0
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d108      	bne.n	8000b2a <Button_Processing+0x6a>
		counter_up = 0;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <Button_Processing+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		counter_down = 0;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <Button_Processing+0x78>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
		counter_enter = 0;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <Button_Processing+0x7c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
	}
	BUTTON_ResetActions();
 8000b2a:	f7ff fcdf 	bl	80004ec <BUTTON_ResetActions>

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000180 	.word	0x20000180
 8000b38:	20000181 	.word	0x20000181
 8000b3c:	20000182 	.word	0x20000182

08000b40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim16.Instance){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d101      	bne.n	8000b58 <HAL_TIM_PeriodElapsedCallback+0x18>
		BUTTON_TimerProcess();
 8000b54:	f7ff fc76 	bl	8000444 <BUTTON_TimerProcess>
	}
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000138 	.word	0x20000138

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	69da      	ldr	r2, [r3, #28]
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0549      	lsls	r1, r1, #21
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	61da      	str	r2, [r3, #28]
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9e:	69da      	ldr	r2, [r3, #28]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	055b      	lsls	r3, r3, #21
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	2414      	movs	r4, #20
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f001 ff3e 	bl	8002a4c <memset>
  if(hi2c->Instance==I2C1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_I2C_MspInit+0x94>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d133      	bne.n	8000c42 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_I2C_MspInit+0x98>)
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_I2C_MspInit+0x98>)
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	0289      	lsls	r1, r1, #10
 8000be4:	430a      	orrs	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_I2C_MspInit+0x98>)
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	029b      	lsls	r3, r3, #10
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	22c0      	movs	r2, #192	; 0xc0
 8000bfa:	00d2      	lsls	r2, r2, #3
 8000bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2212      	movs	r2, #18
 8000c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2204      	movs	r2, #4
 8000c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	187a      	adds	r2, r7, r1
 8000c1a:	2390      	movs	r3, #144	; 0x90
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fa2f 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_I2C_MspInit+0x98>)
 8000c28:	69da      	ldr	r2, [r3, #28]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_I2C_MspInit+0x98>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0389      	lsls	r1, r1, #14
 8000c30:	430a      	orrs	r2, r1
 8000c32:	61da      	str	r2, [r3, #28]
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_I2C_MspInit+0x98>)
 8000c36:	69da      	ldr	r2, [r3, #28]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	039b      	lsls	r3, r3, #14
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b00b      	add	sp, #44	; 0x2c
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d115      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0289      	lsls	r1, r1, #10
 8000c70:	430a      	orrs	r2, r1
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	029b      	lsls	r3, r3, #10
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2015      	movs	r0, #21
 8000c88:	f000 f9ca 	bl	8001020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c8c:	2015      	movs	r0, #21
 8000c8e:	f000 f9dc 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40014400 	.word	0x40014400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f8be 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <TIM16_IRQHandler+0x14>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f001 fcd0 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000138 	.word	0x20000138

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f001 fe6c 	bl	80029f8 <__errno>
 8000d20:	0003      	movs	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	425b      	negs	r3, r3
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	18d2      	adds	r2, r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b006      	add	sp, #24
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20001000 	.word	0x20001000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000184 	.word	0x20000184
 8000d54:	200001a0 	.word	0x200001a0

08000d58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d8e:	f7ff ffe3 	bl	8000d58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d92:	f001 fe37 	bl	8002a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d96:	f7ff fd59 	bl	800084c <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000da8:	080033c8 	.word	0x080033c8
  ldr r2, =_sbss
 8000dac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000db0:	2000019c 	.word	0x2000019c

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>
	...

08000db8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_Init+0x24>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_Init+0x24>)
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f809 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dce:	f7ff fecf 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_InitTick+0x5c>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0019      	movs	r1, r3
 8000df2:	23fa      	movs	r3, #250	; 0xfa
 8000df4:	0098      	lsls	r0, r3, #2
 8000df6:	f7ff f999 	bl	800012c <__udivsi3>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff f994 	bl	800012c <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f92f 	bl	800106a <HAL_SYSTICK_Config>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e00f      	b.n	8000e34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d80b      	bhi.n	8000e32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	425b      	negs	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f8fc 	bl	8001020 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_InitTick+0x64>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b003      	add	sp, #12
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	2000001c 	.word	0x2000001c
 8000e40:	20000024 	.word	0x20000024
 8000e44:	20000020 	.word	0x20000020

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001a      	movs	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	18d2      	adds	r2, r2, r3
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000024 	.word	0x20000024
 8000e68:	20000188 	.word	0x20000188

08000e6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000188 	.word	0x20000188

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff fff0 	bl	8000e6c <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	189b      	adds	r3, r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	f7ff ffe0 	bl	8000e6c <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000024 	.word	0x20000024

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eda:	d809      	bhi.n	8000ef0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_EnableIRQ+0x30>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4091      	lsls	r1, r2
 8000eec:	000a      	movs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
  }
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	0002      	movs	r2, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f10:	d828      	bhi.n	8000f64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f12:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <__NVIC_SetPriority+0xd4>)
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	33c0      	adds	r3, #192	; 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	589b      	ldr	r3, [r3, r2]
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	0011      	movs	r1, r2
 8000f28:	2203      	movs	r2, #3
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	00d2      	lsls	r2, r2, #3
 8000f2e:	21ff      	movs	r1, #255	; 0xff
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	401a      	ands	r2, r3
 8000f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	401a      	ands	r2, r3
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0018      	movs	r0, r3
 8000f48:	2303      	movs	r3, #3
 8000f4a:	4003      	ands	r3, r0
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <__NVIC_SetPriority+0xd4>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	33c0      	adds	r3, #192	; 0xc0
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f62:	e031      	b.n	8000fc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <__NVIC_SetPriority+0xd8>)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	400b      	ands	r3, r1
 8000f70:	3b08      	subs	r3, #8
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3306      	adds	r3, #6
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1dfa      	adds	r2, r7, #7
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	0011      	movs	r1, r2
 8000f84:	2203      	movs	r2, #3
 8000f86:	400a      	ands	r2, r1
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	21ff      	movs	r1, #255	; 0xff
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	000a      	movs	r2, r1
 8000f90:	43d2      	mvns	r2, r2
 8000f92:	401a      	ands	r2, r3
 8000f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	4003      	ands	r3, r0
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <__NVIC_SetPriority+0xd8>)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	001c      	movs	r4, r3
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	4023      	ands	r3, r4
 8000fb8:	3b08      	subs	r3, #8
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	3306      	adds	r3, #6
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	18c3      	adds	r3, r0, r3
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b003      	add	sp, #12
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	045b      	lsls	r3, r3, #17
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d301      	bcc.n	8000ff0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fec:	2301      	movs	r3, #1
 8000fee:	e010      	b.n	8001012 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <SysTick_Config+0x44>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	3a01      	subs	r2, #1
 8000ff6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff ff7c 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x44>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x44>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	210f      	movs	r1, #15
 800102c:	187b      	adds	r3, r7, r1
 800102e:	1c02      	adds	r2, r0, #0
 8001030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	187b      	adds	r3, r7, r1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b25b      	sxtb	r3, r3
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	0002      	movs	r2, r0
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff33 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ffaf 	bl	8000fd8 <SysTick_Config>
 800107a:	0003      	movs	r3, r0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e149      	b.n	8001328 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x28>
 80010aa:	e13a      	b.n	8001322 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	2201      	movs	r2, #1
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	4013      	ands	r3, r2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	58d3      	ldr	r3, [r2, r3]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2207      	movs	r2, #7
 8001180:	4013      	ands	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2107      	movs	r1, #7
 800119a:	400b      	ands	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	401a      	ands	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	23c0      	movs	r3, #192	; 0xc0
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d100      	bne.n	80011f8 <HAL_GPIO_Init+0x174>
 80011f6:	e094      	b.n	8001322 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 80011fe:	2101      	movs	r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	619a      	str	r2, [r3, #24]
 8001204:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	589b      	ldr	r3, [r3, r2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	2390      	movs	r3, #144	; 0x90
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	429a      	cmp	r2, r3
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1d6>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a41      	ldr	r2, [pc, #260]	; (8001348 <HAL_GPIO_Init+0x2c4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1d2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a40      	ldr	r2, [pc, #256]	; (800134c <HAL_GPIO_Init+0x2c8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1ce>
 800124e:	2302      	movs	r3, #2
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 8001252:	2305      	movs	r3, #5
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	029b      	lsls	r3, r3, #10
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	035b      	lsls	r3, r3, #13
 80012e6:	4013      	ands	r3, r2
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	039b      	lsls	r3, r3, #14
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	40da      	lsrs	r2, r3
 8001330:	1e13      	subs	r3, r2, #0
 8001332:	d000      	beq.n	8001336 <HAL_GPIO_Init+0x2b2>
 8001334:	e6ae      	b.n	8001094 <HAL_GPIO_Init+0x10>
  } 
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b006      	add	sp, #24
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	000a      	movs	r2, r1
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	1cba      	adds	r2, r7, #2
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	4013      	ands	r3, r2
 800136c:	d004      	beq.n	8001378 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e003      	b.n	8001380 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001378:	230f      	movs	r3, #15
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
  }
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e082      	b.n	80014a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	2100      	movs	r1, #0
 80013b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fbfd 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2241      	movs	r2, #65	; 0x41
 80013c2:	2124      	movs	r1, #36	; 0x24
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4934      	ldr	r1, [pc, #208]	; (80014b0 <HAL_I2C_Init+0x120>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4931      	ldr	r1, [pc, #196]	; (80014b4 <HAL_I2C_Init+0x124>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0209      	lsls	r1, r1, #8
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e007      	b.n	800141e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2184      	movs	r1, #132	; 0x84
 8001418:	0209      	lsls	r1, r1, #8
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d104      	bne.n	8001430 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	491f      	ldr	r1, [pc, #124]	; (80014b8 <HAL_I2C_Init+0x128>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	491a      	ldr	r1, [pc, #104]	; (80014b4 <HAL_I2C_Init+0x124>)
 800144c:	400a      	ands	r2, r1
 800144e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	431a      	orrs	r2, r3
 800145a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69d9      	ldr	r1, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2241      	movs	r2, #65	; 0x41
 8001494:	2120      	movs	r1, #32
 8001496:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2242      	movs	r2, #66	; 0x42
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	f0ffffff 	.word	0xf0ffffff
 80014b4:	ffff7fff 	.word	0xffff7fff
 80014b8:	02008000 	.word	0x02008000

080014bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	0008      	movs	r0, r1
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	0019      	movs	r1, r3
 80014ca:	230a      	movs	r3, #10
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	1c02      	adds	r2, r0, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	2308      	movs	r3, #8
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2241      	movs	r2, #65	; 0x41
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d000      	beq.n	80014e8 <HAL_I2C_Master_Transmit+0x2c>
 80014e6:	e0e7      	b.n	80016b8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Master_Transmit+0x3a>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e0e1      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014fe:	f7ff fcb5 	bl	8000e6c <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	0219      	lsls	r1, r3, #8
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2319      	movs	r3, #25
 8001512:	2201      	movs	r2, #1
 8001514:	f000 f8fc 	bl	8001710 <I2C_WaitOnFlagUntilTimeout>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0cc      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2241      	movs	r2, #65	; 0x41
 8001524:	2121      	movs	r1, #33	; 0x21
 8001526:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2242      	movs	r2, #66	; 0x42
 800152c:	2110      	movs	r1, #16
 800152e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2208      	movs	r2, #8
 8001540:	18ba      	adds	r2, r7, r2
 8001542:	8812      	ldrh	r2, [r2, #0]
 8001544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d911      	bls.n	800157a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	22ff      	movs	r2, #255	; 0xff
 800155a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	b2da      	uxtb	r2, r3
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	045c      	lsls	r4, r3, #17
 8001566:	230a      	movs	r3, #10
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	8819      	ldrh	r1, [r3, #0]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_I2C_Master_Transmit+0x208>)
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	0023      	movs	r3, r4
 8001574:	f000 fa00 	bl	8001978 <I2C_TransferConfig>
 8001578:	e075      	b.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	b2da      	uxtb	r2, r3
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	049c      	lsls	r4, r3, #18
 800158e:	230a      	movs	r3, #10
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	8819      	ldrh	r1, [r3, #0]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_I2C_Master_Transmit+0x208>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	0023      	movs	r3, r4
 800159c:	f000 f9ec 	bl	8001978 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015a0:	e061      	b.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f8f0 	bl	800178e <I2C_WaitOnTXISFlagUntilTimeout>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e081      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03a      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d136      	bne.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	0013      	movs	r3, r2
 8001602:	2200      	movs	r2, #0
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	f000 f883 	bl	8001710 <I2C_WaitOnFlagUntilTimeout>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e053      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d911      	bls.n	8001640 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001626:	b2da      	uxtb	r2, r3
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	045c      	lsls	r4, r3, #17
 800162c:	230a      	movs	r3, #10
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	0023      	movs	r3, r4
 800163a:	f000 f99d 	bl	8001978 <I2C_TransferConfig>
 800163e:	e012      	b.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164e:	b2da      	uxtb	r2, r3
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	049c      	lsls	r4, r3, #18
 8001654:	230a      	movs	r3, #10
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	0023      	movs	r3, r4
 8001662:	f000 f989 	bl	8001978 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d198      	bne.n	80015a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f8c8 	bl	800180c <I2C_WaitOnSTOPFlagUntilTimeout>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e01a      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <HAL_I2C_Master_Transmit+0x20c>)
 8001698:	400a      	ands	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2241      	movs	r2, #65	; 0x41
 80016a0:	2120      	movs	r1, #32
 80016a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2242      	movs	r2, #66	; 0x42
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
  }
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b007      	add	sp, #28
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	80002000 	.word	0x80002000
 80016c8:	fe00e800 	.word	0xfe00e800

080016cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d103      	bne.n	80016ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d007      	beq.n	8001708 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	619a      	str	r2, [r3, #24]
  }
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001720:	e021      	b.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	d01e      	beq.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001728:	f7ff fba0 	bl	8000e6c <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d302      	bcc.n	800173e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d113      	bne.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	2220      	movs	r2, #32
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2241      	movs	r2, #65	; 0x41
 800174e:	2120      	movs	r1, #32
 8001750:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2242      	movs	r2, #66	; 0x42
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2240      	movs	r2, #64	; 0x40
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	4013      	ands	r3, r2
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	425a      	negs	r2, r3
 8001776:	4153      	adcs	r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	001a      	movs	r2, r3
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d0ce      	beq.n	8001722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}

0800178e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800179a:	e02b      	b.n	80017f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 f86e 	bl	8001884 <I2C_IsAcknowledgeFailed>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d001      	beq.n	80017b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e029      	b.n	8001804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	d01e      	beq.n	80017f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b6:	f7ff fb59 	bl	8000e6c <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d302      	bcc.n	80017cc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d113      	bne.n	80017f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	2220      	movs	r2, #32
 80017d2:	431a      	orrs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2241      	movs	r2, #65	; 0x41
 80017dc:	2120      	movs	r1, #32
 80017de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2242      	movs	r2, #66	; 0x42
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	2100      	movs	r1, #0
 80017ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e007      	b.n	8001804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d1cc      	bne.n	800179c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bd80      	pop	{r7, pc}

0800180c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001818:	e028      	b.n	800186c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f82f 	bl	8001884 <I2C_IsAcknowledgeFailed>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e026      	b.n	800187c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff fb1d 	bl	8000e6c <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d113      	bne.n	800186c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	2220      	movs	r2, #32
 800184a:	431a      	orrs	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2241      	movs	r2, #65	; 0x41
 8001854:	2120      	movs	r1, #32
 8001856:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2242      	movs	r2, #66	; 0x42
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2240      	movs	r2, #64	; 0x40
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e007      	b.n	800187c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2220      	movs	r2, #32
 8001874:	4013      	ands	r3, r2
 8001876:	2b20      	cmp	r3, #32
 8001878:	d1cf      	bne.n	800181a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}

08001884 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2210      	movs	r2, #16
 8001898:	4013      	ands	r3, r2
 800189a:	2b10      	cmp	r3, #16
 800189c:	d164      	bne.n	8001968 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	049b      	lsls	r3, r3, #18
 80018a8:	401a      	ands	r2, r3
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	049b      	lsls	r3, r3, #18
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d02b      	beq.n	800190a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	01c9      	lsls	r1, r1, #7
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c4:	e021      	b.n	800190a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	d01e      	beq.n	800190a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018cc:	f7ff face 	bl	8000e6c <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d302      	bcc.n	80018e2 <I2C_IsAcknowledgeFailed+0x5e>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d113      	bne.n	800190a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	2220      	movs	r2, #32
 80018e8:	431a      	orrs	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2241      	movs	r2, #65	; 0x41
 80018f2:	2120      	movs	r1, #32
 80018f4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2242      	movs	r2, #66	; 0x42
 80018fa:	2100      	movs	r1, #0
 80018fc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2240      	movs	r2, #64	; 0x40
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e02f      	b.n	800196a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2220      	movs	r2, #32
 8001912:	4013      	ands	r3, r2
 8001914:	2b20      	cmp	r3, #32
 8001916:	d1d6      	bne.n	80018c6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2210      	movs	r2, #16
 800191e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2220      	movs	r2, #32
 8001926:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fece 	bl	80016cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <I2C_IsAcknowledgeFailed+0xf0>)
 800193c:	400a      	ands	r2, r1
 800193e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	2204      	movs	r2, #4
 8001946:	431a      	orrs	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2241      	movs	r2, #65	; 0x41
 8001950:	2120      	movs	r1, #32
 8001952:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2242      	movs	r2, #66	; 0x42
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	fe00e800 	.word	0xfe00e800

08001978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	0008      	movs	r0, r1
 8001982:	0011      	movs	r1, r2
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	240a      	movs	r4, #10
 8001988:	193b      	adds	r3, r7, r4
 800198a:	1c02      	adds	r2, r0, #0
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	2009      	movs	r0, #9
 8001990:	183b      	adds	r3, r7, r0
 8001992:	1c0a      	adds	r2, r1, #0
 8001994:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	6a3a      	ldr	r2, [r7, #32]
 800199e:	0d51      	lsrs	r1, r2, #21
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	00d2      	lsls	r2, r2, #3
 80019a4:	400a      	ands	r2, r1
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <I2C_TransferConfig+0x68>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	43d2      	mvns	r2, r2
 80019ac:	401a      	ands	r2, r3
 80019ae:	0011      	movs	r1, r2
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	059b      	lsls	r3, r3, #22
 80019b6:	0d9a      	lsrs	r2, r3, #22
 80019b8:	183b      	adds	r3, r7, r0
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	0418      	lsls	r0, r3, #16
 80019be:	23ff      	movs	r3, #255	; 0xff
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	4003      	ands	r3, r0
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b005      	add	sp, #20
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	03ff63ff 	.word	0x03ff63ff

080019e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2241      	movs	r2, #65	; 0x41
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d138      	bne.n	8001a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e032      	b.n	8001a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2241      	movs	r2, #65	; 0x41
 8001a14:	2124      	movs	r1, #36	; 0x24
 8001a16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4911      	ldr	r1, [pc, #68]	; (8001a78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2241      	movs	r2, #65	; 0x41
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	ffffefff 	.word	0xffffefff

08001a7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2241      	movs	r2, #65	; 0x41
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d139      	bne.n	8001b06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	5c9b      	ldrb	r3, [r3, r2]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e033      	b.n	8001b08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2241      	movs	r2, #65	; 0x41
 8001aac:	2124      	movs	r1, #36	; 0x24
 8001aae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	438a      	bics	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2241      	movs	r2, #65	; 0x41
 8001af6:	2120      	movs	r1, #32
 8001af8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	2100      	movs	r1, #0
 8001b00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
  }
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b004      	add	sp, #16
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	fffff0ff 	.word	0xfffff0ff

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e301      	b.n	800212a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <HAL_RCC_OscConfig+0x1e>
 8001b30:	e08d      	b.n	8001c4e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b32:	4bc3      	ldr	r3, [pc, #780]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	220c      	movs	r2, #12
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d00e      	beq.n	8001b5c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3e:	4bc0      	ldr	r3, [pc, #768]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	220c      	movs	r2, #12
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x64>
 8001b4a:	4bbd      	ldr	r3, [pc, #756]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	025b      	lsls	r3, r3, #9
 8001b52:	401a      	ands	r2, r3
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d10d      	bne.n	8001b78 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4bb8      	ldr	r3, [pc, #736]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	4013      	ands	r3, r2
 8001b66:	d100      	bne.n	8001b6a <HAL_RCC_OscConfig+0x56>
 8001b68:	e070      	b.n	8001c4c <HAL_RCC_OscConfig+0x138>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d000      	beq.n	8001b74 <HAL_RCC_OscConfig+0x60>
 8001b72:	e06b      	b.n	8001c4c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e2d8      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x7c>
 8001b80:	4baf      	ldr	r3, [pc, #700]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4bae      	ldr	r3, [pc, #696]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0249      	lsls	r1, r1, #9
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e02f      	b.n	8001bf0 <HAL_RCC_OscConfig+0xdc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x9e>
 8001b98:	4ba9      	ldr	r3, [pc, #676]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4ba8      	ldr	r3, [pc, #672]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	49a9      	ldr	r1, [pc, #676]	; (8001e44 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	4ba6      	ldr	r3, [pc, #664]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4ba5      	ldr	r3, [pc, #660]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	49a7      	ldr	r1, [pc, #668]	; (8001e48 <HAL_RCC_OscConfig+0x334>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e01e      	b.n	8001bf0 <HAL_RCC_OscConfig+0xdc>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xc4>
 8001bba:	4ba1      	ldr	r3, [pc, #644]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4ba0      	ldr	r3, [pc, #640]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	02c9      	lsls	r1, r1, #11
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	4b9d      	ldr	r3, [pc, #628]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b9c      	ldr	r3, [pc, #624]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	0249      	lsls	r1, r1, #9
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0xdc>
 8001bd8:	4b99      	ldr	r3, [pc, #612]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	4999      	ldr	r1, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x330>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b96      	ldr	r3, [pc, #600]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	4997      	ldr	r1, [pc, #604]	; (8001e48 <HAL_RCC_OscConfig+0x334>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d014      	beq.n	8001c22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f938 	bl	8000e6c <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c02:	f7ff f933 	bl	8000e6c <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b64      	cmp	r3, #100	; 0x64
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e28a      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c14:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0xee>
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f923 	bl	8000e6c <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f91e 	bl	8000e6c <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e275      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x118>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x146>
 8001c58:	e069      	b.n	8001d2e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c5a:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	d00b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c64:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d11c      	bne.n	8001caa <HAL_RCC_OscConfig+0x196>
 8001c70:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2202      	movs	r2, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x17e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e24b      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	22f8      	movs	r2, #248	; 0xf8
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	00da      	lsls	r2, r3, #3
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca8:	e041      	b.n	8001d2e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d024      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b62      	ldr	r3, [pc, #392]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f8d5 	bl	8000e6c <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f8d0 	bl	8000e6c <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e227      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d0f1      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	22f8      	movs	r2, #248	; 0xf8
 8001cea:	4393      	bics	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00da      	lsls	r2, r3, #3
 8001cf4:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e018      	b.n	8001d2e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f8b0 	bl	8000e6c <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d12:	f7ff f8ab 	bl	8000e6c <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e202      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d1f1      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2208      	movs	r2, #8
 8001d34:	4013      	ands	r3, r2
 8001d36:	d036      	beq.n	8001da6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d019      	beq.n	8001d74 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d44:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff f88e 	bl	8000e6c <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d56:	f7ff f889 	bl	8000e6c <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1e0      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d0f1      	beq.n	8001d56 <HAL_RCC_OscConfig+0x242>
 8001d72:	e018      	b.n	8001da6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f874 	bl	8000e6c <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f86f 	bl	8000e6c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1c6      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d1f1      	bne.n	8001d8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2204      	movs	r2, #4
 8001dac:	4013      	ands	r3, r2
 8001dae:	d100      	bne.n	8001db2 <HAL_RCC_OscConfig+0x29e>
 8001db0:	e0b4      	b.n	8001f1c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	201f      	movs	r0, #31
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	055b      	lsls	r3, r3, #21
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d110      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0549      	lsls	r1, r1, #21
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	61da      	str	r2, [r3, #28]
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	055b      	lsls	r3, r3, #21
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x338>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d11a      	bne.n	8001e2a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x338>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_RCC_OscConfig+0x338>)
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	0049      	lsls	r1, r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e02:	f7ff f833 	bl	8000e6c <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7ff f82e 	bl	8000e6c <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e185      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x338>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4013      	ands	r3, r2
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10e      	bne.n	8001e50 <HAL_RCC_OscConfig+0x33c>
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	621a      	str	r2, [r3, #32]
 8001e3e:	e035      	b.n	8001eac <HAL_RCC_OscConfig+0x398>
 8001e40:	40021000 	.word	0x40021000
 8001e44:	fffeffff 	.word	0xfffeffff
 8001e48:	fffbffff 	.word	0xfffbffff
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x35e>
 8001e58:	4bb6      	ldr	r3, [pc, #728]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	4bb5      	ldr	r3, [pc, #724]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	621a      	str	r2, [r3, #32]
 8001e64:	4bb3      	ldr	r3, [pc, #716]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	4bb2      	ldr	r3, [pc, #712]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	621a      	str	r2, [r3, #32]
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x398>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x380>
 8001e7a:	4bae      	ldr	r3, [pc, #696]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	4bad      	ldr	r3, [pc, #692]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e80:	2104      	movs	r1, #4
 8001e82:	430a      	orrs	r2, r1
 8001e84:	621a      	str	r2, [r3, #32]
 8001e86:	4bab      	ldr	r3, [pc, #684]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	4baa      	ldr	r3, [pc, #680]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	621a      	str	r2, [r3, #32]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x398>
 8001e94:	4ba7      	ldr	r3, [pc, #668]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	4ba6      	ldr	r3, [pc, #664]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	621a      	str	r2, [r3, #32]
 8001ea0:	4ba4      	ldr	r3, [pc, #656]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d014      	beq.n	8001ede <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7fe ffda 	bl	8000e6c <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe ffd5 	bl	8000e6c <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	4a9b      	ldr	r2, [pc, #620]	; (8002138 <HAL_RCC_OscConfig+0x624>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e12b      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	4b98      	ldr	r3, [pc, #608]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3aa>
 8001edc:	e013      	b.n	8001f06 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7fe ffc5 	bl	8000e6c <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	e009      	b.n	8001efc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe ffc0 	bl	8000e6c <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a91      	ldr	r2, [pc, #580]	; (8002138 <HAL_RCC_OscConfig+0x624>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e116      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f06:	231f      	movs	r3, #31
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	4b87      	ldr	r3, [pc, #540]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f16:	4989      	ldr	r1, [pc, #548]	; (800213c <HAL_RCC_OscConfig+0x628>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2210      	movs	r2, #16
 8001f22:	4013      	ands	r3, r2
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d12a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f2e:	4b81      	ldr	r3, [pc, #516]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f32:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f34:	2104      	movs	r1, #4
 8001f36:	430a      	orrs	r2, r1
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f3a:	4b7e      	ldr	r3, [pc, #504]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3e:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7fe ff91 	bl	8000e6c <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f50:	f7fe ff8c 	bl	8000e6c <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0e3      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f62:	4b74      	ldr	r3, [pc, #464]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d0f1      	beq.n	8001f50 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f6c:	4b71      	ldr	r3, [pc, #452]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	22f8      	movs	r2, #248	; 0xf8
 8001f72:	4393      	bics	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	00da      	lsls	r2, r3, #3
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
 8001f82:	e034      	b.n	8001fee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	3305      	adds	r3, #5
 8001f8a:	d111      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f8c:	4b69      	ldr	r3, [pc, #420]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f92:	2104      	movs	r1, #4
 8001f94:	438a      	bics	r2, r1
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f98:	4b66      	ldr	r3, [pc, #408]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	22f8      	movs	r2, #248	; 0xf8
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	00da      	lsls	r2, r3, #3
 8001fa8:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34
 8001fae:	e01e      	b.n	8001fee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fb0:	4b60      	ldr	r3, [pc, #384]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb4:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fbc:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc0:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff50 	bl	8000e6c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fd2:	f7fe ff4b 	bl	8000e6c <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0a2      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f1      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d100      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4e4>
 8001ff6:	e097      	b.n	8002128 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff8:	4b4e      	ldr	r3, [pc, #312]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	220c      	movs	r2, #12
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b08      	cmp	r3, #8
 8002002:	d100      	bne.n	8002006 <HAL_RCC_OscConfig+0x4f2>
 8002004:	e06b      	b.n	80020de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d14c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002014:	494a      	ldr	r1, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x62c>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe ff27 	bl	8000e6c <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe ff22 	bl	8000e6c <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e079      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	049b      	lsls	r3, r3, #18
 800203e:	4013      	ands	r3, r2
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	220f      	movs	r2, #15
 8002048:	4393      	bics	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002052:	430a      	orrs	r2, r1
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x630>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	431a      	orrs	r2, r3
 800206a:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	0449      	lsls	r1, r1, #17
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fef5 	bl	8000e6c <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fef0 	bl	8000e6c <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e047      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	049b      	lsls	r3, r3, #18
 80020a2:	4013      	ands	r3, r2
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x574>
 80020a6:	e03f      	b.n	8002128 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 80020ae:	4924      	ldr	r1, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x62c>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe feda 	bl	8000e6c <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe fed5 	bl	8000e6c <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e02c      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	049b      	lsls	r3, r3, #18
 80020d8:	4013      	ands	r3, r2
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x5aa>
 80020dc:	e024      	b.n	8002128 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01f      	b.n	800212a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_RCC_OscConfig+0x620>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	025b      	lsls	r3, r3, #9
 80020fc:	401a      	ands	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	429a      	cmp	r2, r3
 8002104:	d10e      	bne.n	8002124 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	220f      	movs	r2, #15
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	23f0      	movs	r3, #240	; 0xf0
 8002118:	039b      	lsls	r3, r3, #14
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b008      	add	sp, #32
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40021000 	.word	0x40021000
 8002138:	00001388 	.word	0x00001388
 800213c:	efffffff 	.word	0xefffffff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	ffc2ffff 	.word	0xffc2ffff

08002148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b3      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d911      	bls.n	800218e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4393      	bics	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	4b55      	ldr	r3, [pc, #340]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e09a      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2202      	movs	r2, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d015      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2204      	movs	r2, #4
 800219e:	4013      	ands	r3, r2
 80021a0:	d006      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80021a8:	21e0      	movs	r1, #224	; 0xe0
 80021aa:	00c9      	lsls	r1, r1, #3
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	22f0      	movs	r2, #240	; 0xf0
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	029b      	lsls	r3, r3, #10
 80021de:	4013      	ands	r3, r2
 80021e0:	d114      	bne.n	800220c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06e      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	049b      	lsls	r3, r3, #18
 80021f6:	4013      	ands	r3, r2
 80021f8:	d108      	bne.n	800220c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e062      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e05b      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	4393      	bics	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7fe fe24 	bl	8000e6c <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002228:	e009      	b.n	800223e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222a:	f7fe fe1f 	bl	8000e6c <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_RCC_ClockConfig+0x18c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e042      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	220c      	movs	r2, #12
 8002244:	401a      	ands	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1ec      	bne.n	800222a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d211      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x184>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2201      	movs	r2, #1
 8002276:	4013      	ands	r3, r2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e020      	b.n	80022c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2204      	movs	r2, #4
 8002288:	4013      	ands	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_RCC_ClockConfig+0x190>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022a0:	f000 f820 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a4:	0001      	movs	r1, r0
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x188>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	220f      	movs	r2, #15
 80022ae:	4013      	ands	r3, r2
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x194>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	000a      	movs	r2, r1
 80022b6:	40da      	lsrs	r2, r3
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x198>)
 80022ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fd8f 	bl	8000de0 <HAL_InitTick>
  
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	00001388 	.word	0x00001388
 80022d8:	fffff8ff 	.word	0xfffff8ff
 80022dc:	0800337c 	.word	0x0800337c
 80022e0:	2000001c 	.word	0x2000001c

080022e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b08f      	sub	sp, #60	; 0x3c
 80022e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80022ea:	2314      	movs	r3, #20
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	4a2b      	ldr	r2, [pc, #172]	; (800239c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022f2:	c313      	stmia	r3!, {r0, r1, r4}
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022fe:	c313      	stmia	r3!, {r0, r1, r4}
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	220c      	movs	r2, #12
 8002322:	4013      	ands	r3, r2
 8002324:	2b04      	cmp	r3, #4
 8002326:	d002      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x4a>
 8002328:	2b08      	cmp	r3, #8
 800232a:	d003      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x50>
 800232c:	e02d      	b.n	800238a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002332:	e02d      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	0c9b      	lsrs	r3, r3, #18
 8002338:	220f      	movs	r2, #15
 800233a:	4013      	ands	r3, r2
 800233c:	2214      	movs	r2, #20
 800233e:	18ba      	adds	r2, r7, r2
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	220f      	movs	r2, #15
 800234a:	4013      	ands	r3, r2
 800234c:	1d3a      	adds	r2, r7, #4
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	4013      	ands	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800235c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235e:	4812      	ldr	r0, [pc, #72]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002360:	f7fd fee4 	bl	800012c <__udivsi3>
 8002364:	0003      	movs	r3, r0
 8002366:	001a      	movs	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	4353      	muls	r3, r2
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	e009      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002372:	000a      	movs	r2, r1
 8002374:	0152      	lsls	r2, r2, #5
 8002376:	1a52      	subs	r2, r2, r1
 8002378:	0193      	lsls	r3, r2, #6
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	185b      	adds	r3, r3, r1
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800238e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b00f      	add	sp, #60	; 0x3c
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0800335c 	.word	0x0800335c
 80023a0:	0800336c 	.word	0x0800336c
 80023a4:	40021000 	.word	0x40021000
 80023a8:	007a1200 	.word	0x007a1200

080023ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	025b      	lsls	r3, r3, #9
 80023c4:	4013      	ands	r3, r2
 80023c6:	d100      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023c8:	e08e      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2017      	movs	r0, #23
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	055b      	lsls	r3, r3, #21
 80023da:	4013      	ands	r3, r2
 80023dc:	d110      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0549      	lsls	r1, r1, #21
 80023e8:	430a      	orrs	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	055b      	lsls	r3, r3, #21
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d11a      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240c:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b48      	ldr	r3, [pc, #288]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	0049      	lsls	r1, r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fd27 	bl	8000e6c <HAL_GetTick>
 800241e:	0003      	movs	r3, r0
 8002420:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	e008      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fd22 	bl	8000e6c <HAL_GetTick>
 8002428:	0002      	movs	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e077      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4013      	ands	r3, r2
 8002440:	d0f0      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	23c0      	movs	r3, #192	; 0xc0
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d034      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	23c0      	movs	r3, #192	; 0xc0
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4013      	ands	r3, r2
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d02c      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a33      	ldr	r2, [pc, #204]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0249      	lsls	r1, r1, #9
 8002478:	430a      	orrs	r2, r1
 800247a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002482:	492e      	ldr	r1, [pc, #184]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002484:	400a      	ands	r2, r1
 8002486:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fce9 	bl	8000e6c <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	e009      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe fce4 	bl	8000e6c <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	4a25      	ldr	r2, [pc, #148]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e038      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d2:	2317      	movs	r3, #23
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024e2:	4918      	ldr	r1, [pc, #96]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	2203      	movs	r2, #3
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002502:	430a      	orrs	r2, r1
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	4013      	ands	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	2210      	movs	r2, #16
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002520:	430a      	orrs	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b006      	add	sp, #24
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	fffffcff 	.word	0xfffffcff
 800253c:	fffeffff 	.word	0xfffeffff
 8002540:	00001388 	.word	0x00001388
 8002544:	efffffff 	.word	0xefffffff

08002548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e042      	b.n	80025e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	223d      	movs	r2, #61	; 0x3d
 800255e:	5c9b      	ldrb	r3, [r3, r2]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	223c      	movs	r2, #60	; 0x3c
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	0018      	movs	r0, r3
 8002572:	f7fe fb6f 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	223d      	movs	r2, #61	; 0x3d
 800257a:	2102      	movs	r1, #2
 800257c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	0019      	movs	r1, r3
 8002588:	0010      	movs	r0, r2
 800258a:	f000 f9af 	bl	80028ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2246      	movs	r2, #70	; 0x46
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	223e      	movs	r2, #62	; 0x3e
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	223f      	movs	r2, #63	; 0x3f
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2240      	movs	r2, #64	; 0x40
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2242      	movs	r2, #66	; 0x42
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2243      	movs	r2, #67	; 0x43
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2244      	movs	r2, #68	; 0x44
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2245      	movs	r2, #69	; 0x45
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	223d      	movs	r2, #61	; 0x3d
 80025da:	2101      	movs	r1, #1
 80025dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223d      	movs	r2, #61	; 0x3d
 80025f4:	5c9b      	ldrb	r3, [r3, r2]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e036      	b.n	800266e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	223d      	movs	r2, #61	; 0x3d
 8002604:	2102      	movs	r1, #2
 8002606:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_TIM_Base_Start_IT+0x90>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00a      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x50>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	05db      	lsls	r3, r3, #23
 800262a:	429a      	cmp	r2, r3
 800262c:	d004      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x50>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_TIM_Base_Start_IT+0x94>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2207      	movs	r2, #7
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d010      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265a:	e007      	b.n	800266c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400

08002680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d124      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11d      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2203      	movs	r2, #3
 80026aa:	4252      	negs	r2, r2
 80026ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2203      	movs	r2, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f8fa 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80026c8:	e007      	b.n	80026da <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f8ed 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f8f9 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2204      	movs	r2, #4
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d125      	bne.n	800273a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2204      	movs	r2, #4
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d11e      	bne.n	800273a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2205      	movs	r2, #5
 8002702:	4252      	negs	r2, r2
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	23c0      	movs	r3, #192	; 0xc0
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f8cd 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8002722:	e007      	b.n	8002734 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f8c0 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f8cc 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	2b08      	cmp	r3, #8
 8002746:	d124      	bne.n	8002792 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2208      	movs	r2, #8
 8002750:	4013      	ands	r3, r2
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11d      	bne.n	8002792 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2209      	movs	r2, #9
 800275c:	4252      	negs	r2, r2
 800275e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2204      	movs	r2, #4
 8002764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2203      	movs	r2, #3
 800276e:	4013      	ands	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f8a1 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 800277a:	e007      	b.n	800278c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f894 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f8a0 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	2b10      	cmp	r3, #16
 800279e:	d125      	bne.n	80027ec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2210      	movs	r2, #16
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d11e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2211      	movs	r2, #17
 80027b4:	4252      	negs	r2, r2
 80027b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2208      	movs	r2, #8
 80027bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	23c0      	movs	r3, #192	; 0xc0
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4013      	ands	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f874 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80027d4:	e007      	b.n	80027e6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 f867 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f873 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10f      	bne.n	800281a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	2b01      	cmp	r3, #1
 8002806:	d108      	bne.n	800281a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2202      	movs	r2, #2
 800280e:	4252      	negs	r2, r2
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f7fe f993 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	4013      	ands	r3, r2
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d10f      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	4013      	ands	r3, r2
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d108      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2281      	movs	r2, #129	; 0x81
 800283c:	4252      	negs	r2, r2
 800283e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f8d0 	bl	80029e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	4013      	ands	r3, r2
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d10f      	bne.n	8002876 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2240      	movs	r2, #64	; 0x40
 800285e:	4013      	ands	r3, r2
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d108      	bne.n	8002876 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2241      	movs	r2, #65	; 0x41
 800286a:	4252      	negs	r2, r2
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f833 	bl	80028dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	2b20      	cmp	r3, #32
 8002882:	d10f      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	4013      	ands	r3, r2
 800288e:	2b20      	cmp	r3, #32
 8002890:	d108      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2221      	movs	r2, #33	; 0x21
 8002898:	4252      	negs	r2, r2
 800289a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f89a 	bl	80029d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <TIM_Base_SetConfig+0xd4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d008      	beq.n	8002916 <TIM_Base_SetConfig+0x2a>
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	05db      	lsls	r3, r3, #23
 800290a:	429a      	cmp	r2, r3
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x2a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <TIM_Base_SetConfig+0xd8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2270      	movs	r2, #112	; 0x70
 800291a:	4393      	bics	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <TIM_Base_SetConfig+0xd4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d014      	beq.n	800295a <TIM_Base_SetConfig+0x6e>
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	429a      	cmp	r2, r3
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0x6e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a21      	ldr	r2, [pc, #132]	; (80029c4 <TIM_Base_SetConfig+0xd8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x6e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <TIM_Base_SetConfig+0xdc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x6e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <TIM_Base_SetConfig+0xe0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x6e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <TIM_Base_SetConfig+0xe4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <TIM_Base_SetConfig+0xe8>)
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	4393      	bics	r3, r2
 8002972:	001a      	movs	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <TIM_Base_SetConfig+0xd4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0xbe>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <TIM_Base_SetConfig+0xe0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0xbe>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <TIM_Base_SetConfig+0xe4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d103      	bne.n	80029b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	615a      	str	r2, [r3, #20]
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40002000 	.word	0x40002000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800
 80029d4:	fffffcff 	.word	0xfffffcff

080029d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <__errno>:
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <__errno+0x8>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	4770      	bx	lr
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	20000028 	.word	0x20000028

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	2600      	movs	r6, #0
 8002a08:	4d0c      	ldr	r5, [pc, #48]	; (8002a3c <__libc_init_array+0x38>)
 8002a0a:	4c0d      	ldr	r4, [pc, #52]	; (8002a40 <__libc_init_array+0x3c>)
 8002a0c:	1b64      	subs	r4, r4, r5
 8002a0e:	10a4      	asrs	r4, r4, #2
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	2600      	movs	r6, #0
 8002a16:	f000 fc8b 	bl	8003330 <_init>
 8002a1a:	4d0a      	ldr	r5, [pc, #40]	; (8002a44 <__libc_init_array+0x40>)
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	; (8002a48 <__libc_init_array+0x44>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	00b3      	lsls	r3, r6, #2
 8002a2a:	58eb      	ldr	r3, [r5, r3]
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	00b3      	lsls	r3, r6, #2
 8002a34:	58eb      	ldr	r3, [r5, r3]
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	080033c0 	.word	0x080033c0
 8002a40:	080033c0 	.word	0x080033c0
 8002a44:	080033c0 	.word	0x080033c0
 8002a48:	080033c4 	.word	0x080033c4

08002a4c <memset>:
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	1882      	adds	r2, r0, r2
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d100      	bne.n	8002a56 <memset+0xa>
 8002a54:	4770      	bx	lr
 8002a56:	7019      	strb	r1, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e7f9      	b.n	8002a50 <memset+0x4>

08002a5c <siprintf>:
 8002a5c:	b40e      	push	{r1, r2, r3}
 8002a5e:	b500      	push	{lr}
 8002a60:	490b      	ldr	r1, [pc, #44]	; (8002a90 <siprintf+0x34>)
 8002a62:	b09c      	sub	sp, #112	; 0x70
 8002a64:	ab1d      	add	r3, sp, #116	; 0x74
 8002a66:	9002      	str	r0, [sp, #8]
 8002a68:	9006      	str	r0, [sp, #24]
 8002a6a:	9107      	str	r1, [sp, #28]
 8002a6c:	9104      	str	r1, [sp, #16]
 8002a6e:	4809      	ldr	r0, [pc, #36]	; (8002a94 <siprintf+0x38>)
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <siprintf+0x3c>)
 8002a72:	cb04      	ldmia	r3!, {r2}
 8002a74:	9105      	str	r1, [sp, #20]
 8002a76:	6800      	ldr	r0, [r0, #0]
 8002a78:	a902      	add	r1, sp, #8
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f000 f870 	bl	8002b60 <_svfiprintf_r>
 8002a80:	2300      	movs	r3, #0
 8002a82:	9a02      	ldr	r2, [sp, #8]
 8002a84:	7013      	strb	r3, [r2, #0]
 8002a86:	b01c      	add	sp, #112	; 0x70
 8002a88:	bc08      	pop	{r3}
 8002a8a:	b003      	add	sp, #12
 8002a8c:	4718      	bx	r3
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	7fffffff 	.word	0x7fffffff
 8002a94:	20000028 	.word	0x20000028
 8002a98:	ffff0208 	.word	0xffff0208

08002a9c <__ssputs_r>:
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	688e      	ldr	r6, [r1, #8]
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	0007      	movs	r7, r0
 8002aa4:	000c      	movs	r4, r1
 8002aa6:	9203      	str	r2, [sp, #12]
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	429e      	cmp	r6, r3
 8002aac:	d83c      	bhi.n	8002b28 <__ssputs_r+0x8c>
 8002aae:	2390      	movs	r3, #144	; 0x90
 8002ab0:	898a      	ldrh	r2, [r1, #12]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	421a      	tst	r2, r3
 8002ab6:	d034      	beq.n	8002b22 <__ssputs_r+0x86>
 8002ab8:	6909      	ldr	r1, [r1, #16]
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	6960      	ldr	r0, [r4, #20]
 8002abe:	1a5b      	subs	r3, r3, r1
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	4343      	muls	r3, r0
 8002ac6:	0fdd      	lsrs	r5, r3, #31
 8002ac8:	18ed      	adds	r5, r5, r3
 8002aca:	9b01      	ldr	r3, [sp, #4]
 8002acc:	9802      	ldr	r0, [sp, #8]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	181b      	adds	r3, r3, r0
 8002ad2:	106d      	asrs	r5, r5, #1
 8002ad4:	42ab      	cmp	r3, r5
 8002ad6:	d900      	bls.n	8002ada <__ssputs_r+0x3e>
 8002ad8:	001d      	movs	r5, r3
 8002ada:	0553      	lsls	r3, r2, #21
 8002adc:	d532      	bpl.n	8002b44 <__ssputs_r+0xa8>
 8002ade:	0029      	movs	r1, r5
 8002ae0:	0038      	movs	r0, r7
 8002ae2:	f000 fb53 	bl	800318c <_malloc_r>
 8002ae6:	1e06      	subs	r6, r0, #0
 8002ae8:	d109      	bne.n	8002afe <__ssputs_r+0x62>
 8002aea:	230c      	movs	r3, #12
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	2001      	movs	r0, #1
 8002af2:	89a2      	ldrh	r2, [r4, #12]
 8002af4:	4240      	negs	r0, r0
 8002af6:	4313      	orrs	r3, r2
 8002af8:	81a3      	strh	r3, [r4, #12]
 8002afa:	b005      	add	sp, #20
 8002afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afe:	9a02      	ldr	r2, [sp, #8]
 8002b00:	6921      	ldr	r1, [r4, #16]
 8002b02:	f000 faba 	bl	800307a <memcpy>
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <__ssputs_r+0xc0>)
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	81a3      	strh	r3, [r4, #12]
 8002b12:	9b02      	ldr	r3, [sp, #8]
 8002b14:	6126      	str	r6, [r4, #16]
 8002b16:	18f6      	adds	r6, r6, r3
 8002b18:	6026      	str	r6, [r4, #0]
 8002b1a:	6165      	str	r5, [r4, #20]
 8002b1c:	9e01      	ldr	r6, [sp, #4]
 8002b1e:	1aed      	subs	r5, r5, r3
 8002b20:	60a5      	str	r5, [r4, #8]
 8002b22:	9b01      	ldr	r3, [sp, #4]
 8002b24:	429e      	cmp	r6, r3
 8002b26:	d900      	bls.n	8002b2a <__ssputs_r+0x8e>
 8002b28:	9e01      	ldr	r6, [sp, #4]
 8002b2a:	0032      	movs	r2, r6
 8002b2c:	9903      	ldr	r1, [sp, #12]
 8002b2e:	6820      	ldr	r0, [r4, #0]
 8002b30:	f000 faac 	bl	800308c <memmove>
 8002b34:	68a3      	ldr	r3, [r4, #8]
 8002b36:	2000      	movs	r0, #0
 8002b38:	1b9b      	subs	r3, r3, r6
 8002b3a:	60a3      	str	r3, [r4, #8]
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	199e      	adds	r6, r3, r6
 8002b40:	6026      	str	r6, [r4, #0]
 8002b42:	e7da      	b.n	8002afa <__ssputs_r+0x5e>
 8002b44:	002a      	movs	r2, r5
 8002b46:	0038      	movs	r0, r7
 8002b48:	f000 fb96 	bl	8003278 <_realloc_r>
 8002b4c:	1e06      	subs	r6, r0, #0
 8002b4e:	d1e0      	bne.n	8002b12 <__ssputs_r+0x76>
 8002b50:	0038      	movs	r0, r7
 8002b52:	6921      	ldr	r1, [r4, #16]
 8002b54:	f000 faae 	bl	80030b4 <_free_r>
 8002b58:	e7c7      	b.n	8002aea <__ssputs_r+0x4e>
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	fffffb7f 	.word	0xfffffb7f

08002b60 <_svfiprintf_r>:
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	b0a1      	sub	sp, #132	; 0x84
 8002b64:	9003      	str	r0, [sp, #12]
 8002b66:	001d      	movs	r5, r3
 8002b68:	898b      	ldrh	r3, [r1, #12]
 8002b6a:	000f      	movs	r7, r1
 8002b6c:	0016      	movs	r6, r2
 8002b6e:	061b      	lsls	r3, r3, #24
 8002b70:	d511      	bpl.n	8002b96 <_svfiprintf_r+0x36>
 8002b72:	690b      	ldr	r3, [r1, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10e      	bne.n	8002b96 <_svfiprintf_r+0x36>
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	f000 fb07 	bl	800318c <_malloc_r>
 8002b7e:	6038      	str	r0, [r7, #0]
 8002b80:	6138      	str	r0, [r7, #16]
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d105      	bne.n	8002b92 <_svfiprintf_r+0x32>
 8002b86:	230c      	movs	r3, #12
 8002b88:	9a03      	ldr	r2, [sp, #12]
 8002b8a:	3801      	subs	r0, #1
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	b021      	add	sp, #132	; 0x84
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b92:	2340      	movs	r3, #64	; 0x40
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	2300      	movs	r3, #0
 8002b98:	ac08      	add	r4, sp, #32
 8002b9a:	6163      	str	r3, [r4, #20]
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	7663      	strb	r3, [r4, #25]
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	76a3      	strb	r3, [r4, #26]
 8002ba4:	9507      	str	r5, [sp, #28]
 8002ba6:	0035      	movs	r5, r6
 8002ba8:	782b      	ldrb	r3, [r5, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_svfiprintf_r+0x52>
 8002bae:	2b25      	cmp	r3, #37	; 0x25
 8002bb0:	d147      	bne.n	8002c42 <_svfiprintf_r+0xe2>
 8002bb2:	1bab      	subs	r3, r5, r6
 8002bb4:	9305      	str	r3, [sp, #20]
 8002bb6:	42b5      	cmp	r5, r6
 8002bb8:	d00c      	beq.n	8002bd4 <_svfiprintf_r+0x74>
 8002bba:	0032      	movs	r2, r6
 8002bbc:	0039      	movs	r1, r7
 8002bbe:	9803      	ldr	r0, [sp, #12]
 8002bc0:	f7ff ff6c 	bl	8002a9c <__ssputs_r>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d100      	bne.n	8002bca <_svfiprintf_r+0x6a>
 8002bc8:	e0ae      	b.n	8002d28 <_svfiprintf_r+0x1c8>
 8002bca:	6962      	ldr	r2, [r4, #20]
 8002bcc:	9b05      	ldr	r3, [sp, #20]
 8002bce:	4694      	mov	ip, r2
 8002bd0:	4463      	add	r3, ip
 8002bd2:	6163      	str	r3, [r4, #20]
 8002bd4:	782b      	ldrb	r3, [r5, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <_svfiprintf_r+0x7c>
 8002bda:	e0a5      	b.n	8002d28 <_svfiprintf_r+0x1c8>
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2300      	movs	r3, #0
 8002be0:	4252      	negs	r2, r2
 8002be2:	6062      	str	r2, [r4, #4]
 8002be4:	a904      	add	r1, sp, #16
 8002be6:	3254      	adds	r2, #84	; 0x54
 8002be8:	1852      	adds	r2, r2, r1
 8002bea:	1c6e      	adds	r6, r5, #1
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	60e3      	str	r3, [r4, #12]
 8002bf0:	60a3      	str	r3, [r4, #8]
 8002bf2:	7013      	strb	r3, [r2, #0]
 8002bf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	7831      	ldrb	r1, [r6, #0]
 8002bfa:	4854      	ldr	r0, [pc, #336]	; (8002d4c <_svfiprintf_r+0x1ec>)
 8002bfc:	f000 fa32 	bl	8003064 <memchr>
 8002c00:	1c75      	adds	r5, r6, #1
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d11f      	bne.n	8002c46 <_svfiprintf_r+0xe6>
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	06d3      	lsls	r3, r2, #27
 8002c0a:	d504      	bpl.n	8002c16 <_svfiprintf_r+0xb6>
 8002c0c:	2353      	movs	r3, #83	; 0x53
 8002c0e:	a904      	add	r1, sp, #16
 8002c10:	185b      	adds	r3, r3, r1
 8002c12:	2120      	movs	r1, #32
 8002c14:	7019      	strb	r1, [r3, #0]
 8002c16:	0713      	lsls	r3, r2, #28
 8002c18:	d504      	bpl.n	8002c24 <_svfiprintf_r+0xc4>
 8002c1a:	2353      	movs	r3, #83	; 0x53
 8002c1c:	a904      	add	r1, sp, #16
 8002c1e:	185b      	adds	r3, r3, r1
 8002c20:	212b      	movs	r1, #43	; 0x2b
 8002c22:	7019      	strb	r1, [r3, #0]
 8002c24:	7833      	ldrb	r3, [r6, #0]
 8002c26:	2b2a      	cmp	r3, #42	; 0x2a
 8002c28:	d016      	beq.n	8002c58 <_svfiprintf_r+0xf8>
 8002c2a:	0035      	movs	r5, r6
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	200a      	movs	r0, #10
 8002c30:	68e3      	ldr	r3, [r4, #12]
 8002c32:	782a      	ldrb	r2, [r5, #0]
 8002c34:	1c6e      	adds	r6, r5, #1
 8002c36:	3a30      	subs	r2, #48	; 0x30
 8002c38:	2a09      	cmp	r2, #9
 8002c3a:	d94e      	bls.n	8002cda <_svfiprintf_r+0x17a>
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d111      	bne.n	8002c64 <_svfiprintf_r+0x104>
 8002c40:	e017      	b.n	8002c72 <_svfiprintf_r+0x112>
 8002c42:	3501      	adds	r5, #1
 8002c44:	e7b0      	b.n	8002ba8 <_svfiprintf_r+0x48>
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <_svfiprintf_r+0x1ec>)
 8002c48:	6822      	ldr	r2, [r4, #0]
 8002c4a:	1ac0      	subs	r0, r0, r3
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	4083      	lsls	r3, r0
 8002c50:	4313      	orrs	r3, r2
 8002c52:	002e      	movs	r6, r5
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	e7ce      	b.n	8002bf6 <_svfiprintf_r+0x96>
 8002c58:	9b07      	ldr	r3, [sp, #28]
 8002c5a:	1d19      	adds	r1, r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	9107      	str	r1, [sp, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db01      	blt.n	8002c68 <_svfiprintf_r+0x108>
 8002c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c66:	e004      	b.n	8002c72 <_svfiprintf_r+0x112>
 8002c68:	425b      	negs	r3, r3
 8002c6a:	60e3      	str	r3, [r4, #12]
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	782b      	ldrb	r3, [r5, #0]
 8002c74:	2b2e      	cmp	r3, #46	; 0x2e
 8002c76:	d10a      	bne.n	8002c8e <_svfiprintf_r+0x12e>
 8002c78:	786b      	ldrb	r3, [r5, #1]
 8002c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c7c:	d135      	bne.n	8002cea <_svfiprintf_r+0x18a>
 8002c7e:	9b07      	ldr	r3, [sp, #28]
 8002c80:	3502      	adds	r5, #2
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	9207      	str	r2, [sp, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db2b      	blt.n	8002ce4 <_svfiprintf_r+0x184>
 8002c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8e:	4e30      	ldr	r6, [pc, #192]	; (8002d50 <_svfiprintf_r+0x1f0>)
 8002c90:	2203      	movs	r2, #3
 8002c92:	0030      	movs	r0, r6
 8002c94:	7829      	ldrb	r1, [r5, #0]
 8002c96:	f000 f9e5 	bl	8003064 <memchr>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d006      	beq.n	8002cac <_svfiprintf_r+0x14c>
 8002c9e:	2340      	movs	r3, #64	; 0x40
 8002ca0:	1b80      	subs	r0, r0, r6
 8002ca2:	4083      	lsls	r3, r0
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	3501      	adds	r5, #1
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	7829      	ldrb	r1, [r5, #0]
 8002cae:	2206      	movs	r2, #6
 8002cb0:	4828      	ldr	r0, [pc, #160]	; (8002d54 <_svfiprintf_r+0x1f4>)
 8002cb2:	1c6e      	adds	r6, r5, #1
 8002cb4:	7621      	strb	r1, [r4, #24]
 8002cb6:	f000 f9d5 	bl	8003064 <memchr>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d03c      	beq.n	8002d38 <_svfiprintf_r+0x1d8>
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <_svfiprintf_r+0x1f8>)
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d125      	bne.n	8002d10 <_svfiprintf_r+0x1b0>
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	9b07      	ldr	r3, [sp, #28]
 8002cc8:	3307      	adds	r3, #7
 8002cca:	4393      	bics	r3, r2
 8002ccc:	3308      	adds	r3, #8
 8002cce:	9307      	str	r3, [sp, #28]
 8002cd0:	6963      	ldr	r3, [r4, #20]
 8002cd2:	9a04      	ldr	r2, [sp, #16]
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	6163      	str	r3, [r4, #20]
 8002cd8:	e765      	b.n	8002ba6 <_svfiprintf_r+0x46>
 8002cda:	4343      	muls	r3, r0
 8002cdc:	0035      	movs	r5, r6
 8002cde:	2101      	movs	r1, #1
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	e7a6      	b.n	8002c32 <_svfiprintf_r+0xd2>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	425b      	negs	r3, r3
 8002ce8:	e7d0      	b.n	8002c8c <_svfiprintf_r+0x12c>
 8002cea:	2300      	movs	r3, #0
 8002cec:	200a      	movs	r0, #10
 8002cee:	001a      	movs	r2, r3
 8002cf0:	3501      	adds	r5, #1
 8002cf2:	6063      	str	r3, [r4, #4]
 8002cf4:	7829      	ldrb	r1, [r5, #0]
 8002cf6:	1c6e      	adds	r6, r5, #1
 8002cf8:	3930      	subs	r1, #48	; 0x30
 8002cfa:	2909      	cmp	r1, #9
 8002cfc:	d903      	bls.n	8002d06 <_svfiprintf_r+0x1a6>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0c5      	beq.n	8002c8e <_svfiprintf_r+0x12e>
 8002d02:	9209      	str	r2, [sp, #36]	; 0x24
 8002d04:	e7c3      	b.n	8002c8e <_svfiprintf_r+0x12e>
 8002d06:	4342      	muls	r2, r0
 8002d08:	0035      	movs	r5, r6
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	1852      	adds	r2, r2, r1
 8002d0e:	e7f1      	b.n	8002cf4 <_svfiprintf_r+0x194>
 8002d10:	ab07      	add	r3, sp, #28
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	003a      	movs	r2, r7
 8002d16:	0021      	movs	r1, r4
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <_svfiprintf_r+0x1fc>)
 8002d1a:	9803      	ldr	r0, [sp, #12]
 8002d1c:	e000      	b.n	8002d20 <_svfiprintf_r+0x1c0>
 8002d1e:	bf00      	nop
 8002d20:	9004      	str	r0, [sp, #16]
 8002d22:	9b04      	ldr	r3, [sp, #16]
 8002d24:	3301      	adds	r3, #1
 8002d26:	d1d3      	bne.n	8002cd0 <_svfiprintf_r+0x170>
 8002d28:	89bb      	ldrh	r3, [r7, #12]
 8002d2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002d2c:	065b      	lsls	r3, r3, #25
 8002d2e:	d400      	bmi.n	8002d32 <_svfiprintf_r+0x1d2>
 8002d30:	e72d      	b.n	8002b8e <_svfiprintf_r+0x2e>
 8002d32:	2001      	movs	r0, #1
 8002d34:	4240      	negs	r0, r0
 8002d36:	e72a      	b.n	8002b8e <_svfiprintf_r+0x2e>
 8002d38:	ab07      	add	r3, sp, #28
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	003a      	movs	r2, r7
 8002d3e:	0021      	movs	r1, r4
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <_svfiprintf_r+0x1fc>)
 8002d42:	9803      	ldr	r0, [sp, #12]
 8002d44:	f000 f87c 	bl	8002e40 <_printf_i>
 8002d48:	e7ea      	b.n	8002d20 <_svfiprintf_r+0x1c0>
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	0800338c 	.word	0x0800338c
 8002d50:	08003392 	.word	0x08003392
 8002d54:	08003396 	.word	0x08003396
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	08002a9d 	.word	0x08002a9d

08002d60 <_printf_common>:
 8002d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d62:	0015      	movs	r5, r2
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	688a      	ldr	r2, [r1, #8]
 8002d68:	690b      	ldr	r3, [r1, #16]
 8002d6a:	000c      	movs	r4, r1
 8002d6c:	9000      	str	r0, [sp, #0]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	da00      	bge.n	8002d74 <_printf_common+0x14>
 8002d72:	0013      	movs	r3, r2
 8002d74:	0022      	movs	r2, r4
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	3243      	adds	r2, #67	; 0x43
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d001      	beq.n	8002d84 <_printf_common+0x24>
 8002d80:	3301      	adds	r3, #1
 8002d82:	602b      	str	r3, [r5, #0]
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	069b      	lsls	r3, r3, #26
 8002d88:	d502      	bpl.n	8002d90 <_printf_common+0x30>
 8002d8a:	682b      	ldr	r3, [r5, #0]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	602b      	str	r3, [r5, #0]
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	2306      	movs	r3, #6
 8002d94:	0017      	movs	r7, r2
 8002d96:	401f      	ands	r7, r3
 8002d98:	421a      	tst	r2, r3
 8002d9a:	d027      	beq.n	8002dec <_printf_common+0x8c>
 8002d9c:	0023      	movs	r3, r4
 8002d9e:	3343      	adds	r3, #67	; 0x43
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	4193      	sbcs	r3, r2
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	0692      	lsls	r2, r2, #26
 8002daa:	d430      	bmi.n	8002e0e <_printf_common+0xae>
 8002dac:	0022      	movs	r2, r4
 8002dae:	9901      	ldr	r1, [sp, #4]
 8002db0:	9800      	ldr	r0, [sp, #0]
 8002db2:	9e08      	ldr	r6, [sp, #32]
 8002db4:	3243      	adds	r2, #67	; 0x43
 8002db6:	47b0      	blx	r6
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d025      	beq.n	8002e08 <_printf_common+0xa8>
 8002dbc:	2306      	movs	r3, #6
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	682a      	ldr	r2, [r5, #0]
 8002dc2:	68e1      	ldr	r1, [r4, #12]
 8002dc4:	2500      	movs	r5, #0
 8002dc6:	4003      	ands	r3, r0
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d103      	bne.n	8002dd4 <_printf_common+0x74>
 8002dcc:	1a8d      	subs	r5, r1, r2
 8002dce:	43eb      	mvns	r3, r5
 8002dd0:	17db      	asrs	r3, r3, #31
 8002dd2:	401d      	ands	r5, r3
 8002dd4:	68a3      	ldr	r3, [r4, #8]
 8002dd6:	6922      	ldr	r2, [r4, #16]
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	dd01      	ble.n	8002de0 <_printf_common+0x80>
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	18ed      	adds	r5, r5, r3
 8002de0:	2700      	movs	r7, #0
 8002de2:	42bd      	cmp	r5, r7
 8002de4:	d120      	bne.n	8002e28 <_printf_common+0xc8>
 8002de6:	2000      	movs	r0, #0
 8002de8:	e010      	b.n	8002e0c <_printf_common+0xac>
 8002dea:	3701      	adds	r7, #1
 8002dec:	68e3      	ldr	r3, [r4, #12]
 8002dee:	682a      	ldr	r2, [r5, #0]
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	42bb      	cmp	r3, r7
 8002df4:	ddd2      	ble.n	8002d9c <_printf_common+0x3c>
 8002df6:	0022      	movs	r2, r4
 8002df8:	2301      	movs	r3, #1
 8002dfa:	9901      	ldr	r1, [sp, #4]
 8002dfc:	9800      	ldr	r0, [sp, #0]
 8002dfe:	9e08      	ldr	r6, [sp, #32]
 8002e00:	3219      	adds	r2, #25
 8002e02:	47b0      	blx	r6
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d1f0      	bne.n	8002dea <_printf_common+0x8a>
 8002e08:	2001      	movs	r0, #1
 8002e0a:	4240      	negs	r0, r0
 8002e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e0e:	2030      	movs	r0, #48	; 0x30
 8002e10:	18e1      	adds	r1, r4, r3
 8002e12:	3143      	adds	r1, #67	; 0x43
 8002e14:	7008      	strb	r0, [r1, #0]
 8002e16:	0021      	movs	r1, r4
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	3145      	adds	r1, #69	; 0x45
 8002e1c:	7809      	ldrb	r1, [r1, #0]
 8002e1e:	18a2      	adds	r2, r4, r2
 8002e20:	3243      	adds	r2, #67	; 0x43
 8002e22:	3302      	adds	r3, #2
 8002e24:	7011      	strb	r1, [r2, #0]
 8002e26:	e7c1      	b.n	8002dac <_printf_common+0x4c>
 8002e28:	0022      	movs	r2, r4
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9901      	ldr	r1, [sp, #4]
 8002e2e:	9800      	ldr	r0, [sp, #0]
 8002e30:	9e08      	ldr	r6, [sp, #32]
 8002e32:	321a      	adds	r2, #26
 8002e34:	47b0      	blx	r6
 8002e36:	1c43      	adds	r3, r0, #1
 8002e38:	d0e6      	beq.n	8002e08 <_printf_common+0xa8>
 8002e3a:	3701      	adds	r7, #1
 8002e3c:	e7d1      	b.n	8002de2 <_printf_common+0x82>
	...

08002e40 <_printf_i>:
 8002e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e42:	b08b      	sub	sp, #44	; 0x2c
 8002e44:	9206      	str	r2, [sp, #24]
 8002e46:	000a      	movs	r2, r1
 8002e48:	3243      	adds	r2, #67	; 0x43
 8002e4a:	9307      	str	r3, [sp, #28]
 8002e4c:	9005      	str	r0, [sp, #20]
 8002e4e:	9204      	str	r2, [sp, #16]
 8002e50:	7e0a      	ldrb	r2, [r1, #24]
 8002e52:	000c      	movs	r4, r1
 8002e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e56:	2a78      	cmp	r2, #120	; 0x78
 8002e58:	d807      	bhi.n	8002e6a <_printf_i+0x2a>
 8002e5a:	2a62      	cmp	r2, #98	; 0x62
 8002e5c:	d809      	bhi.n	8002e72 <_printf_i+0x32>
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d100      	bne.n	8002e64 <_printf_i+0x24>
 8002e62:	e0c1      	b.n	8002fe8 <_printf_i+0x1a8>
 8002e64:	2a58      	cmp	r2, #88	; 0x58
 8002e66:	d100      	bne.n	8002e6a <_printf_i+0x2a>
 8002e68:	e08c      	b.n	8002f84 <_printf_i+0x144>
 8002e6a:	0026      	movs	r6, r4
 8002e6c:	3642      	adds	r6, #66	; 0x42
 8002e6e:	7032      	strb	r2, [r6, #0]
 8002e70:	e022      	b.n	8002eb8 <_printf_i+0x78>
 8002e72:	0010      	movs	r0, r2
 8002e74:	3863      	subs	r0, #99	; 0x63
 8002e76:	2815      	cmp	r0, #21
 8002e78:	d8f7      	bhi.n	8002e6a <_printf_i+0x2a>
 8002e7a:	f7fd f94d 	bl	8000118 <__gnu_thumb1_case_shi>
 8002e7e:	0016      	.short	0x0016
 8002e80:	fff6001f 	.word	0xfff6001f
 8002e84:	fff6fff6 	.word	0xfff6fff6
 8002e88:	001ffff6 	.word	0x001ffff6
 8002e8c:	fff6fff6 	.word	0xfff6fff6
 8002e90:	fff6fff6 	.word	0xfff6fff6
 8002e94:	003600a8 	.word	0x003600a8
 8002e98:	fff6009a 	.word	0xfff6009a
 8002e9c:	00b9fff6 	.word	0x00b9fff6
 8002ea0:	0036fff6 	.word	0x0036fff6
 8002ea4:	fff6fff6 	.word	0xfff6fff6
 8002ea8:	009e      	.short	0x009e
 8002eaa:	0026      	movs	r6, r4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	3642      	adds	r6, #66	; 0x42
 8002eb0:	1d11      	adds	r1, r2, #4
 8002eb2:	6019      	str	r1, [r3, #0]
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	7033      	strb	r3, [r6, #0]
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0a7      	b.n	800300c <_printf_i+0x1cc>
 8002ebc:	6808      	ldr	r0, [r1, #0]
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	1d0a      	adds	r2, r1, #4
 8002ec2:	0605      	lsls	r5, r0, #24
 8002ec4:	d50b      	bpl.n	8002ede <_printf_i+0x9e>
 8002ec6:	680d      	ldr	r5, [r1, #0]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	2d00      	cmp	r5, #0
 8002ecc:	da03      	bge.n	8002ed6 <_printf_i+0x96>
 8002ece:	232d      	movs	r3, #45	; 0x2d
 8002ed0:	9a04      	ldr	r2, [sp, #16]
 8002ed2:	426d      	negs	r5, r5
 8002ed4:	7013      	strb	r3, [r2, #0]
 8002ed6:	4b61      	ldr	r3, [pc, #388]	; (800305c <_printf_i+0x21c>)
 8002ed8:	270a      	movs	r7, #10
 8002eda:	9303      	str	r3, [sp, #12]
 8002edc:	e01b      	b.n	8002f16 <_printf_i+0xd6>
 8002ede:	680d      	ldr	r5, [r1, #0]
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	0641      	lsls	r1, r0, #25
 8002ee4:	d5f1      	bpl.n	8002eca <_printf_i+0x8a>
 8002ee6:	b22d      	sxth	r5, r5
 8002ee8:	e7ef      	b.n	8002eca <_printf_i+0x8a>
 8002eea:	680d      	ldr	r5, [r1, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	1d08      	adds	r0, r1, #4
 8002ef0:	6018      	str	r0, [r3, #0]
 8002ef2:	062e      	lsls	r6, r5, #24
 8002ef4:	d501      	bpl.n	8002efa <_printf_i+0xba>
 8002ef6:	680d      	ldr	r5, [r1, #0]
 8002ef8:	e003      	b.n	8002f02 <_printf_i+0xc2>
 8002efa:	066d      	lsls	r5, r5, #25
 8002efc:	d5fb      	bpl.n	8002ef6 <_printf_i+0xb6>
 8002efe:	680d      	ldr	r5, [r1, #0]
 8002f00:	b2ad      	uxth	r5, r5
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <_printf_i+0x21c>)
 8002f04:	2708      	movs	r7, #8
 8002f06:	9303      	str	r3, [sp, #12]
 8002f08:	2a6f      	cmp	r2, #111	; 0x6f
 8002f0a:	d000      	beq.n	8002f0e <_printf_i+0xce>
 8002f0c:	3702      	adds	r7, #2
 8002f0e:	0023      	movs	r3, r4
 8002f10:	2200      	movs	r2, #0
 8002f12:	3343      	adds	r3, #67	; 0x43
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	6863      	ldr	r3, [r4, #4]
 8002f18:	60a3      	str	r3, [r4, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db03      	blt.n	8002f26 <_printf_i+0xe6>
 8002f1e:	2204      	movs	r2, #4
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	4391      	bics	r1, r2
 8002f24:	6021      	str	r1, [r4, #0]
 8002f26:	2d00      	cmp	r5, #0
 8002f28:	d102      	bne.n	8002f30 <_printf_i+0xf0>
 8002f2a:	9e04      	ldr	r6, [sp, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <_printf_i+0x10a>
 8002f30:	9e04      	ldr	r6, [sp, #16]
 8002f32:	0028      	movs	r0, r5
 8002f34:	0039      	movs	r1, r7
 8002f36:	f7fd f97f 	bl	8000238 <__aeabi_uidivmod>
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	3e01      	subs	r6, #1
 8002f3e:	5c5b      	ldrb	r3, [r3, r1]
 8002f40:	7033      	strb	r3, [r6, #0]
 8002f42:	002b      	movs	r3, r5
 8002f44:	0005      	movs	r5, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	d9f3      	bls.n	8002f32 <_printf_i+0xf2>
 8002f4a:	2f08      	cmp	r7, #8
 8002f4c:	d109      	bne.n	8002f62 <_printf_i+0x122>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	07db      	lsls	r3, r3, #31
 8002f52:	d506      	bpl.n	8002f62 <_printf_i+0x122>
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	6922      	ldr	r2, [r4, #16]
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	dc02      	bgt.n	8002f62 <_printf_i+0x122>
 8002f5c:	2330      	movs	r3, #48	; 0x30
 8002f5e:	3e01      	subs	r6, #1
 8002f60:	7033      	strb	r3, [r6, #0]
 8002f62:	9b04      	ldr	r3, [sp, #16]
 8002f64:	1b9b      	subs	r3, r3, r6
 8002f66:	6123      	str	r3, [r4, #16]
 8002f68:	9b07      	ldr	r3, [sp, #28]
 8002f6a:	0021      	movs	r1, r4
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	9805      	ldr	r0, [sp, #20]
 8002f70:	9b06      	ldr	r3, [sp, #24]
 8002f72:	aa09      	add	r2, sp, #36	; 0x24
 8002f74:	f7ff fef4 	bl	8002d60 <_printf_common>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d14c      	bne.n	8003016 <_printf_i+0x1d6>
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	4240      	negs	r0, r0
 8002f80:	b00b      	add	sp, #44	; 0x2c
 8002f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f84:	3145      	adds	r1, #69	; 0x45
 8002f86:	700a      	strb	r2, [r1, #0]
 8002f88:	4a34      	ldr	r2, [pc, #208]	; (800305c <_printf_i+0x21c>)
 8002f8a:	9203      	str	r2, [sp, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	6821      	ldr	r1, [r4, #0]
 8002f90:	ca20      	ldmia	r2!, {r5}
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	0608      	lsls	r0, r1, #24
 8002f96:	d516      	bpl.n	8002fc6 <_printf_i+0x186>
 8002f98:	07cb      	lsls	r3, r1, #31
 8002f9a:	d502      	bpl.n	8002fa2 <_printf_i+0x162>
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	4319      	orrs	r1, r3
 8002fa0:	6021      	str	r1, [r4, #0]
 8002fa2:	2710      	movs	r7, #16
 8002fa4:	2d00      	cmp	r5, #0
 8002fa6:	d1b2      	bne.n	8002f0e <_printf_i+0xce>
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	439a      	bics	r2, r3
 8002fae:	6022      	str	r2, [r4, #0]
 8002fb0:	e7ad      	b.n	8002f0e <_printf_i+0xce>
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	6809      	ldr	r1, [r1, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	6022      	str	r2, [r4, #0]
 8002fba:	0022      	movs	r2, r4
 8002fbc:	2178      	movs	r1, #120	; 0x78
 8002fbe:	3245      	adds	r2, #69	; 0x45
 8002fc0:	7011      	strb	r1, [r2, #0]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <_printf_i+0x220>)
 8002fc4:	e7e1      	b.n	8002f8a <_printf_i+0x14a>
 8002fc6:	0648      	lsls	r0, r1, #25
 8002fc8:	d5e6      	bpl.n	8002f98 <_printf_i+0x158>
 8002fca:	b2ad      	uxth	r5, r5
 8002fcc:	e7e4      	b.n	8002f98 <_printf_i+0x158>
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	680d      	ldr	r5, [r1, #0]
 8002fd2:	1d10      	adds	r0, r2, #4
 8002fd4:	6949      	ldr	r1, [r1, #20]
 8002fd6:	6018      	str	r0, [r3, #0]
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	062e      	lsls	r6, r5, #24
 8002fdc:	d501      	bpl.n	8002fe2 <_printf_i+0x1a2>
 8002fde:	6019      	str	r1, [r3, #0]
 8002fe0:	e002      	b.n	8002fe8 <_printf_i+0x1a8>
 8002fe2:	066d      	lsls	r5, r5, #25
 8002fe4:	d5fb      	bpl.n	8002fde <_printf_i+0x19e>
 8002fe6:	8019      	strh	r1, [r3, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9e04      	ldr	r6, [sp, #16]
 8002fec:	6123      	str	r3, [r4, #16]
 8002fee:	e7bb      	b.n	8002f68 <_printf_i+0x128>
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	1d11      	adds	r1, r2, #4
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	6816      	ldr	r6, [r2, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	0030      	movs	r0, r6
 8002ffc:	6862      	ldr	r2, [r4, #4]
 8002ffe:	f000 f831 	bl	8003064 <memchr>
 8003002:	2800      	cmp	r0, #0
 8003004:	d001      	beq.n	800300a <_printf_i+0x1ca>
 8003006:	1b80      	subs	r0, r0, r6
 8003008:	6060      	str	r0, [r4, #4]
 800300a:	6863      	ldr	r3, [r4, #4]
 800300c:	6123      	str	r3, [r4, #16]
 800300e:	2300      	movs	r3, #0
 8003010:	9a04      	ldr	r2, [sp, #16]
 8003012:	7013      	strb	r3, [r2, #0]
 8003014:	e7a8      	b.n	8002f68 <_printf_i+0x128>
 8003016:	6923      	ldr	r3, [r4, #16]
 8003018:	0032      	movs	r2, r6
 800301a:	9906      	ldr	r1, [sp, #24]
 800301c:	9805      	ldr	r0, [sp, #20]
 800301e:	9d07      	ldr	r5, [sp, #28]
 8003020:	47a8      	blx	r5
 8003022:	1c43      	adds	r3, r0, #1
 8003024:	d0aa      	beq.n	8002f7c <_printf_i+0x13c>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	079b      	lsls	r3, r3, #30
 800302a:	d415      	bmi.n	8003058 <_printf_i+0x218>
 800302c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800302e:	68e0      	ldr	r0, [r4, #12]
 8003030:	4298      	cmp	r0, r3
 8003032:	daa5      	bge.n	8002f80 <_printf_i+0x140>
 8003034:	0018      	movs	r0, r3
 8003036:	e7a3      	b.n	8002f80 <_printf_i+0x140>
 8003038:	0022      	movs	r2, r4
 800303a:	2301      	movs	r3, #1
 800303c:	9906      	ldr	r1, [sp, #24]
 800303e:	9805      	ldr	r0, [sp, #20]
 8003040:	9e07      	ldr	r6, [sp, #28]
 8003042:	3219      	adds	r2, #25
 8003044:	47b0      	blx	r6
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d098      	beq.n	8002f7c <_printf_i+0x13c>
 800304a:	3501      	adds	r5, #1
 800304c:	68e3      	ldr	r3, [r4, #12]
 800304e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	42ab      	cmp	r3, r5
 8003054:	dcf0      	bgt.n	8003038 <_printf_i+0x1f8>
 8003056:	e7e9      	b.n	800302c <_printf_i+0x1ec>
 8003058:	2500      	movs	r5, #0
 800305a:	e7f7      	b.n	800304c <_printf_i+0x20c>
 800305c:	0800339d 	.word	0x0800339d
 8003060:	080033ae 	.word	0x080033ae

08003064 <memchr>:
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	1882      	adds	r2, r0, r2
 8003068:	4290      	cmp	r0, r2
 800306a:	d101      	bne.n	8003070 <memchr+0xc>
 800306c:	2000      	movs	r0, #0
 800306e:	4770      	bx	lr
 8003070:	7803      	ldrb	r3, [r0, #0]
 8003072:	428b      	cmp	r3, r1
 8003074:	d0fb      	beq.n	800306e <memchr+0xa>
 8003076:	3001      	adds	r0, #1
 8003078:	e7f6      	b.n	8003068 <memchr+0x4>

0800307a <memcpy>:
 800307a:	2300      	movs	r3, #0
 800307c:	b510      	push	{r4, lr}
 800307e:	429a      	cmp	r2, r3
 8003080:	d100      	bne.n	8003084 <memcpy+0xa>
 8003082:	bd10      	pop	{r4, pc}
 8003084:	5ccc      	ldrb	r4, [r1, r3]
 8003086:	54c4      	strb	r4, [r0, r3]
 8003088:	3301      	adds	r3, #1
 800308a:	e7f8      	b.n	800307e <memcpy+0x4>

0800308c <memmove>:
 800308c:	b510      	push	{r4, lr}
 800308e:	4288      	cmp	r0, r1
 8003090:	d902      	bls.n	8003098 <memmove+0xc>
 8003092:	188b      	adds	r3, r1, r2
 8003094:	4298      	cmp	r0, r3
 8003096:	d303      	bcc.n	80030a0 <memmove+0x14>
 8003098:	2300      	movs	r3, #0
 800309a:	e007      	b.n	80030ac <memmove+0x20>
 800309c:	5c8b      	ldrb	r3, [r1, r2]
 800309e:	5483      	strb	r3, [r0, r2]
 80030a0:	3a01      	subs	r2, #1
 80030a2:	d2fb      	bcs.n	800309c <memmove+0x10>
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	5ccc      	ldrb	r4, [r1, r3]
 80030a8:	54c4      	strb	r4, [r0, r3]
 80030aa:	3301      	adds	r3, #1
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1fa      	bne.n	80030a6 <memmove+0x1a>
 80030b0:	e7f8      	b.n	80030a4 <memmove+0x18>
	...

080030b4 <_free_r>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	0005      	movs	r5, r0
 80030b8:	2900      	cmp	r1, #0
 80030ba:	d010      	beq.n	80030de <_free_r+0x2a>
 80030bc:	1f0c      	subs	r4, r1, #4
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da00      	bge.n	80030c6 <_free_r+0x12>
 80030c4:	18e4      	adds	r4, r4, r3
 80030c6:	0028      	movs	r0, r5
 80030c8:	f000 f918 	bl	80032fc <__malloc_lock>
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <_free_r+0x90>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <_free_r+0x2c>
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6014      	str	r4, [r2, #0]
 80030d8:	0028      	movs	r0, r5
 80030da:	f000 f917 	bl	800330c <__malloc_unlock>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	42a3      	cmp	r3, r4
 80030e2:	d908      	bls.n	80030f6 <_free_r+0x42>
 80030e4:	6821      	ldr	r1, [r4, #0]
 80030e6:	1860      	adds	r0, r4, r1
 80030e8:	4283      	cmp	r3, r0
 80030ea:	d1f3      	bne.n	80030d4 <_free_r+0x20>
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	1841      	adds	r1, r0, r1
 80030f2:	6021      	str	r1, [r4, #0]
 80030f4:	e7ee      	b.n	80030d4 <_free_r+0x20>
 80030f6:	001a      	movs	r2, r3
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <_free_r+0x4e>
 80030fe:	42a3      	cmp	r3, r4
 8003100:	d9f9      	bls.n	80030f6 <_free_r+0x42>
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	1850      	adds	r0, r2, r1
 8003106:	42a0      	cmp	r0, r4
 8003108:	d10b      	bne.n	8003122 <_free_r+0x6e>
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	1809      	adds	r1, r1, r0
 800310e:	1850      	adds	r0, r2, r1
 8003110:	6011      	str	r1, [r2, #0]
 8003112:	4283      	cmp	r3, r0
 8003114:	d1e0      	bne.n	80030d8 <_free_r+0x24>
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	1841      	adds	r1, r0, r1
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	6053      	str	r3, [r2, #4]
 8003120:	e7da      	b.n	80030d8 <_free_r+0x24>
 8003122:	42a0      	cmp	r0, r4
 8003124:	d902      	bls.n	800312c <_free_r+0x78>
 8003126:	230c      	movs	r3, #12
 8003128:	602b      	str	r3, [r5, #0]
 800312a:	e7d5      	b.n	80030d8 <_free_r+0x24>
 800312c:	6821      	ldr	r1, [r4, #0]
 800312e:	1860      	adds	r0, r4, r1
 8003130:	4283      	cmp	r3, r0
 8003132:	d103      	bne.n	800313c <_free_r+0x88>
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	1841      	adds	r1, r0, r1
 800313a:	6021      	str	r1, [r4, #0]
 800313c:	6063      	str	r3, [r4, #4]
 800313e:	6054      	str	r4, [r2, #4]
 8003140:	e7ca      	b.n	80030d8 <_free_r+0x24>
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	2000018c 	.word	0x2000018c

08003148 <sbrk_aligned>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	4e0f      	ldr	r6, [pc, #60]	; (8003188 <sbrk_aligned+0x40>)
 800314c:	000d      	movs	r5, r1
 800314e:	6831      	ldr	r1, [r6, #0]
 8003150:	0004      	movs	r4, r0
 8003152:	2900      	cmp	r1, #0
 8003154:	d102      	bne.n	800315c <sbrk_aligned+0x14>
 8003156:	f000 f8bf 	bl	80032d8 <_sbrk_r>
 800315a:	6030      	str	r0, [r6, #0]
 800315c:	0029      	movs	r1, r5
 800315e:	0020      	movs	r0, r4
 8003160:	f000 f8ba 	bl	80032d8 <_sbrk_r>
 8003164:	1c43      	adds	r3, r0, #1
 8003166:	d00a      	beq.n	800317e <sbrk_aligned+0x36>
 8003168:	2303      	movs	r3, #3
 800316a:	1cc5      	adds	r5, r0, #3
 800316c:	439d      	bics	r5, r3
 800316e:	42a8      	cmp	r0, r5
 8003170:	d007      	beq.n	8003182 <sbrk_aligned+0x3a>
 8003172:	1a29      	subs	r1, r5, r0
 8003174:	0020      	movs	r0, r4
 8003176:	f000 f8af 	bl	80032d8 <_sbrk_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	d101      	bne.n	8003182 <sbrk_aligned+0x3a>
 800317e:	2501      	movs	r5, #1
 8003180:	426d      	negs	r5, r5
 8003182:	0028      	movs	r0, r5
 8003184:	bd70      	pop	{r4, r5, r6, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	20000190 	.word	0x20000190

0800318c <_malloc_r>:
 800318c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800318e:	2203      	movs	r2, #3
 8003190:	1ccb      	adds	r3, r1, #3
 8003192:	4393      	bics	r3, r2
 8003194:	3308      	adds	r3, #8
 8003196:	0006      	movs	r6, r0
 8003198:	001f      	movs	r7, r3
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d232      	bcs.n	8003204 <_malloc_r+0x78>
 800319e:	270c      	movs	r7, #12
 80031a0:	42b9      	cmp	r1, r7
 80031a2:	d831      	bhi.n	8003208 <_malloc_r+0x7c>
 80031a4:	0030      	movs	r0, r6
 80031a6:	f000 f8a9 	bl	80032fc <__malloc_lock>
 80031aa:	4d32      	ldr	r5, [pc, #200]	; (8003274 <_malloc_r+0xe8>)
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	001c      	movs	r4, r3
 80031b0:	2c00      	cmp	r4, #0
 80031b2:	d12e      	bne.n	8003212 <_malloc_r+0x86>
 80031b4:	0039      	movs	r1, r7
 80031b6:	0030      	movs	r0, r6
 80031b8:	f7ff ffc6 	bl	8003148 <sbrk_aligned>
 80031bc:	0004      	movs	r4, r0
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	d11e      	bne.n	8003200 <_malloc_r+0x74>
 80031c2:	682c      	ldr	r4, [r5, #0]
 80031c4:	0025      	movs	r5, r4
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	d14a      	bne.n	8003260 <_malloc_r+0xd4>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	0029      	movs	r1, r5
 80031ce:	18e3      	adds	r3, r4, r3
 80031d0:	0030      	movs	r0, r6
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	f000 f880 	bl	80032d8 <_sbrk_r>
 80031d8:	9b01      	ldr	r3, [sp, #4]
 80031da:	4283      	cmp	r3, r0
 80031dc:	d143      	bne.n	8003266 <_malloc_r+0xda>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	3703      	adds	r7, #3
 80031e2:	1aff      	subs	r7, r7, r3
 80031e4:	2303      	movs	r3, #3
 80031e6:	439f      	bics	r7, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	2f0c      	cmp	r7, #12
 80031ec:	d200      	bcs.n	80031f0 <_malloc_r+0x64>
 80031ee:	270c      	movs	r7, #12
 80031f0:	0039      	movs	r1, r7
 80031f2:	0030      	movs	r0, r6
 80031f4:	f7ff ffa8 	bl	8003148 <sbrk_aligned>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d034      	beq.n	8003266 <_malloc_r+0xda>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	19df      	adds	r7, r3, r7
 8003200:	6027      	str	r7, [r4, #0]
 8003202:	e013      	b.n	800322c <_malloc_r+0xa0>
 8003204:	2b00      	cmp	r3, #0
 8003206:	dacb      	bge.n	80031a0 <_malloc_r+0x14>
 8003208:	230c      	movs	r3, #12
 800320a:	2500      	movs	r5, #0
 800320c:	6033      	str	r3, [r6, #0]
 800320e:	0028      	movs	r0, r5
 8003210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	1bd1      	subs	r1, r2, r7
 8003216:	d420      	bmi.n	800325a <_malloc_r+0xce>
 8003218:	290b      	cmp	r1, #11
 800321a:	d917      	bls.n	800324c <_malloc_r+0xc0>
 800321c:	19e2      	adds	r2, r4, r7
 800321e:	6027      	str	r7, [r4, #0]
 8003220:	42a3      	cmp	r3, r4
 8003222:	d111      	bne.n	8003248 <_malloc_r+0xbc>
 8003224:	602a      	str	r2, [r5, #0]
 8003226:	6863      	ldr	r3, [r4, #4]
 8003228:	6011      	str	r1, [r2, #0]
 800322a:	6053      	str	r3, [r2, #4]
 800322c:	0030      	movs	r0, r6
 800322e:	0025      	movs	r5, r4
 8003230:	f000 f86c 	bl	800330c <__malloc_unlock>
 8003234:	2207      	movs	r2, #7
 8003236:	350b      	adds	r5, #11
 8003238:	1d23      	adds	r3, r4, #4
 800323a:	4395      	bics	r5, r2
 800323c:	1aea      	subs	r2, r5, r3
 800323e:	429d      	cmp	r5, r3
 8003240:	d0e5      	beq.n	800320e <_malloc_r+0x82>
 8003242:	1b5b      	subs	r3, r3, r5
 8003244:	50a3      	str	r3, [r4, r2]
 8003246:	e7e2      	b.n	800320e <_malloc_r+0x82>
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	e7ec      	b.n	8003226 <_malloc_r+0x9a>
 800324c:	6862      	ldr	r2, [r4, #4]
 800324e:	42a3      	cmp	r3, r4
 8003250:	d101      	bne.n	8003256 <_malloc_r+0xca>
 8003252:	602a      	str	r2, [r5, #0]
 8003254:	e7ea      	b.n	800322c <_malloc_r+0xa0>
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e7e8      	b.n	800322c <_malloc_r+0xa0>
 800325a:	0023      	movs	r3, r4
 800325c:	6864      	ldr	r4, [r4, #4]
 800325e:	e7a7      	b.n	80031b0 <_malloc_r+0x24>
 8003260:	002c      	movs	r4, r5
 8003262:	686d      	ldr	r5, [r5, #4]
 8003264:	e7af      	b.n	80031c6 <_malloc_r+0x3a>
 8003266:	230c      	movs	r3, #12
 8003268:	0030      	movs	r0, r6
 800326a:	6033      	str	r3, [r6, #0]
 800326c:	f000 f84e 	bl	800330c <__malloc_unlock>
 8003270:	e7cd      	b.n	800320e <_malloc_r+0x82>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	2000018c 	.word	0x2000018c

08003278 <_realloc_r>:
 8003278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800327a:	0007      	movs	r7, r0
 800327c:	000e      	movs	r6, r1
 800327e:	0014      	movs	r4, r2
 8003280:	2900      	cmp	r1, #0
 8003282:	d105      	bne.n	8003290 <_realloc_r+0x18>
 8003284:	0011      	movs	r1, r2
 8003286:	f7ff ff81 	bl	800318c <_malloc_r>
 800328a:	0005      	movs	r5, r0
 800328c:	0028      	movs	r0, r5
 800328e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003290:	2a00      	cmp	r2, #0
 8003292:	d103      	bne.n	800329c <_realloc_r+0x24>
 8003294:	f7ff ff0e 	bl	80030b4 <_free_r>
 8003298:	0025      	movs	r5, r4
 800329a:	e7f7      	b.n	800328c <_realloc_r+0x14>
 800329c:	f000 f83e 	bl	800331c <_malloc_usable_size_r>
 80032a0:	9001      	str	r0, [sp, #4]
 80032a2:	4284      	cmp	r4, r0
 80032a4:	d803      	bhi.n	80032ae <_realloc_r+0x36>
 80032a6:	0035      	movs	r5, r6
 80032a8:	0843      	lsrs	r3, r0, #1
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	d3ee      	bcc.n	800328c <_realloc_r+0x14>
 80032ae:	0021      	movs	r1, r4
 80032b0:	0038      	movs	r0, r7
 80032b2:	f7ff ff6b 	bl	800318c <_malloc_r>
 80032b6:	1e05      	subs	r5, r0, #0
 80032b8:	d0e8      	beq.n	800328c <_realloc_r+0x14>
 80032ba:	9b01      	ldr	r3, [sp, #4]
 80032bc:	0022      	movs	r2, r4
 80032be:	429c      	cmp	r4, r3
 80032c0:	d900      	bls.n	80032c4 <_realloc_r+0x4c>
 80032c2:	001a      	movs	r2, r3
 80032c4:	0031      	movs	r1, r6
 80032c6:	0028      	movs	r0, r5
 80032c8:	f7ff fed7 	bl	800307a <memcpy>
 80032cc:	0031      	movs	r1, r6
 80032ce:	0038      	movs	r0, r7
 80032d0:	f7ff fef0 	bl	80030b4 <_free_r>
 80032d4:	e7da      	b.n	800328c <_realloc_r+0x14>
	...

080032d8 <_sbrk_r>:
 80032d8:	2300      	movs	r3, #0
 80032da:	b570      	push	{r4, r5, r6, lr}
 80032dc:	4d06      	ldr	r5, [pc, #24]	; (80032f8 <_sbrk_r+0x20>)
 80032de:	0004      	movs	r4, r0
 80032e0:	0008      	movs	r0, r1
 80032e2:	602b      	str	r3, [r5, #0]
 80032e4:	f7fd fd02 	bl	8000cec <_sbrk>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d103      	bne.n	80032f4 <_sbrk_r+0x1c>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d000      	beq.n	80032f4 <_sbrk_r+0x1c>
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	20000194 	.word	0x20000194

080032fc <__malloc_lock>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4802      	ldr	r0, [pc, #8]	; (8003308 <__malloc_lock+0xc>)
 8003300:	f000 f814 	bl	800332c <__retarget_lock_acquire_recursive>
 8003304:	bd10      	pop	{r4, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	20000198 	.word	0x20000198

0800330c <__malloc_unlock>:
 800330c:	b510      	push	{r4, lr}
 800330e:	4802      	ldr	r0, [pc, #8]	; (8003318 <__malloc_unlock+0xc>)
 8003310:	f000 f80d 	bl	800332e <__retarget_lock_release_recursive>
 8003314:	bd10      	pop	{r4, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000198 	.word	0x20000198

0800331c <_malloc_usable_size_r>:
 800331c:	1f0b      	subs	r3, r1, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1f18      	subs	r0, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	da01      	bge.n	800332a <_malloc_usable_size_r+0xe>
 8003326:	580b      	ldr	r3, [r1, r0]
 8003328:	18c0      	adds	r0, r0, r3
 800332a:	4770      	bx	lr

0800332c <__retarget_lock_acquire_recursive>:
 800332c:	4770      	bx	lr

0800332e <__retarget_lock_release_recursive>:
 800332e:	4770      	bx	lr

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
