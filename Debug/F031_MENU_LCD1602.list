
F031_MENU_LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002698  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002788  08002788  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002788  08002788  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002788  08002788  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000038  080027c8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080027c8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf16  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e96  00000000  00000000  0002bf76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010645  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef3f  00000000  00000000  0003fccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062dba  00000000  00000000  0004ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b19c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000b1a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002740 	.word	0x08002740

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08002740 	.word	0x08002740

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <BUTTON_LowLevelManager>:

/* Functions -----------------------------------------------------------------*/

/******************************************************************************/
void BUTTON_LowLevelManager()
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
  uint8_t currentStates[BUTTONS_NUM];
  
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	e07a      	b.n	8000324 <BUTTON_LowLevelManager+0x104>
  {
    currentStates[i] = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	4b41      	ldr	r3, [pc, #260]	; (8000338 <BUTTON_LowLevelManager+0x118>)
 8000234:	00d2      	lsls	r2, r2, #3
 8000236:	58d0      	ldr	r0, [r2, r3]
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4a3e      	ldr	r2, [pc, #248]	; (8000338 <BUTTON_LowLevelManager+0x118>)
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	18d3      	adds	r3, r2, r3
 8000242:	3304      	adds	r3, #4
 8000244:	881a      	ldrh	r2, [r3, #0]
 8000246:	1dfb      	adds	r3, r7, #7
 8000248:	781c      	ldrb	r4, [r3, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	f000 fefa 	bl	8001044 <HAL_GPIO_ReadPin>
 8000250:	0003      	movs	r3, r0
 8000252:	001a      	movs	r2, r3
 8000254:	003b      	movs	r3, r7
 8000256:	551a      	strb	r2, [r3, r4]
    
    switch (buttonState[i])
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4a37      	ldr	r2, [pc, #220]	; (800033c <BUTTON_LowLevelManager+0x11c>)
 800025e:	5cd3      	ldrb	r3, [r2, r3]
 8000260:	2b03      	cmp	r3, #3
 8000262:	d03f      	beq.n	80002e4 <BUTTON_LowLevelManager+0xc4>
 8000264:	dc50      	bgt.n	8000308 <BUTTON_LowLevelManager+0xe8>
 8000266:	2b02      	cmp	r3, #2
 8000268:	d023      	beq.n	80002b2 <BUTTON_LowLevelManager+0x92>
 800026a:	dc4d      	bgt.n	8000308 <BUTTON_LowLevelManager+0xe8>
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <BUTTON_LowLevelManager+0x56>
 8000270:	2b01      	cmp	r3, #1
 8000272:	d00c      	beq.n	800028e <BUTTON_LowLevelManager+0x6e>
          debounceCounter[i] = 0;
        } 
        break;
        
      default:
        break;
 8000274:	e048      	b.n	8000308 <BUTTON_LowLevelManager+0xe8>
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	003a      	movs	r2, r7
 800027c:	5cd3      	ldrb	r3, [r2, r3]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d144      	bne.n	800030c <BUTTON_LowLevelManager+0xec>
          buttonState[i] = BUTTON_NOT_PRESSED;
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4a2d      	ldr	r2, [pc, #180]	; (800033c <BUTTON_LowLevelManager+0x11c>)
 8000288:	2101      	movs	r1, #1
 800028a:	54d1      	strb	r1, [r2, r3]
        break;
 800028c:	e03e      	b.n	800030c <BUTTON_LowLevelManager+0xec>
        if (currentStates[i] == GPIO_BUTTON_PRESSED)
 800028e:	1dfb      	adds	r3, r7, #7
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	003a      	movs	r2, r7
 8000294:	5cd3      	ldrb	r3, [r2, r3]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d13a      	bne.n	8000310 <BUTTON_LowLevelManager+0xf0>
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4a27      	ldr	r2, [pc, #156]	; (800033c <BUTTON_LowLevelManager+0x11c>)
 80002a0:	2102      	movs	r1, #2
 80002a2:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	781a      	ldrb	r2, [r3, #0]
 80002a8:	4b25      	ldr	r3, [pc, #148]	; (8000340 <BUTTON_LowLevelManager+0x120>)
 80002aa:	0052      	lsls	r2, r2, #1
 80002ac:	2100      	movs	r1, #0
 80002ae:	52d1      	strh	r1, [r2, r3]
        break;
 80002b0:	e02e      	b.n	8000310 <BUTTON_LowLevelManager+0xf0>
        if (debounceCounter[i] == DEBOUNCE_TIME_MS)
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	4b22      	ldr	r3, [pc, #136]	; (8000340 <BUTTON_LowLevelManager+0x120>)
 80002b8:	0052      	lsls	r2, r2, #1
 80002ba:	5ad3      	ldrh	r3, [r2, r3]
 80002bc:	2b64      	cmp	r3, #100	; 0x64
 80002be:	d129      	bne.n	8000314 <BUTTON_LowLevelManager+0xf4>
          if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	003a      	movs	r2, r7
 80002c6:	5cd3      	ldrb	r3, [r2, r3]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d105      	bne.n	80002d8 <BUTTON_LowLevelManager+0xb8>
            buttonState[i] = BUTTON_PRESSED;
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4a1a      	ldr	r2, [pc, #104]	; (800033c <BUTTON_LowLevelManager+0x11c>)
 80002d2:	2103      	movs	r1, #3
 80002d4:	54d1      	strb	r1, [r2, r3]
        break;
 80002d6:	e01d      	b.n	8000314 <BUTTON_LowLevelManager+0xf4>
            buttonState[i] = BUTTON_NOT_PRESSED;
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4a17      	ldr	r2, [pc, #92]	; (800033c <BUTTON_LowLevelManager+0x11c>)
 80002de:	2101      	movs	r1, #1
 80002e0:	54d1      	strb	r1, [r2, r3]
        break;
 80002e2:	e017      	b.n	8000314 <BUTTON_LowLevelManager+0xf4>
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	003a      	movs	r2, r7
 80002ea:	5cd3      	ldrb	r3, [r2, r3]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d113      	bne.n	8000318 <BUTTON_LowLevelManager+0xf8>
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4a11      	ldr	r2, [pc, #68]	; (800033c <BUTTON_LowLevelManager+0x11c>)
 80002f6:	2102      	movs	r1, #2
 80002f8:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <BUTTON_LowLevelManager+0x120>)
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	2100      	movs	r1, #0
 8000304:	52d1      	strh	r1, [r2, r3]
        break;
 8000306:	e007      	b.n	8000318 <BUTTON_LowLevelManager+0xf8>
        break;
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	e006      	b.n	800031a <BUTTON_LowLevelManager+0xfa>
        break;
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	e004      	b.n	800031a <BUTTON_LowLevelManager+0xfa>
        break;
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	e002      	b.n	800031a <BUTTON_LowLevelManager+0xfa>
        break;
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	e000      	b.n	800031a <BUTTON_LowLevelManager+0xfa>
        break;
 8000318:	46c0      	nop			; (mov r8, r8)
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781a      	ldrb	r2, [r3, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	3201      	adds	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d800      	bhi.n	800032e <BUTTON_LowLevelManager+0x10e>
 800032c:	e77f      	b.n	800022e <BUTTON_LowLevelManager+0xe>
    }
  }
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b003      	add	sp, #12
 8000336:	bd90      	pop	{r4, r7, pc}
 8000338:	20000000 	.word	0x20000000
 800033c:	2000007c 	.word	0x2000007c
 8000340:	20000054 	.word	0x20000054

08000344 <BUTTON_HighLevelManager>:



/******************************************************************************/
void BUTTON_HighLevelManager()
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	e049      	b.n	80003e6 <BUTTON_HighLevelManager+0xa2>
  {
    if (buttonActions[i] == BUTTON_NONE)
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <BUTTON_HighLevelManager+0xb4>)
 8000358:	5cd3      	ldrb	r3, [r2, r3]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d13e      	bne.n	80003dc <BUTTON_HighLevelManager+0x98>
    {
      if (waitButtonRelease[i] == 0)
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4a26      	ldr	r2, [pc, #152]	; (80003fc <BUTTON_HighLevelManager+0xb8>)
 8000364:	5cd3      	ldrb	r3, [r2, r3]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10b      	bne.n	8000382 <BUTTON_HighLevelManager+0x3e>
      {
        if (buttonState[i] == BUTTON_PRESSED)
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4a24      	ldr	r2, [pc, #144]	; (8000400 <BUTTON_HighLevelManager+0xbc>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	2b03      	cmp	r3, #3
 8000374:	d132      	bne.n	80003dc <BUTTON_HighLevelManager+0x98>
        {
          waitButtonRelease[i] = 1;
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4a20      	ldr	r2, [pc, #128]	; (80003fc <BUTTON_HighLevelManager+0xb8>)
 800037c:	2101      	movs	r1, #1
 800037e:	54d1      	strb	r1, [r2, r3]
 8000380:	e02c      	b.n	80003dc <BUTTON_HighLevelManager+0x98>
        }
      }
      else
      {
        if (buttonState[i] == BUTTON_NOT_PRESSED)
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <BUTTON_HighLevelManager+0xbc>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d126      	bne.n	80003dc <BUTTON_HighLevelManager+0x98>
        {
          waitButtonRelease[i] = 0;
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <BUTTON_HighLevelManager+0xb8>)
 8000394:	2100      	movs	r1, #0
 8000396:	54d1      	strb	r1, [r2, r3]

          if (buttonPressCounter[i] >= BUTTONS_VERY_LONG_PRESS_MS)
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781a      	ldrb	r2, [r3, #0]
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <BUTTON_HighLevelManager+0xc0>)
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	5ad3      	ldrh	r3, [r2, r3]
 80003a2:	4a19      	ldr	r2, [pc, #100]	; (8000408 <BUTTON_HighLevelManager+0xc4>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d905      	bls.n	80003b4 <BUTTON_HighLevelManager+0x70>
          {
            buttonActions[i] = BUTTON_VERY_LONG_PRESS;
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <BUTTON_HighLevelManager+0xb4>)
 80003ae:	2103      	movs	r1, #3
 80003b0:	54d1      	strb	r1, [r2, r3]
 80003b2:	e013      	b.n	80003dc <BUTTON_HighLevelManager+0x98>
          }
          else
          {
            if (buttonPressCounter[i] >= BUTTONS_LONG_PRESS_MS)
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	781a      	ldrb	r2, [r3, #0]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <BUTTON_HighLevelManager+0xc0>)
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	5ad2      	ldrh	r2, [r2, r3]
 80003be:	23fa      	movs	r3, #250	; 0xfa
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d305      	bcc.n	80003d2 <BUTTON_HighLevelManager+0x8e>
            {
              buttonActions[i] = BUTTON_LONG_PRESS;
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <BUTTON_HighLevelManager+0xb4>)
 80003cc:	2102      	movs	r1, #2
 80003ce:	54d1      	strb	r1, [r2, r3]
 80003d0:	e004      	b.n	80003dc <BUTTON_HighLevelManager+0x98>
            }
            else
            {
              buttonActions[i] = BUTTON_SHORT_PRESS;
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <BUTTON_HighLevelManager+0xb4>)
 80003d8:	2101      	movs	r1, #1
 80003da:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80003dc:	1dfb      	adds	r3, r7, #7
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	3201      	adds	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d9b1      	bls.n	8000352 <BUTTON_HighLevelManager+0xe>
          }
        }
      }
    }
  }
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b002      	add	sp, #8
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000074 	.word	0x20000074
 80003fc:	20000060 	.word	0x20000060
 8000400:	2000007c 	.word	0x2000007c
 8000404:	20000068 	.word	0x20000068
 8000408:	00000bb7 	.word	0x00000bb7

0800040c <BUTTON_Process>:



/******************************************************************************/
void BUTTON_Process()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  BUTTON_LowLevelManager();
 8000410:	f7ff ff06 	bl	8000220 <BUTTON_LowLevelManager>
  BUTTON_HighLevelManager();
 8000414:	f7ff ff96 	bl	8000344 <BUTTON_HighLevelManager>
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <BUTTON_TimerProcess>:



/******************************************************************************/
void BUTTON_TimerProcess()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000426:	1dfb      	adds	r3, r7, #7
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
 800042c:	e02c      	b.n	8000488 <BUTTON_TimerProcess+0x68>
  {
    if (debounceCounter[i] < DEBOUNCE_TIME_MS)
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <BUTTON_TimerProcess+0x7c>)
 8000434:	0052      	lsls	r2, r2, #1
 8000436:	5ad3      	ldrh	r3, [r2, r3]
 8000438:	2b63      	cmp	r3, #99	; 0x63
 800043a:	d809      	bhi.n	8000450 <BUTTON_TimerProcess+0x30>
    {
      debounceCounter[i]++;
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4a16      	ldr	r2, [pc, #88]	; (800049c <BUTTON_TimerProcess+0x7c>)
 8000442:	0059      	lsls	r1, r3, #1
 8000444:	5a8a      	ldrh	r2, [r1, r2]
 8000446:	3201      	adds	r2, #1
 8000448:	b291      	uxth	r1, r2
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <BUTTON_TimerProcess+0x7c>)
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	5299      	strh	r1, [r3, r2]
    }

    if (waitButtonRelease[i] == 1)
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <BUTTON_TimerProcess+0x80>)
 8000456:	5cd3      	ldrb	r3, [r2, r3]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d10a      	bne.n	8000472 <BUTTON_TimerProcess+0x52>
    {
      buttonPressCounter[i]++;
 800045c:	1dfb      	adds	r3, r7, #7
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <BUTTON_TimerProcess+0x84>)
 8000462:	0059      	lsls	r1, r3, #1
 8000464:	5a8a      	ldrh	r2, [r1, r2]
 8000466:	3201      	adds	r2, #1
 8000468:	b291      	uxth	r1, r2
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <BUTTON_TimerProcess+0x84>)
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	5299      	strh	r1, [r3, r2]
 8000470:	e005      	b.n	800047e <BUTTON_TimerProcess+0x5e>
    }
    else
    {
      buttonPressCounter[i] = 0;
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <BUTTON_TimerProcess+0x84>)
 8000478:	0052      	lsls	r2, r2, #1
 800047a:	2100      	movs	r1, #0
 800047c:	52d1      	strh	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	3201      	adds	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d9ce      	bls.n	800042e <BUTTON_TimerProcess+0xe>
    }
  }
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	20000054 	.word	0x20000054
 80004a0:	20000060 	.word	0x20000060
 80004a4:	20000068 	.word	0x20000068

080004a8 <BUTTON_GetAction>:



/******************************************************************************/
ButtonAction BUTTON_GetAction(uint8_t index)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	701a      	strb	r2, [r3, #0]
  return buttonActions[index];
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4a02      	ldr	r2, [pc, #8]	; (80004c4 <BUTTON_GetAction+0x1c>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	b002      	add	sp, #8
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000074 	.word	0x20000074

080004c8 <lcd1602_Send_init_Data>:
char tx_buffer_lcd[40] = {0, };
uint8_t global_buffer = 0;

/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	if (backlight) {
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <lcd1602_Send_init_Data+0x80>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d007      	beq.n	80004e8 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2208      	movs	r2, #8
 80004de:	4313      	orrs	r3, r2
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e006      	b.n	80004f6 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2208      	movs	r2, #8
 80004ee:	4393      	bics	r3, r2
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2204      	movs	r2, #4
 80004fc:	4313      	orrs	r3, r2
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4811      	ldr	r0, [pc, #68]	; (800054c <lcd1602_Send_init_Data+0x84>)
 8000508:	230a      	movs	r3, #10
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	214e      	movs	r1, #78	; 0x4e
 8000510:	f000 fe4c 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000514:	2005      	movs	r0, #5
 8000516:	f000 fb2b 	bl	8000b70 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2204      	movs	r2, #4
 8000520:	4393      	bics	r3, r2
 8000522:	b2da      	uxtb	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4808      	ldr	r0, [pc, #32]	; (800054c <lcd1602_Send_init_Data+0x84>)
 800052c:	230a      	movs	r3, #10
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	214e      	movs	r1, #78	; 0x4e
 8000534:	f000 fe3a 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000538:	2005      	movs	r0, #5
 800053a:	f000 fb19 	bl	8000b70 <HAL_Delay>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20000028 	.word	0x20000028
 800054c:	20000084 	.word	0x20000084

08000550 <lcd1602_Init>:
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
}

void lcd1602_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	2230      	movs	r2, #48	; 0x30
 800055a:	701a      	strb	r2, [r3, #0]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 800055c:	200f      	movs	r0, #15
 800055e:	f000 fb07 	bl	8000b70 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff ffaf 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 800056a:	2005      	movs	r0, #5
 800056c:	f000 fb00 	bl	8000b70 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff ffa8 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 faf9 	bl	8000b70 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	0018      	movs	r0, r3
 8000582:	f7ff ffa1 	bl	80004c8 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	2220      	movs	r2, #32
 800058a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ff9a 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	2220      	movs	r2, #32
 8000598:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	0018      	movs	r0, r3
 800059e:	f7ff ff93 	bl	80004c8 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff ff8c 	bl	80004c8 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff ff85 	bl	80004c8 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff ff7e 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ff77 	bl	80004c8 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	2210      	movs	r2, #16
 80005de:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ff70 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff ff69 	bl	80004c8 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	2230      	movs	r2, #48	; 0x30
 80005fa:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ff62 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ff5b 	bl	80004c8 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ff54 	bl	80004c8 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fa3c 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f814 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f8d2 	bl	80007dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000638:	f000 f868 	bl	800070c <MX_I2C1_Init>
  MX_TIM16_Init();
 800063c:	f000 f8a6 	bl	800078c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  lcd1602_Init();
 8000640:	f7ff ff86 	bl	8000550 <lcd1602_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <main+0x30>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fe46 	bl	80022d8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BUTTON_Process();
 800064c:	f7ff fede 	bl	800040c <BUTTON_Process>
	  Button_Processing();
 8000650:	f000 f910 	bl	8000874 <Button_Processing>
	  BUTTON_Process();
 8000654:	e7fa      	b.n	800064c <main+0x24>
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	200000d0 	.word	0x200000d0

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b095      	sub	sp, #84	; 0x54
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	2420      	movs	r4, #32
 8000664:	193b      	adds	r3, r7, r4
 8000666:	0018      	movs	r0, r3
 8000668:	2330      	movs	r3, #48	; 0x30
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f002 f85f 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	2310      	movs	r3, #16
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	2310      	movs	r3, #16
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f002 f857 	bl	8002730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000682:	003b      	movs	r3, r7
 8000684:	0018      	movs	r0, r3
 8000686:	2310      	movs	r3, #16
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f002 f850 	bl	8002730 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2210      	movs	r2, #16
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f8a9 	bl	8001804 <HAL_RCC_OscConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006b6:	f000 f903 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	2110      	movs	r1, #16
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2207      	movs	r2, #7
 80006c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2100      	movs	r1, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fbad 	bl	8001e38 <HAL_RCC_ClockConfig>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006e2:	f000 f8ed 	bl	80008c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2220      	movs	r2, #32
 80006ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fcd1 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006fe:	f000 f8df 	bl	80008c0 <Error_Handler>
  }
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b015      	add	sp, #84	; 0x54
 8000708:	bd90      	pop	{r4, r7, pc}
	...

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_I2C1_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_I2C1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_I2C1_Init+0x74>)
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <MX_I2C1_Init+0x7c>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_I2C1_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_I2C1_Init+0x74>)
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fc99 	bl	8001080 <HAL_I2C_Init>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000752:	f000 f8b5 	bl	80008c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_I2C1_Init+0x74>)
 8000758:	2100      	movs	r1, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 ffba 	bl	80016d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000764:	f000 f8ac 	bl	80008c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_I2C1_Init+0x74>)
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fffd 	bl	800176c <HAL_I2CEx_ConfigDigitalFilter>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 f8a3 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000084 	.word	0x20000084
 8000784:	40005400 	.word	0x40005400
 8000788:	2000090e 	.word	0x2000090e

0800078c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_TIM16_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <MX_TIM16_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_TIM16_Init+0x44>)
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_TIM16_Init+0x4c>)
 800079a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_TIM16_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_TIM16_Init+0x44>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_TIM16_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_TIM16_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_TIM16_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <MX_TIM16_Init+0x44>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fd3b 	bl	8002238 <HAL_TIM_Base_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80007c6:	f000 f87b 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	40014400 	.word	0x40014400
 80007d8:	000012bf 	.word	0x000012bf

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	240c      	movs	r4, #12
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2314      	movs	r3, #20
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f001 ff9f 	bl	8002730 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_GPIO_Init+0x90>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_GPIO_Init+0x90>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	03c9      	lsls	r1, r1, #15
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_GPIO_Init+0x90>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	03db      	lsls	r3, r3, #15
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_GPIO_Init+0x90>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_GPIO_Init+0x90>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_GPIO_Init+0x90>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_GPIO_Init+0x90>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_GPIO_Init+0x90>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	02c9      	lsls	r1, r1, #11
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_GPIO_Init+0x90>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	02db      	lsls	r3, r3, #11
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_DOWN_Pin BUTTON_LEFT_Pin BUTTON_RIGHT_Pin
                           BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_DOWN_Pin|BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin
 8000846:	193b      	adds	r3, r7, r4
 8000848:	22f8      	movs	r2, #248	; 0xf8
 800084a:	601a      	str	r2, [r3, #0]
                          |BUTTON_ENTER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	193b      	adds	r3, r7, r4
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <MX_GPIO_Init+0x94>)
 800085c:	0019      	movs	r1, r3
 800085e:	0010      	movs	r0, r2
 8000860:	f000 fa88 	bl	8000d74 <HAL_GPIO_Init>

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b009      	add	sp, #36	; 0x24
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <Button_Processing>:

/* USER CODE BEGIN 4 */
void Button_Processing(){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	if(BUTTON_GetAction(BUTTON_LEFT)){
 8000878:	2002      	movs	r0, #2
 800087a:	f7ff fe15 	bl	80004a8 <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_RIGHT)){
 800087e:	2003      	movs	r0, #3
 8000880:	f7ff fe12 	bl	80004a8 <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_UP)){
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fe0f 	bl	80004a8 <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_DOWN)){
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fe0c 	bl	80004a8 <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_ENTER) == BUTTON_VERY_LONG_PRESS){
 8000890:	2004      	movs	r0, #4
 8000892:	f7ff fe09 	bl	80004a8 <BUTTON_GetAction>

	}

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim16.Instance){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d101      	bne.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x18>
		BUTTON_TimerProcess();
 80008b0:	f7ff fdb6 	bl	8000420 <BUTTON_TimerProcess>
	}
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000d0 	.word	0x200000d0

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	699a      	ldr	r2, [r3, #24]
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	69da      	ldr	r2, [r3, #28]
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0549      	lsls	r1, r1, #21
 80008f4:	430a      	orrs	r2, r1
 80008f6:	61da      	str	r2, [r3, #28]
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_MspInit+0x44>)
 80008fa:	69da      	ldr	r2, [r3, #28]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	055b      	lsls	r3, r3, #21
 8000900:	4013      	ands	r3, r2
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	; 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	2414      	movs	r4, #20
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	2314      	movs	r3, #20
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f001 ff02 	bl	8002730 <memset>
  if(hi2c->Instance==I2C1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d133      	bne.n	800099e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <HAL_I2C_MspInit+0x98>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_I2C_MspInit+0x98>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0289      	lsls	r1, r1, #10
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_I2C_MspInit+0x98>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	029b      	lsls	r3, r3, #10
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	22c0      	movs	r2, #192	; 0xc0
 8000956:	00d2      	lsls	r2, r2, #3
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095a:	0021      	movs	r1, r4
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2212      	movs	r2, #18
 8000960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2203      	movs	r2, #3
 800096c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2204      	movs	r2, #4
 8000972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	187a      	adds	r2, r7, r1
 8000976:	2390      	movs	r3, #144	; 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f000 f9f9 	bl	8000d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_I2C_MspInit+0x98>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_I2C_MspInit+0x98>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0389      	lsls	r1, r1, #14
 800098c:	430a      	orrs	r2, r1
 800098e:	61da      	str	r2, [r3, #28]
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_I2C_MspInit+0x98>)
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	039b      	lsls	r3, r3, #14
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00b      	add	sp, #44	; 0x2c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_TIM_Base_MspInit+0x48>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d115      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_TIM_Base_MspInit+0x4c>)
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_TIM_Base_MspInit+0x4c>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	619a      	str	r2, [r3, #24]
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_TIM_Base_MspInit+0x4c>)
 80009d2:	699a      	ldr	r2, [r3, #24]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2015      	movs	r0, #21
 80009e4:	f000 f994 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009e8:	2015      	movs	r0, #21
 80009ea:	f000 f9a6 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40014400 	.word	0x40014400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f888 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <TIM16_IRQHandler+0x14>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fc9a 	bl	8002370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	200000d0 	.word	0x200000d0

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a7e:	f7ff ffe3 	bl	8000a48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a82:	f001 fe31 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fdcf 	bl	8000628 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000a98:	08002790 	.word	0x08002790
  ldr r2, =_sbss
 8000a9c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000aa0:	2000011c 	.word	0x2000011c

08000aa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_Init+0x24>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_Init+0x24>)
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 f809 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abe:	f7ff ff05 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x5c>)
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_InitTick+0x60>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	23fa      	movs	r3, #250	; 0xfa
 8000ae4:	0098      	lsls	r0, r3, #2
 8000ae6:	f7ff fb0f 	bl	8000108 <__udivsi3>
 8000aea:	0003      	movs	r3, r0
 8000aec:	0019      	movs	r1, r3
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fb0a 	bl	8000108 <__udivsi3>
 8000af4:	0003      	movs	r3, r0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f92f 	bl	8000d5a <HAL_SYSTICK_Config>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e00f      	b.n	8000b24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d80b      	bhi.n	8000b22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 f8fc 	bl	8000d10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_InitTick+0x64>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	2000002c 	.word	0x2000002c
 8000b30:	20000034 	.word	0x20000034
 8000b34:	20000030 	.word	0x20000030

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000034 	.word	0x20000034
 8000b58:	20000118 	.word	0x20000118

08000b5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	20000118 	.word	0x20000118

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff fff0 	bl	8000b5c <HAL_GetTick>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001a      	movs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	f7ff ffe0 	bl	8000b5c <HAL_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b004      	add	sp, #16
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000034 	.word	0x20000034

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d809      	bhi.n	8000be0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	231f      	movs	r3, #31
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_EnableIRQ+0x30>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	000a      	movs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000c00:	d828      	bhi.n	8000c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c02:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <__NVIC_SetPriority+0xd4>)
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	33c0      	adds	r3, #192	; 0xc0
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	589b      	ldr	r3, [r3, r2]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	; 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <__NVIC_SetPriority+0xd4>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	33c0      	adds	r3, #192	; 0xc0
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c52:	e031      	b.n	8000cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	400b      	ands	r3, r1
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3306      	adds	r3, #6
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <__NVIC_SetPriority+0xd8>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	3b08      	subs	r3, #8
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	430a      	orrs	r2, r1
 8000cae:	3306      	adds	r3, #6
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	18c3      	adds	r3, r0, r3
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	045b      	lsls	r3, r3, #17
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d301      	bcc.n	8000ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e010      	b.n	8000d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <SysTick_Config+0x44>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce8:	2301      	movs	r3, #1
 8000cea:	425b      	negs	r3, r3
 8000cec:	2103      	movs	r1, #3
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff ff7c 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x44>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x44>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	0002      	movs	r2, r0
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff33 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ffaf 	bl	8000cc8 <SysTick_Config>
 8000d6a:	0003      	movs	r3, r0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e149      	b.n	8001018 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d100      	bne.n	8000d9c <HAL_GPIO_Init+0x28>
 8000d9a:	e13a      	b.n	8001012 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	2201      	movs	r2, #1
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	58d3      	ldr	r3, [r2, r3]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2207      	movs	r2, #7
 8000e70:	4013      	ands	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2107      	movs	r1, #7
 8000e8a:	400b      	ands	r3, r1
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	6939      	ldr	r1, [r7, #16]
 8000ea4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x174>
 8000ee6:	e094      	b.n	8001012 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b51      	ldr	r3, [pc, #324]	; (8001030 <HAL_GPIO_Init+0x2bc>)
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <HAL_GPIO_Init+0x2bc>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x2bc>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x2c0>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	589b      	ldr	r3, [r3, r2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2203      	movs	r2, #3
 8000f12:	4013      	ands	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x1d6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a41      	ldr	r2, [pc, #260]	; (8001038 <HAL_GPIO_Init+0x2c4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x1d2>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a40      	ldr	r2, [pc, #256]	; (800103c <HAL_GPIO_Init+0x2c8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x1ce>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x1d8>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x1d8>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x1d8>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	2103      	movs	r1, #3
 8000f50:	400a      	ands	r2, r1
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <HAL_GPIO_Init+0x2c0>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	4013      	ands	r3, r2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	035b      	lsls	r3, r3, #13
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	039b      	lsls	r3, r3, #14
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	40da      	lsrs	r2, r3
 8001020:	1e13      	subs	r3, r2, #0
 8001022:	d000      	beq.n	8001026 <HAL_GPIO_Init+0x2b2>
 8001024:	e6ae      	b.n	8000d84 <HAL_GPIO_Init+0x10>
  } 
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b006      	add	sp, #24
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	48000400 	.word	0x48000400
 800103c:	48000800 	.word	0x48000800
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	000a      	movs	r2, r1
 800104e:	1cbb      	adds	r3, r7, #2
 8001050:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	1cba      	adds	r2, r7, #2
 8001058:	8812      	ldrh	r2, [r2, #0]
 800105a:	4013      	ands	r3, r2
 800105c:	d004      	beq.n	8001068 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800105e:	230f      	movs	r3, #15
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e003      	b.n	8001070 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	781b      	ldrb	r3, [r3, #0]
  }
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e082      	b.n	8001198 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2241      	movs	r2, #65	; 0x41
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fc33 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2241      	movs	r2, #65	; 0x41
 80010b2:	2124      	movs	r1, #36	; 0x24
 80010b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4934      	ldr	r1, [pc, #208]	; (80011a0 <HAL_I2C_Init+0x120>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4931      	ldr	r1, [pc, #196]	; (80011a4 <HAL_I2C_Init+0x124>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	0209      	lsls	r1, r1, #8
 80010f8:	430a      	orrs	r2, r1
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	e007      	b.n	800110e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2184      	movs	r1, #132	; 0x84
 8001108:	0209      	lsls	r1, r1, #8
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d104      	bne.n	8001120 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	491f      	ldr	r1, [pc, #124]	; (80011a8 <HAL_I2C_Init+0x128>)
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	491a      	ldr	r1, [pc, #104]	; (80011a4 <HAL_I2C_Init+0x124>)
 800113c:	400a      	ands	r2, r1
 800113e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	431a      	orrs	r2, r3
 800114a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69d9      	ldr	r1, [r3, #28]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1a      	ldr	r2, [r3, #32]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2241      	movs	r2, #65	; 0x41
 8001184:	2120      	movs	r1, #32
 8001186:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2242      	movs	r2, #66	; 0x42
 8001192:	2100      	movs	r1, #0
 8001194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	f0ffffff 	.word	0xf0ffffff
 80011a4:	ffff7fff 	.word	0xffff7fff
 80011a8:	02008000 	.word	0x02008000

080011ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	0008      	movs	r0, r1
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	0019      	movs	r1, r3
 80011ba:	230a      	movs	r3, #10
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	2308      	movs	r3, #8
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	1c0a      	adds	r2, r1, #0
 80011c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2241      	movs	r2, #65	; 0x41
 80011ce:	5c9b      	ldrb	r3, [r3, r2]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d000      	beq.n	80011d8 <HAL_I2C_Master_Transmit+0x2c>
 80011d6:	e0e7      	b.n	80013a8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2240      	movs	r2, #64	; 0x40
 80011dc:	5c9b      	ldrb	r3, [r3, r2]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_I2C_Master_Transmit+0x3a>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e0e1      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	2101      	movs	r1, #1
 80011ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011ee:	f7ff fcb5 	bl	8000b5c <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	0219      	lsls	r1, r3, #8
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2319      	movs	r3, #25
 8001202:	2201      	movs	r2, #1
 8001204:	f000 f8fc 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0cc      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2241      	movs	r2, #65	; 0x41
 8001214:	2121      	movs	r1, #33	; 0x21
 8001216:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2242      	movs	r2, #66	; 0x42
 800121c:	2110      	movs	r1, #16
 800121e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2208      	movs	r2, #8
 8001230:	18ba      	adds	r2, r7, r2
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d911      	bls.n	800126a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	22ff      	movs	r2, #255	; 0xff
 800124a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001250:	b2da      	uxtb	r2, r3
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	045c      	lsls	r4, r3, #17
 8001256:	230a      	movs	r3, #10
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <HAL_I2C_Master_Transmit+0x208>)
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	0023      	movs	r3, r4
 8001264:	f000 fa00 	bl	8001668 <I2C_TransferConfig>
 8001268:	e075      	b.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	b2da      	uxtb	r2, r3
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	049c      	lsls	r4, r3, #18
 800127e:	230a      	movs	r3, #10
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	8819      	ldrh	r1, [r3, #0]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <HAL_I2C_Master_Transmit+0x208>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	0023      	movs	r3, r4
 800128c:	f000 f9ec 	bl	8001668 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001290:	e061      	b.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 f8f0 	bl	800147e <I2C_WaitOnTXISFlagUntilTimeout>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e081      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03a      	beq.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d136      	bne.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	0013      	movs	r3, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	f000 f883 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e053      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001306:	b29b      	uxth	r3, r3
 8001308:	2bff      	cmp	r3, #255	; 0xff
 800130a:	d911      	bls.n	8001330 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	b2da      	uxtb	r2, r3
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	045c      	lsls	r4, r3, #17
 800131c:	230a      	movs	r3, #10
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	8819      	ldrh	r1, [r3, #0]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	0023      	movs	r3, r4
 800132a:	f000 f99d 	bl	8001668 <I2C_TransferConfig>
 800132e:	e012      	b.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001334:	b29a      	uxth	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133e:	b2da      	uxtb	r2, r3
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	049c      	lsls	r4, r3, #18
 8001344:	230a      	movs	r3, #10
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	8819      	ldrh	r1, [r3, #0]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	2300      	movs	r3, #0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	0023      	movs	r3, r4
 8001352:	f000 f989 	bl	8001668 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135a:	b29b      	uxth	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d198      	bne.n	8001292 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f8c8 	bl	80014fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e01a      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2220      	movs	r2, #32
 800137a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	490c      	ldr	r1, [pc, #48]	; (80013b8 <HAL_I2C_Master_Transmit+0x20c>)
 8001388:	400a      	ands	r2, r1
 800138a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2241      	movs	r2, #65	; 0x41
 8001390:	2120      	movs	r1, #32
 8001392:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2242      	movs	r2, #66	; 0x42
 8001398:	2100      	movs	r1, #0
 800139a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013a8:	2302      	movs	r3, #2
  }
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b007      	add	sp, #28
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	80002000 	.word	0x80002000
 80013b8:	fe00e800 	.word	0xfe00e800

080013bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d103      	bne.n	80013da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d007      	beq.n	80013f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	619a      	str	r2, [r3, #24]
  }
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001410:	e021      	b.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	d01e      	beq.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001418:	f7ff fba0 	bl	8000b5c <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d302      	bcc.n	800142e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d113      	bne.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	2220      	movs	r2, #32
 8001434:	431a      	orrs	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2241      	movs	r2, #65	; 0x41
 800143e:	2120      	movs	r1, #32
 8001440:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2242      	movs	r2, #66	; 0x42
 8001446:	2100      	movs	r1, #0
 8001448:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	4013      	ands	r3, r2
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	425a      	negs	r2, r3
 8001466:	4153      	adcs	r3, r2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	001a      	movs	r2, r3
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d0ce      	beq.n	8001412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}

0800147e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800148a:	e02b      	b.n	80014e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f86e 	bl	8001574 <I2C_IsAcknowledgeFailed>
 8001498:	1e03      	subs	r3, r0, #0
 800149a:	d001      	beq.n	80014a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e029      	b.n	80014f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3301      	adds	r3, #1
 80014a4:	d01e      	beq.n	80014e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a6:	f7ff fb59 	bl	8000b5c <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d302      	bcc.n	80014bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d113      	bne.n	80014e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	2220      	movs	r2, #32
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2241      	movs	r2, #65	; 0x41
 80014cc:	2120      	movs	r1, #32
 80014ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2242      	movs	r2, #66	; 0x42
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	2100      	movs	r1, #0
 80014de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e007      	b.n	80014f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d1cc      	bne.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b004      	add	sp, #16
 80014fa:	bd80      	pop	{r7, pc}

080014fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001508:	e028      	b.n	800155c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f82f 	bl	8001574 <I2C_IsAcknowledgeFailed>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d001      	beq.n	800151e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e026      	b.n	800156c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151e:	f7ff fb1d 	bl	8000b5c <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	429a      	cmp	r2, r3
 800152c:	d302      	bcc.n	8001534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d113      	bne.n	800155c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	2220      	movs	r2, #32
 800153a:	431a      	orrs	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2241      	movs	r2, #65	; 0x41
 8001544:	2120      	movs	r1, #32
 8001546:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2242      	movs	r2, #66	; 0x42
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e007      	b.n	800156c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2220      	movs	r2, #32
 8001564:	4013      	ands	r3, r2
 8001566:	2b20      	cmp	r3, #32
 8001568:	d1cf      	bne.n	800150a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2210      	movs	r2, #16
 8001588:	4013      	ands	r3, r2
 800158a:	2b10      	cmp	r3, #16
 800158c:	d164      	bne.n	8001658 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	049b      	lsls	r3, r3, #18
 8001598:	401a      	ands	r2, r3
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	049b      	lsls	r3, r3, #18
 800159e:	429a      	cmp	r2, r3
 80015a0:	d02b      	beq.n	80015fa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	01c9      	lsls	r1, r1, #7
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b4:	e021      	b.n	80015fa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3301      	adds	r3, #1
 80015ba:	d01e      	beq.n	80015fa <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015bc:	f7ff face 	bl	8000b5c <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d302      	bcc.n	80015d2 <I2C_IsAcknowledgeFailed+0x5e>
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d113      	bne.n	80015fa <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	2220      	movs	r2, #32
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2241      	movs	r2, #65	; 0x41
 80015e2:	2120      	movs	r1, #32
 80015e4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2242      	movs	r2, #66	; 0x42
 80015ea:	2100      	movs	r1, #0
 80015ec:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e02f      	b.n	800165a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2220      	movs	r2, #32
 8001602:	4013      	ands	r3, r2
 8001604:	2b20      	cmp	r3, #32
 8001606:	d1d6      	bne.n	80015b6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2210      	movs	r2, #16
 800160e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2220      	movs	r2, #32
 8001616:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff fece 	bl	80013bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <I2C_IsAcknowledgeFailed+0xf0>)
 800162c:	400a      	ands	r2, r1
 800162e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	2204      	movs	r2, #4
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2241      	movs	r2, #65	; 0x41
 8001640:	2120      	movs	r1, #32
 8001642:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2242      	movs	r2, #66	; 0x42
 8001648:	2100      	movs	r1, #0
 800164a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	2100      	movs	r1, #0
 8001652:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	fe00e800 	.word	0xfe00e800

08001668 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	0008      	movs	r0, r1
 8001672:	0011      	movs	r1, r2
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	240a      	movs	r4, #10
 8001678:	193b      	adds	r3, r7, r4
 800167a:	1c02      	adds	r2, r0, #0
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	2009      	movs	r0, #9
 8001680:	183b      	adds	r3, r7, r0
 8001682:	1c0a      	adds	r2, r1, #0
 8001684:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	0d51      	lsrs	r1, r2, #21
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	00d2      	lsls	r2, r2, #3
 8001694:	400a      	ands	r2, r1
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <I2C_TransferConfig+0x68>)
 8001698:	430a      	orrs	r2, r1
 800169a:	43d2      	mvns	r2, r2
 800169c:	401a      	ands	r2, r3
 800169e:	0011      	movs	r1, r2
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	059b      	lsls	r3, r3, #22
 80016a6:	0d9a      	lsrs	r2, r3, #22
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	0418      	lsls	r0, r3, #16
 80016ae:	23ff      	movs	r3, #255	; 0xff
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	4003      	ands	r3, r0
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b005      	add	sp, #20
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	03ff63ff 	.word	0x03ff63ff

080016d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2241      	movs	r2, #65	; 0x41
 80016e2:	5c9b      	ldrb	r3, [r3, r2]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d138      	bne.n	800175c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e032      	b.n	800175e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	2101      	movs	r1, #1
 80016fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2241      	movs	r2, #65	; 0x41
 8001704:	2124      	movs	r1, #36	; 0x24
 8001706:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2101      	movs	r1, #1
 8001714:	438a      	bics	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4911      	ldr	r1, [pc, #68]	; (8001768 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2241      	movs	r2, #65	; 0x41
 800174c:	2120      	movs	r1, #32
 800174e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800175c:	2302      	movs	r3, #2
  }
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	ffffefff 	.word	0xffffefff

0800176c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2241      	movs	r2, #65	; 0x41
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b20      	cmp	r3, #32
 8001780:	d139      	bne.n	80017f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2240      	movs	r2, #64	; 0x40
 8001786:	5c9b      	ldrb	r3, [r3, r2]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800178c:	2302      	movs	r3, #2
 800178e:	e033      	b.n	80017f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	2101      	movs	r1, #1
 8001796:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2241      	movs	r2, #65	; 0x41
 800179c:	2124      	movs	r1, #36	; 0x24
 800179e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	438a      	bics	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2241      	movs	r2, #65	; 0x41
 80017e6:	2120      	movs	r1, #32
 80017e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2240      	movs	r2, #64	; 0x40
 80017ee:	2100      	movs	r1, #0
 80017f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
  }
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	fffff0ff 	.word	0xfffff0ff

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e301      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x1e>
 8001820:	e08d      	b.n	800193e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001822:	4bc3      	ldr	r3, [pc, #780]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	220c      	movs	r2, #12
 8001828:	4013      	ands	r3, r2
 800182a:	2b04      	cmp	r3, #4
 800182c:	d00e      	beq.n	800184c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182e:	4bc0      	ldr	r3, [pc, #768]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	220c      	movs	r2, #12
 8001834:	4013      	ands	r3, r2
 8001836:	2b08      	cmp	r3, #8
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x64>
 800183a:	4bbd      	ldr	r3, [pc, #756]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	401a      	ands	r2, r3
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	429a      	cmp	r2, r3
 800184a:	d10d      	bne.n	8001868 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	4bb8      	ldr	r3, [pc, #736]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	4013      	ands	r3, r2
 8001856:	d100      	bne.n	800185a <HAL_RCC_OscConfig+0x56>
 8001858:	e070      	b.n	800193c <HAL_RCC_OscConfig+0x138>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d000      	beq.n	8001864 <HAL_RCC_OscConfig+0x60>
 8001862:	e06b      	b.n	800193c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e2d8      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x7c>
 8001870:	4baf      	ldr	r3, [pc, #700]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4bae      	ldr	r3, [pc, #696]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0249      	lsls	r1, r1, #9
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e02f      	b.n	80018e0 <HAL_RCC_OscConfig+0xdc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x9e>
 8001888:	4ba9      	ldr	r3, [pc, #676]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4ba8      	ldr	r3, [pc, #672]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800188e:	49a9      	ldr	r1, [pc, #676]	; (8001b34 <HAL_RCC_OscConfig+0x330>)
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4ba6      	ldr	r3, [pc, #664]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4ba5      	ldr	r3, [pc, #660]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800189a:	49a7      	ldr	r1, [pc, #668]	; (8001b38 <HAL_RCC_OscConfig+0x334>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e01e      	b.n	80018e0 <HAL_RCC_OscConfig+0xdc>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10e      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc4>
 80018aa:	4ba1      	ldr	r3, [pc, #644]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4ba0      	ldr	r3, [pc, #640]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	02c9      	lsls	r1, r1, #11
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b9d      	ldr	r3, [pc, #628]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b9c      	ldr	r3, [pc, #624]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xdc>
 80018c8:	4b99      	ldr	r3, [pc, #612]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b98      	ldr	r3, [pc, #608]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	4999      	ldr	r1, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x330>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b96      	ldr	r3, [pc, #600]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b95      	ldr	r3, [pc, #596]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018da:	4997      	ldr	r1, [pc, #604]	; (8001b38 <HAL_RCC_OscConfig+0x334>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d014      	beq.n	8001912 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff f938 	bl	8000b5c <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff f933 	bl	8000b5c <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e28a      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	4b8a      	ldr	r3, [pc, #552]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0xee>
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff f923 	bl	8000b5c <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f91e 	bl	8000b5c <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e275      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	4013      	ands	r3, r2
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x118>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x146>
 8001948:	e069      	b.n	8001a1e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194a:	4b79      	ldr	r3, [pc, #484]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	220c      	movs	r2, #12
 8001950:	4013      	ands	r3, r2
 8001952:	d00b      	beq.n	800196c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001954:	4b76      	ldr	r3, [pc, #472]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	220c      	movs	r2, #12
 800195a:	4013      	ands	r3, r2
 800195c:	2b08      	cmp	r3, #8
 800195e:	d11c      	bne.n	800199a <HAL_RCC_OscConfig+0x196>
 8001960:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	4013      	ands	r3, r2
 800196a:	d116      	bne.n	800199a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196c:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x17e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e24b      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	22f8      	movs	r2, #248	; 0xf8
 8001988:	4393      	bics	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	00da      	lsls	r2, r3, #3
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001998:	e041      	b.n	8001a1e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	2101      	movs	r1, #1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f8d5 	bl	8000b5c <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff f8d0 	bl	8000b5c <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e227      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d0f1      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	22f8      	movs	r2, #248	; 0xf8
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00da      	lsls	r2, r3, #3
 80019e4:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff f8b0 	bl	8000b5c <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff f8ab 	bl	8000b5c <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e202      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a14:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f1      	bne.n	8001a02 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2208      	movs	r2, #8
 8001a24:	4013      	ands	r3, r2
 8001a26:	d036      	beq.n	8001a96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d019      	beq.n	8001a64 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a30:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f88e 	bl	8000b5c <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff f889 	bl	8000b5c <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1e0      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a58:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f1      	beq.n	8001a46 <HAL_RCC_OscConfig+0x242>
 8001a62:	e018      	b.n	8001a96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a64:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff f874 	bl	8000b5c <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f86f 	bl	8000b5c <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1c6      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d1f1      	bne.n	8001a7a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x29e>
 8001aa0:	e0b4      	b.n	8001c0c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	201f      	movs	r0, #31
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d110      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0549      	lsls	r1, r1, #21
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	61da      	str	r2, [r3, #28]
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_RCC_OscConfig+0x338>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x338>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_RCC_OscConfig+0x338>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7ff f833 	bl	8000b5c <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afc:	f7ff f82e 	bl	8000b5c <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e185      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x338>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10e      	bne.n	8001b40 <HAL_RCC_OscConfig+0x33c>
 8001b22:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	621a      	str	r2, [r3, #32]
 8001b2e:	e035      	b.n	8001b9c <HAL_RCC_OscConfig+0x398>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	fffeffff 	.word	0xfffeffff
 8001b38:	fffbffff 	.word	0xfffbffff
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x35e>
 8001b48:	4bb6      	ldr	r3, [pc, #728]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	4bb5      	ldr	r3, [pc, #724]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	4bb3      	ldr	r3, [pc, #716]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	4bb2      	ldr	r3, [pc, #712]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	621a      	str	r2, [r3, #32]
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x398>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x380>
 8001b6a:	4bae      	ldr	r3, [pc, #696]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b6c:	6a1a      	ldr	r2, [r3, #32]
 8001b6e:	4bad      	ldr	r3, [pc, #692]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b70:	2104      	movs	r1, #4
 8001b72:	430a      	orrs	r2, r1
 8001b74:	621a      	str	r2, [r3, #32]
 8001b76:	4bab      	ldr	r3, [pc, #684]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	4baa      	ldr	r3, [pc, #680]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	621a      	str	r2, [r3, #32]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x398>
 8001b84:	4ba7      	ldr	r3, [pc, #668]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4ba6      	ldr	r3, [pc, #664]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
 8001b90:	4ba4      	ldr	r3, [pc, #656]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4ba3      	ldr	r3, [pc, #652]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001b96:	2104      	movs	r1, #4
 8001b98:	438a      	bics	r2, r1
 8001b9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d014      	beq.n	8001bce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7fe ffda 	bl	8000b5c <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe ffd5 	bl	8000b5c <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4a9b      	ldr	r2, [pc, #620]	; (8001e28 <HAL_RCC_OscConfig+0x624>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e12b      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4b98      	ldr	r3, [pc, #608]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x3aa>
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe ffc5 	bl	8000b5c <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7fe ffc0 	bl	8000b5c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4a91      	ldr	r2, [pc, #580]	; (8001e28 <HAL_RCC_OscConfig+0x624>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e116      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	4b87      	ldr	r3, [pc, #540]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c06:	4989      	ldr	r1, [pc, #548]	; (8001e2c <HAL_RCC_OscConfig+0x628>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2210      	movs	r2, #16
 8001c12:	4013      	ands	r3, r2
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d12a      	bne.n	8001c74 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c1e:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c24:	2104      	movs	r1, #4
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c2a:	4b7e      	ldr	r3, [pc, #504]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2e:	4b7d      	ldr	r3, [pc, #500]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7fe ff91 	bl	8000b5c <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c40:	f7fe ff8c 	bl	8000b5c <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0e3      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c52:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f1      	beq.n	8001c40 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c5c:	4b71      	ldr	r3, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c60:	22f8      	movs	r2, #248	; 0xf8
 8001c62:	4393      	bics	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	00da      	lsls	r2, r3, #3
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e034      	b.n	8001cde <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	d111      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c7c:	4b69      	ldr	r3, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c82:	2104      	movs	r1, #4
 8001c84:	438a      	bics	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c88:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	22f8      	movs	r2, #248	; 0xf8
 8001c8e:	4393      	bics	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	00da      	lsls	r2, r3, #3
 8001c98:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9e:	e01e      	b.n	8001cde <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca0:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca4:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cac:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe ff50 	bl	8000b5c <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cc2:	f7fe ff4b 	bl	8000b5c <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0a2      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f1      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d100      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4e4>
 8001ce6:	e097      	b.n	8001e18 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce8:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	220c      	movs	r2, #12
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4f2>
 8001cf4:	e06b      	b.n	8001dce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d14c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d04:	494a      	ldr	r1, [pc, #296]	; (8001e30 <HAL_RCC_OscConfig+0x62c>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe ff27 	bl	8000b5c <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe ff22 	bl	8000b5c <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e079      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	049b      	lsls	r3, r3, #18
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	220f      	movs	r2, #15
 8001d38:	4393      	bics	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <HAL_RCC_OscConfig+0x630>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0449      	lsls	r1, r1, #17
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fef5 	bl	8000b5c <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7fe fef0 	bl	8000b5c <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e047      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	049b      	lsls	r3, r3, #18
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x574>
 8001d96:	e03f      	b.n	8001e18 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	4924      	ldr	r1, [pc, #144]	; (8001e30 <HAL_RCC_OscConfig+0x62c>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7fe feda 	bl	8000b5c <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fed5 	bl	8000b5c <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e02c      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	049b      	lsls	r3, r3, #18
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x5aa>
 8001dcc:	e024      	b.n	8001e18 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01f      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	025b      	lsls	r3, r3, #9
 8001dec:	401a      	ands	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d10e      	bne.n	8001e14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	220f      	movs	r2, #15
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	23f0      	movs	r3, #240	; 0xf0
 8001e08:	039b      	lsls	r3, r3, #14
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b008      	add	sp, #32
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000
 8001e28:	00001388 	.word	0x00001388
 8001e2c:	efffffff 	.word	0xefffffff
 8001e30:	feffffff 	.word	0xfeffffff
 8001e34:	ffc2ffff 	.word	0xffc2ffff

08001e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b3      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b5b      	ldr	r3, [pc, #364]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d911      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e09a      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d015      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d006      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e92:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001e98:	21e0      	movs	r1, #224	; 0xe0
 8001e9a:	00c9      	lsls	r1, r1, #3
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	22f0      	movs	r2, #240	; 0xf0
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d040      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d114      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06e      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e062      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e05b      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efc:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f10:	f7fe fe24 	bl	8000b5c <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f7fe fe1f 	bl	8000b5c <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_RCC_ClockConfig+0x18c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e042      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	220c      	movs	r2, #12
 8001f34:	401a      	ands	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1ec      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d211      	bcs.n	8001f72 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCC_ClockConfig+0x184>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	4013      	ands	r3, r2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e020      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_RCC_ClockConfig+0x190>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f90:	f000 f820 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f94:	0001      	movs	r1, r0
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x188>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x194>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	40da      	lsrs	r2, r3
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x198>)
 8001faa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7fe fd8f 	bl	8000ad0 <HAL_InitTick>
  
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b004      	add	sp, #16
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	00001388 	.word	0x00001388
 8001fc8:	fffff8ff 	.word	0xfffff8ff
 8001fcc:	08002778 	.word	0x08002778
 8001fd0:	2000002c 	.word	0x2000002c

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b08f      	sub	sp, #60	; 0x3c
 8001fd8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fda:	2314      	movs	r3, #20
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4a29      	ldr	r2, [pc, #164]	; (8002090 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fee:	c313      	stmia	r3!, {r0, r1, r4}
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	220c      	movs	r2, #12
 8002012:	4013      	ands	r3, r2
 8002014:	2b04      	cmp	r3, #4
 8002016:	d002      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0x4a>
 8002018:	2b08      	cmp	r3, #8
 800201a:	d003      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x50>
 800201c:	e02d      	b.n	800207a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201e:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002022:	e02d      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	220f      	movs	r2, #15
 800202a:	4013      	ands	r3, r2
 800202c:	2214      	movs	r2, #20
 800202e:	18ba      	adds	r2, r7, r2
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	220f      	movs	r2, #15
 800203a:	4013      	ands	r3, r2
 800203c:	1d3a      	adds	r2, r7, #4
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	025b      	lsls	r3, r3, #9
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800204c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204e:	4812      	ldr	r0, [pc, #72]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002050:	f7fe f85a 	bl	8000108 <__udivsi3>
 8002054:	0003      	movs	r3, r0
 8002056:	001a      	movs	r2, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	4353      	muls	r3, r2
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
 800205e:	e009      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002062:	000a      	movs	r2, r1
 8002064:	0152      	lsls	r2, r2, #5
 8002066:	1a52      	subs	r2, r2, r1
 8002068:	0193      	lsls	r3, r2, #6
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	185b      	adds	r3, r3, r1
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002078:	e002      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800207e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b00f      	add	sp, #60	; 0x3c
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	08002758 	.word	0x08002758
 8002090:	08002768 	.word	0x08002768
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020b8:	e08e      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2017      	movs	r0, #23
 80020bc:	183b      	adds	r3, r7, r0
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	4013      	ands	r3, r2
 80020cc:	d110      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b54      	ldr	r3, [pc, #336]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0549      	lsls	r1, r1, #21
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	055b      	lsls	r3, r3, #21
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	183b      	adds	r3, r7, r0
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d11a      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fc:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	0049      	lsls	r1, r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fd27 	bl	8000b5c <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	e008      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe fd22 	bl	8000b5c <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e077      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d0f0      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	23c0      	movs	r3, #192	; 0xc0
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d034      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4013      	ands	r3, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d02c      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002154:	4b32      	ldr	r3, [pc, #200]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a33      	ldr	r2, [pc, #204]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0249      	lsls	r1, r1, #9
 8002168:	430a      	orrs	r2, r1
 800216a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002172:	492e      	ldr	r1, [pc, #184]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002174:	400a      	ands	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fce9 	bl	8000b5c <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	e009      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fce4 	bl	8000b5c <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e038      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c2:	2317      	movs	r3, #23
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021d2:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	2203      	movs	r2, #3
 80021e8:	4393      	bics	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2220      	movs	r2, #32
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	2210      	movs	r2, #16
 8002206:	4393      	bics	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002210:	430a      	orrs	r2, r1
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
 8002228:	fffffcff 	.word	0xfffffcff
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	00001388 	.word	0x00001388
 8002234:	efffffff 	.word	0xefffffff

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e042      	b.n	80022d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223d      	movs	r2, #61	; 0x3d
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	223c      	movs	r2, #60	; 0x3c
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7fe fba5 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	223d      	movs	r2, #61	; 0x3d
 800226a:	2102      	movs	r1, #2
 800226c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	0019      	movs	r1, r3
 8002278:	0010      	movs	r0, r2
 800227a:	f000 f9af 	bl	80025dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2246      	movs	r2, #70	; 0x46
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223e      	movs	r2, #62	; 0x3e
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2241      	movs	r2, #65	; 0x41
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2243      	movs	r2, #67	; 0x43
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2244      	movs	r2, #68	; 0x44
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2245      	movs	r2, #69	; 0x45
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223d      	movs	r2, #61	; 0x3d
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b002      	add	sp, #8
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	223d      	movs	r2, #61	; 0x3d
 80022e4:	5c9b      	ldrb	r3, [r3, r2]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e036      	b.n	800235e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	223d      	movs	r2, #61	; 0x3d
 80022f4:	2102      	movs	r1, #2
 80022f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_TIM_Base_Start_IT+0x90>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00a      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x50>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	05db      	lsls	r3, r3, #23
 800231a:	429a      	cmp	r2, r3
 800231c:	d004      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x50>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_TIM_Base_Start_IT+0x94>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2207      	movs	r2, #7
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d010      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	e007      	b.n	800235c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2101      	movs	r1, #1
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b004      	add	sp, #16
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400

08002370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d124      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	4013      	ands	r3, r2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d11d      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2203      	movs	r2, #3
 800239a:	4252      	negs	r2, r2
 800239c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2203      	movs	r2, #3
 80023ac:	4013      	ands	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f8fa 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 80023b8:	e007      	b.n	80023ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f8ed 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f8f9 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d125      	bne.n	800242a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2204      	movs	r2, #4
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d11e      	bne.n	800242a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2205      	movs	r2, #5
 80023f2:	4252      	negs	r2, r2
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	23c0      	movs	r3, #192	; 0xc0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f8cd 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002412:	e007      	b.n	8002424 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f8c0 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f8cc 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2208      	movs	r2, #8
 8002432:	4013      	ands	r3, r2
 8002434:	2b08      	cmp	r3, #8
 8002436:	d124      	bne.n	8002482 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2208      	movs	r2, #8
 8002440:	4013      	ands	r3, r2
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11d      	bne.n	8002482 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2209      	movs	r2, #9
 800244c:	4252      	negs	r2, r2
 800244e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2204      	movs	r2, #4
 8002454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2203      	movs	r2, #3
 800245e:	4013      	ands	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f8a1 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 800246a:	e007      	b.n	800247c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f894 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f8a0 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2210      	movs	r2, #16
 800248a:	4013      	ands	r3, r2
 800248c:	2b10      	cmp	r3, #16
 800248e:	d125      	bne.n	80024dc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2210      	movs	r2, #16
 8002498:	4013      	ands	r3, r2
 800249a:	2b10      	cmp	r3, #16
 800249c:	d11e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2211      	movs	r2, #17
 80024a4:	4252      	negs	r2, r2
 80024a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2208      	movs	r2, #8
 80024ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	23c0      	movs	r3, #192	; 0xc0
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 f874 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 80024c4:	e007      	b.n	80024d6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 f867 	bl	800259c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 f873 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10f      	bne.n	800250a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d108      	bne.n	800250a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2202      	movs	r2, #2
 80024fe:	4252      	negs	r2, r2
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe f9c9 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	4013      	ands	r3, r2
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d10f      	bne.n	8002538 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	4013      	ands	r3, r2
 8002522:	2b80      	cmp	r3, #128	; 0x80
 8002524:	d108      	bne.n	8002538 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2281      	movs	r2, #129	; 0x81
 800252c:	4252      	negs	r2, r2
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f8d0 	bl	80026d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	4013      	ands	r3, r2
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d10f      	bne.n	8002566 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	4013      	ands	r3, r2
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d108      	bne.n	8002566 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2241      	movs	r2, #65	; 0x41
 800255a:	4252      	negs	r2, r2
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f833 	bl	80025cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	2b20      	cmp	r3, #32
 8002572:	d10f      	bne.n	8002594 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	4013      	ands	r3, r2
 800257e:	2b20      	cmp	r3, #32
 8002580:	d108      	bne.n	8002594 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2221      	movs	r2, #33	; 0x21
 8002588:	4252      	negs	r2, r2
 800258a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f89a 	bl	80026c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <TIM_Base_SetConfig+0xd4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d008      	beq.n	8002606 <TIM_Base_SetConfig+0x2a>
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	05db      	lsls	r3, r3, #23
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d003      	beq.n	8002606 <TIM_Base_SetConfig+0x2a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <TIM_Base_SetConfig+0xd8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2270      	movs	r2, #112	; 0x70
 800260a:	4393      	bics	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <TIM_Base_SetConfig+0xd4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d014      	beq.n	800264a <TIM_Base_SetConfig+0x6e>
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	05db      	lsls	r3, r3, #23
 8002626:	429a      	cmp	r2, r3
 8002628:	d00f      	beq.n	800264a <TIM_Base_SetConfig+0x6e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <TIM_Base_SetConfig+0xd8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00b      	beq.n	800264a <TIM_Base_SetConfig+0x6e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <TIM_Base_SetConfig+0xdc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <TIM_Base_SetConfig+0x6e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <TIM_Base_SetConfig+0xe0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <TIM_Base_SetConfig+0x6e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <TIM_Base_SetConfig+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d108      	bne.n	800265c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <TIM_Base_SetConfig+0xe8>)
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	4393      	bics	r3, r2
 8002662:	001a      	movs	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <TIM_Base_SetConfig+0xd4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <TIM_Base_SetConfig+0xbe>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <TIM_Base_SetConfig+0xe0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <TIM_Base_SetConfig+0xbe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <TIM_Base_SetConfig+0xe4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d103      	bne.n	80026a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	615a      	str	r2, [r3, #20]
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40002000 	.word	0x40002000
 80026bc:	40014400 	.word	0x40014400
 80026c0:	40014800 	.word	0x40014800
 80026c4:	fffffcff 	.word	0xfffffcff

080026c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	2600      	movs	r6, #0
 80026ec:	4d0c      	ldr	r5, [pc, #48]	; (8002720 <__libc_init_array+0x38>)
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	42a6      	cmp	r6, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	2600      	movs	r6, #0
 80026fa:	f000 f821 	bl	8002740 <_init>
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <__libc_init_array+0x40>)
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <__libc_init_array+0x44>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	42a6      	cmp	r6, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	00b3      	lsls	r3, r6, #2
 800270e:	58eb      	ldr	r3, [r5, r3]
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	00b3      	lsls	r3, r6, #2
 8002718:	58eb      	ldr	r3, [r5, r3]
 800271a:	4798      	blx	r3
 800271c:	3601      	adds	r6, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	08002788 	.word	0x08002788
 8002724:	08002788 	.word	0x08002788
 8002728:	08002788 	.word	0x08002788
 800272c:	0800278c 	.word	0x0800278c

08002730 <memset>:
 8002730:	0003      	movs	r3, r0
 8002732:	1882      	adds	r2, r0, r2
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	7019      	strb	r1, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <_init>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr

0800274c <_fini>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr
