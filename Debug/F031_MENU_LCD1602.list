
F031_MENU_LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800332c  0800332c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800332c  0800332c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800332c  0800332c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000009c  080033d0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080033d0  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0f9  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f80  00000000  00000000  0002c1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ddf  00000000  00000000  0002f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f49c  00000000  00000000  000407c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000641d8  00000000  00000000  0004fc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ac  00000000  00000000  000b3e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800329c 	.word	0x0800329c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	0800329c 	.word	0x0800329c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <BUTTON_LowLevelManager>:

/* Functions -----------------------------------------------------------------*/

/******************************************************************************/
void BUTTON_LowLevelManager()
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
  uint8_t currentStates[BUTTONS_NUM];
  
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	e07a      	b.n	8000348 <BUTTON_LowLevelManager+0x104>
  {
    currentStates[i] = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781a      	ldrb	r2, [r3, #0]
 8000256:	4b41      	ldr	r3, [pc, #260]	; (800035c <BUTTON_LowLevelManager+0x118>)
 8000258:	00d2      	lsls	r2, r2, #3
 800025a:	58d0      	ldr	r0, [r2, r3]
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4a3e      	ldr	r2, [pc, #248]	; (800035c <BUTTON_LowLevelManager+0x118>)
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	18d3      	adds	r3, r2, r3
 8000266:	3304      	adds	r3, #4
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	781c      	ldrb	r4, [r3, #0]
 800026e:	0011      	movs	r1, r2
 8000270:	f001 f826 	bl	80012c0 <HAL_GPIO_ReadPin>
 8000274:	0003      	movs	r3, r0
 8000276:	001a      	movs	r2, r3
 8000278:	003b      	movs	r3, r7
 800027a:	551a      	strb	r2, [r3, r4]
    
    switch (buttonState[i])
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4a37      	ldr	r2, [pc, #220]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 8000282:	5cd3      	ldrb	r3, [r2, r3]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d03f      	beq.n	8000308 <BUTTON_LowLevelManager+0xc4>
 8000288:	dc50      	bgt.n	800032c <BUTTON_LowLevelManager+0xe8>
 800028a:	2b02      	cmp	r3, #2
 800028c:	d023      	beq.n	80002d6 <BUTTON_LowLevelManager+0x92>
 800028e:	dc4d      	bgt.n	800032c <BUTTON_LowLevelManager+0xe8>
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <BUTTON_LowLevelManager+0x56>
 8000294:	2b01      	cmp	r3, #1
 8000296:	d00c      	beq.n	80002b2 <BUTTON_LowLevelManager+0x6e>
          debounceCounter[i] = 0;
        } 
        break;
        
      default:
        break;
 8000298:	e048      	b.n	800032c <BUTTON_LowLevelManager+0xe8>
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	003a      	movs	r2, r7
 80002a0:	5cd3      	ldrb	r3, [r2, r3]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d144      	bne.n	8000330 <BUTTON_LowLevelManager+0xec>
          buttonState[i] = BUTTON_NOT_PRESSED;
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	4a2d      	ldr	r2, [pc, #180]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	54d1      	strb	r1, [r2, r3]
        break;
 80002b0:	e03e      	b.n	8000330 <BUTTON_LowLevelManager+0xec>
        if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	003a      	movs	r2, r7
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d13a      	bne.n	8000334 <BUTTON_LowLevelManager+0xf0>
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4a27      	ldr	r2, [pc, #156]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 80002c4:	2102      	movs	r1, #2
 80002c6:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <BUTTON_LowLevelManager+0x120>)
 80002ce:	0052      	lsls	r2, r2, #1
 80002d0:	2100      	movs	r1, #0
 80002d2:	52d1      	strh	r1, [r2, r3]
        break;
 80002d4:	e02e      	b.n	8000334 <BUTTON_LowLevelManager+0xf0>
        if (debounceCounter[i] == DEBOUNCE_TIME_MS)
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	4b22      	ldr	r3, [pc, #136]	; (8000364 <BUTTON_LowLevelManager+0x120>)
 80002dc:	0052      	lsls	r2, r2, #1
 80002de:	5ad3      	ldrh	r3, [r2, r3]
 80002e0:	2b64      	cmp	r3, #100	; 0x64
 80002e2:	d129      	bne.n	8000338 <BUTTON_LowLevelManager+0xf4>
          if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	003a      	movs	r2, r7
 80002ea:	5cd3      	ldrb	r3, [r2, r3]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d105      	bne.n	80002fc <BUTTON_LowLevelManager+0xb8>
            buttonState[i] = BUTTON_PRESSED;
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 80002f6:	2103      	movs	r1, #3
 80002f8:	54d1      	strb	r1, [r2, r3]
        break;
 80002fa:	e01d      	b.n	8000338 <BUTTON_LowLevelManager+0xf4>
            buttonState[i] = BUTTON_NOT_PRESSED;
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 8000302:	2101      	movs	r1, #1
 8000304:	54d1      	strb	r1, [r2, r3]
        break;
 8000306:	e017      	b.n	8000338 <BUTTON_LowLevelManager+0xf4>
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	003a      	movs	r2, r7
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d113      	bne.n	800033c <BUTTON_LowLevelManager+0xf8>
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <BUTTON_LowLevelManager+0x11c>)
 800031a:	2102      	movs	r1, #2
 800031c:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781a      	ldrb	r2, [r3, #0]
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <BUTTON_LowLevelManager+0x120>)
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	2100      	movs	r1, #0
 8000328:	52d1      	strh	r1, [r2, r3]
        break;
 800032a:	e007      	b.n	800033c <BUTTON_LowLevelManager+0xf8>
        break;
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	e006      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	e004      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	e002      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	e000      	b.n	800033e <BUTTON_LowLevelManager+0xfa>
        break;
 800033c:	46c0      	nop			; (mov r8, r8)
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	3201      	adds	r2, #1
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b04      	cmp	r3, #4
 800034e:	d800      	bhi.n	8000352 <BUTTON_LowLevelManager+0x10e>
 8000350:	e77f      	b.n	8000252 <BUTTON_LowLevelManager+0xe>
    }
  }
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b003      	add	sp, #12
 800035a:	bd90      	pop	{r4, r7, pc}
 800035c:	20000000 	.word	0x20000000
 8000360:	200000e0 	.word	0x200000e0
 8000364:	200000b8 	.word	0x200000b8

08000368 <BUTTON_HighLevelManager>:



/******************************************************************************/
void BUTTON_HighLevelManager()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	e049      	b.n	800040a <BUTTON_HighLevelManager+0xa2>
  {
    if (buttonActions[i] == BUTTON_NONE)
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4a28      	ldr	r2, [pc, #160]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d13e      	bne.n	8000400 <BUTTON_HighLevelManager+0x98>
    {
      if (waitButtonRelease[i] == 0)
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4a26      	ldr	r2, [pc, #152]	; (8000420 <BUTTON_HighLevelManager+0xb8>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d10b      	bne.n	80003a6 <BUTTON_HighLevelManager+0x3e>
      {
        if (buttonState[i] == BUTTON_PRESSED)
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4a24      	ldr	r2, [pc, #144]	; (8000424 <BUTTON_HighLevelManager+0xbc>)
 8000394:	5cd3      	ldrb	r3, [r2, r3]
 8000396:	2b03      	cmp	r3, #3
 8000398:	d132      	bne.n	8000400 <BUTTON_HighLevelManager+0x98>
        {
          waitButtonRelease[i] = 1;
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	4a20      	ldr	r2, [pc, #128]	; (8000420 <BUTTON_HighLevelManager+0xb8>)
 80003a0:	2101      	movs	r1, #1
 80003a2:	54d1      	strb	r1, [r2, r3]
 80003a4:	e02c      	b.n	8000400 <BUTTON_HighLevelManager+0x98>
        }
      }
      else
      {
        if (buttonState[i] == BUTTON_NOT_PRESSED)
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <BUTTON_HighLevelManager+0xbc>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d126      	bne.n	8000400 <BUTTON_HighLevelManager+0x98>
        {
          waitButtonRelease[i] = 0;
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <BUTTON_HighLevelManager+0xb8>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	54d1      	strb	r1, [r2, r3]

          if (buttonPressCounter[i] >= BUTTONS_VERY_LONG_PRESS_MS)
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <BUTTON_HighLevelManager+0xc0>)
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	5ad3      	ldrh	r3, [r2, r3]
 80003c6:	4a19      	ldr	r2, [pc, #100]	; (800042c <BUTTON_HighLevelManager+0xc4>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d905      	bls.n	80003d8 <BUTTON_HighLevelManager+0x70>
          {
            buttonActions[i] = BUTTON_VERY_LONG_PRESS;
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 80003d2:	2103      	movs	r1, #3
 80003d4:	54d1      	strb	r1, [r2, r3]
 80003d6:	e013      	b.n	8000400 <BUTTON_HighLevelManager+0x98>
          }
          else
          {
            if (buttonPressCounter[i] >= BUTTONS_LONG_PRESS_MS)
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781a      	ldrb	r2, [r3, #0]
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <BUTTON_HighLevelManager+0xc0>)
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	5ad2      	ldrh	r2, [r2, r3]
 80003e2:	23fa      	movs	r3, #250	; 0xfa
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d305      	bcc.n	80003f6 <BUTTON_HighLevelManager+0x8e>
            {
              buttonActions[i] = BUTTON_LONG_PRESS;
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 80003f0:	2102      	movs	r1, #2
 80003f2:	54d1      	strb	r1, [r2, r3]
 80003f4:	e004      	b.n	8000400 <BUTTON_HighLevelManager+0x98>
            }
            else
            {
              buttonActions[i] = BUTTON_SHORT_PRESS;
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4a08      	ldr	r2, [pc, #32]	; (800041c <BUTTON_HighLevelManager+0xb4>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	3201      	adds	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d9b1      	bls.n	8000376 <BUTTON_HighLevelManager+0xe>
          }
        }
      }
    }
  }
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000d8 	.word	0x200000d8
 8000420:	200000c4 	.word	0x200000c4
 8000424:	200000e0 	.word	0x200000e0
 8000428:	200000cc 	.word	0x200000cc
 800042c:	00000bb7 	.word	0x00000bb7

08000430 <BUTTON_Process>:



/******************************************************************************/
void BUTTON_Process()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  BUTTON_LowLevelManager();
 8000434:	f7ff ff06 	bl	8000244 <BUTTON_LowLevelManager>
  BUTTON_HighLevelManager();
 8000438:	f7ff ff96 	bl	8000368 <BUTTON_HighLevelManager>
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <BUTTON_TimerProcess>:



/******************************************************************************/
void BUTTON_TimerProcess()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800044a:	1dfb      	adds	r3, r7, #7
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	e02c      	b.n	80004ac <BUTTON_TimerProcess+0x68>
  {
    if (debounceCounter[i] < DEBOUNCE_TIME_MS)
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781a      	ldrb	r2, [r3, #0]
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <BUTTON_TimerProcess+0x7c>)
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	5ad3      	ldrh	r3, [r2, r3]
 800045c:	2b63      	cmp	r3, #99	; 0x63
 800045e:	d809      	bhi.n	8000474 <BUTTON_TimerProcess+0x30>
    {
      debounceCounter[i]++;
 8000460:	1dfb      	adds	r3, r7, #7
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <BUTTON_TimerProcess+0x7c>)
 8000466:	0059      	lsls	r1, r3, #1
 8000468:	5a8a      	ldrh	r2, [r1, r2]
 800046a:	3201      	adds	r2, #1
 800046c:	b291      	uxth	r1, r2
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <BUTTON_TimerProcess+0x7c>)
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	5299      	strh	r1, [r3, r2]
    }

    if (waitButtonRelease[i] == 1)
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <BUTTON_TimerProcess+0x80>)
 800047a:	5cd3      	ldrb	r3, [r2, r3]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10a      	bne.n	8000496 <BUTTON_TimerProcess+0x52>
    {
      buttonPressCounter[i]++;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <BUTTON_TimerProcess+0x84>)
 8000486:	0059      	lsls	r1, r3, #1
 8000488:	5a8a      	ldrh	r2, [r1, r2]
 800048a:	3201      	adds	r2, #1
 800048c:	b291      	uxth	r1, r2
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <BUTTON_TimerProcess+0x84>)
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	5299      	strh	r1, [r3, r2]
 8000494:	e005      	b.n	80004a2 <BUTTON_TimerProcess+0x5e>
    }
    else
    {
      buttonPressCounter[i] = 0;
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	781a      	ldrb	r2, [r3, #0]
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <BUTTON_TimerProcess+0x84>)
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	2100      	movs	r1, #0
 80004a0:	52d1      	strh	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	3201      	adds	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d9ce      	bls.n	8000452 <BUTTON_TimerProcess+0xe>
    }
  }
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200000b8 	.word	0x200000b8
 80004c4:	200000c4 	.word	0x200000c4
 80004c8:	200000cc 	.word	0x200000cc

080004cc <BUTTON_GetAction>:



/******************************************************************************/
ButtonAction BUTTON_GetAction(uint8_t index)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
  return buttonActions[index];
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <BUTTON_GetAction+0x1c>)
 80004de:	5cd3      	ldrb	r3, [r2, r3]
}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000d8 	.word	0x200000d8

080004ec <lcd1602_Send_init_Data>:
char tx_buffer_lcd[40] = {0, };
uint8_t global_buffer = 0;

/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]
	if (backlight) {
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <lcd1602_Send_init_Data+0x80>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2208      	movs	r2, #8
 8000502:	4313      	orrs	r3, r2
 8000504:	b2da      	uxtb	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e006      	b.n	800051a <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2208      	movs	r2, #8
 8000512:	4393      	bics	r3, r2
 8000514:	b2da      	uxtb	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2204      	movs	r2, #4
 8000520:	4313      	orrs	r3, r2
 8000522:	b2da      	uxtb	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4811      	ldr	r0, [pc, #68]	; (8000570 <lcd1602_Send_init_Data+0x84>)
 800052c:	230a      	movs	r3, #10
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	214e      	movs	r1, #78	; 0x4e
 8000534:	f000 ff78 	bl	8001428 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000538:	2005      	movs	r0, #5
 800053a:	f000 fc57 	bl	8000dec <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2204      	movs	r2, #4
 8000544:	4393      	bics	r3, r2
 8000546:	b2da      	uxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <lcd1602_Send_init_Data+0x84>)
 8000550:	230a      	movs	r3, #10
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	214e      	movs	r1, #78	; 0x4e
 8000558:	f000 ff66 	bl	8001428 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800055c:	2005      	movs	r0, #5
 800055e:	f000 fc45 	bl	8000dec <HAL_Delay>
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000028 	.word	0x20000028
 8000570:	20000110 	.word	0x20000110

08000574 <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	if (backlight) {
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <lcd1602_Send_data+0x74>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d007      	beq.n	8000594 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2208      	movs	r2, #8
 800058a:	4313      	orrs	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e006      	b.n	80005a2 <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2208      	movs	r2, #8
 800059a:	4393      	bics	r3, r2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2204      	movs	r2, #4
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <lcd1602_Send_data+0x78>)
 80005b4:	230a      	movs	r3, #10
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	214e      	movs	r1, #78	; 0x4e
 80005bc:	f000 ff34 	bl	8001428 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2204      	movs	r2, #4
 80005c6:	4393      	bics	r3, r2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <lcd1602_Send_data+0x78>)
 80005d2:	230a      	movs	r3, #10
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	214e      	movs	r1, #78	; 0x4e
 80005da:	f000 ff25 	bl	8001428 <HAL_I2C_Master_Transmit>
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	20000028 	.word	0x20000028
 80005ec:	20000110 	.word	0x20000110

080005f0 <lcd1602_Init>:

void lcd1602_Init(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	2230      	movs	r2, #48	; 0x30
 80005fa:	701a      	strb	r2, [r3, #0]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 80005fc:	200f      	movs	r0, #15
 80005fe:	f000 fbf5 	bl	8000dec <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff71 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 800060a:	2005      	movs	r0, #5
 800060c:	f000 fbee 	bl	8000dec <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff6a 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fbe7 	bl	8000dec <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff ff63 	bl	80004ec <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	2220      	movs	r2, #32
 800062a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff ff5c 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2220      	movs	r2, #32
 8000638:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff ff55 	bl	80004ec <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff4e 	bl	80004ec <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff47 	bl	80004ec <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff40 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff39 	bl	80004ec <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	2210      	movs	r2, #16
 800067e:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff32 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ff2b 	bl	80004ec <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	2230      	movs	r2, #48	; 0x30
 800069a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff24 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff ff1d 	bl	80004ec <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	22c0      	movs	r2, #192	; 0xc0
 80006b6:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ff16 	bl	80004ec <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd1602_Print_symbol>:

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0002      	movs	r2, r0
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	701a      	strb	r2, [r3, #0]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	220f      	movs	r2, #15
 80006dc:	4393      	bics	r3, r2
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	2209      	movs	r2, #9
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	240f      	movs	r4, #15
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff3f 	bl	8000574 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	2209      	movs	r2, #9
 8000700:	4313      	orrs	r3, r2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	b2da      	uxtb	r2, r3
 8000706:	193b      	adds	r3, r7, r4
 8000708:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 800070a:	193b      	adds	r3, r7, r4
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff ff31 	bl	8000574 <lcd1602_Send_data>
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b005      	add	sp, #20
 8000718:	bd90      	pop	{r4, r7, pc}

0800071a <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e009      	b.n	800073c <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff ffc9 	bl	80006c8 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fce2 	bl	8000108 <strlen>
 8000744:	0002      	movs	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8ed      	bhi.n	8000728 <lcd1602_Print_text+0xe>
	}
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}

08000756 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000756:	b5b0      	push	{r4, r5, r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	0002      	movs	r2, r0
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	1c0a      	adds	r2, r1, #0
 8000766:	701a      	strb	r2, [r3, #0]
	uint8_t command, adr;
	if (y > 3)
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d902      	bls.n	8000776 <lcd1602_SetCursor+0x20>
		y = 3;
 8000770:	1dbb      	adds	r3, r7, #6
 8000772:	2203      	movs	r2, #3
 8000774:	701a      	strb	r2, [r3, #0]
	if (x > 39)
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b27      	cmp	r3, #39	; 0x27
 800077c:	d902      	bls.n	8000784 <lcd1602_SetCursor+0x2e>
		x = 39;
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2227      	movs	r2, #39	; 0x27
 8000782:	701a      	strb	r2, [r3, #0]
	if (y == 0) {
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d104      	bne.n	8000796 <lcd1602_SetCursor+0x40>
		adr = x;
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	1dfa      	adds	r2, r7, #7
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	}
	if (y == 1) {
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d105      	bne.n	80007aa <lcd1602_SetCursor+0x54>
		adr = x + 0x40;
 800079e:	230f      	movs	r3, #15
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	1dfa      	adds	r2, r7, #7
 80007a4:	7812      	ldrb	r2, [r2, #0]
 80007a6:	3240      	adds	r2, #64	; 0x40
 80007a8:	701a      	strb	r2, [r3, #0]
	}
	if (y == 2) {
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d105      	bne.n	80007be <lcd1602_SetCursor+0x68>
		adr = x + 0x14;
 80007b2:	230f      	movs	r3, #15
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	1dfa      	adds	r2, r7, #7
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	3214      	adds	r2, #20
 80007bc:	701a      	strb	r2, [r3, #0]
	}
	if (y == 3) {
 80007be:	1dbb      	adds	r3, r7, #6
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d105      	bne.n	80007d2 <lcd1602_SetCursor+0x7c>
		adr = x + 0x54;
 80007c6:	230f      	movs	r3, #15
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	1dfa      	adds	r2, r7, #7
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	3254      	adds	r2, #84	; 0x54
 80007d0:	701a      	strb	r2, [r3, #0]
	}
	command = ((adr & 0xf0) | 0x80);
 80007d2:	250f      	movs	r5, #15
 80007d4:	197b      	adds	r3, r7, r5
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	2270      	movs	r2, #112	; 0x70
 80007dc:	4013      	ands	r3, r2
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4252      	negs	r2, r2
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	240e      	movs	r4, #14
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff febe 	bl	8000574 <lcd1602_Send_data>

	command = (adr << 4);
 80007f8:	197b      	adds	r3, r7, r5
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	193b      	adds	r3, r7, r4
 8000802:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff feb4 	bl	8000574 <lcd1602_Send_data>

}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bdb0      	pop	{r4, r5, r7, pc}

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 fa84 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f826 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f000 f8e4 	bl	80009ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000824:	f000 f87a 	bl	800091c <MX_I2C1_Init>
  MX_TIM16_Init();
 8000828:	f000 f8b8 	bl	800099c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  lcd1602_Init();
 800082c:	f7ff fee0 	bl	80005f0 <lcd1602_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <main+0x4c>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fe8e 	bl	8002554 <HAL_TIM_Base_Start_IT>
  lcd1602_SetCursor(0, 0);
 8000838:	2100      	movs	r1, #0
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff8b 	bl	8000756 <lcd1602_SetCursor>
  sprintf(tx_buffer_lcd, "Goog job dude!   ");
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <main+0x50>)
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <main+0x54>)
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f002 f8be 	bl	80029c8 <siprintf>
  lcd1602_Print_text(tx_buffer_lcd);
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <main+0x54>)
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff ff63 	bl	800071a <lcd1602_Print_text>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BUTTON_Process();
 8000854:	f7ff fdec 	bl	8000430 <BUTTON_Process>
	  Button_Processing();
 8000858:	f000 f914 	bl	8000a84 <Button_Processing>
	  BUTTON_Process();
 800085c:	e7fa      	b.n	8000854 <main+0x40>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000015c 	.word	0x2000015c
 8000864:	080032b4 	.word	0x080032b4
 8000868:	200000e8 	.word	0x200000e8

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b095      	sub	sp, #84	; 0x54
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	2420      	movs	r4, #32
 8000874:	193b      	adds	r3, r7, r4
 8000876:	0018      	movs	r0, r3
 8000878:	2330      	movs	r3, #48	; 0x30
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f002 f89b 	bl	80029b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000882:	2310      	movs	r3, #16
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f002 f893 	bl	80029b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	2310      	movs	r3, #16
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 f88c 	bl	80029b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	0021      	movs	r1, r4
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2210      	movs	r2, #16
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 f8df 	bl	8001a80 <HAL_RCC_OscConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008c6:	f000 f903 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	2110      	movs	r1, #16
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2207      	movs	r2, #7
 80008d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2100      	movs	r1, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fbe3 	bl	80020b4 <HAL_RCC_ClockConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008f2:	f000 f8ed 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2220      	movs	r2, #32
 80008fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008fc:	003b      	movs	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	003b      	movs	r3, r7
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fd07 	bl	8002318 <HAL_RCCEx_PeriphCLKConfig>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800090e:	f000 f8df 	bl	8000ad0 <Error_Handler>
  }
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b015      	add	sp, #84	; 0x54
 8000918:	bd90      	pop	{r4, r7, pc}
	...

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C1_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C1_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C1_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_I2C1_Init+0x74>)
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fccf 	bl	80012fc <HAL_I2C_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 f8b5 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_I2C1_Init+0x74>)
 8000968:	2100      	movs	r1, #0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fff0 	bl	8001950 <HAL_I2CEx_ConfigAnalogFilter>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 f8ac 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_I2C1_Init+0x74>)
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f833 	bl	80019e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f8a3 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000110 	.word	0x20000110
 8000994:	40005400 	.word	0x40005400
 8000998:	2000090e 	.word	0x2000090e

0800099c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <MX_TIM16_Init+0x48>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009a8:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <MX_TIM16_Init+0x4c>)
 80009aa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009b4:	220a      	movs	r2, #10
 80009b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_TIM16_Init+0x44>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fd71 	bl	80024b4 <HAL_TIM_Base_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80009d6:	f000 f87b 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000015c 	.word	0x2000015c
 80009e4:	40014400 	.word	0x40014400
 80009e8:	000012bf 	.word	0x000012bf

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	240c      	movs	r4, #12
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2314      	movs	r3, #20
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f001 ffdb 	bl	80029b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	03c9      	lsls	r1, r1, #15
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	03db      	lsls	r3, r3, #15
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0289      	lsls	r1, r1, #10
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	4013      	ands	r3, r2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	02c9      	lsls	r1, r1, #11
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	02db      	lsls	r3, r3, #11
 8000a50:	4013      	ands	r3, r2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_DOWN_Pin BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_DOWN_Pin|BUTTON_ENTER_Pin;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2238      	movs	r2, #56	; 0x38
 8000a5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <MX_GPIO_Init+0x94>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 fabe 	bl	8000ff0 <HAL_GPIO_Init>

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b009      	add	sp, #36	; 0x24
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400

08000a84 <Button_Processing>:

/* USER CODE BEGIN 4 */
void Button_Processing(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	if(BUTTON_GetAction(BUTTON_LEFT)){
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fd1f 	bl	80004cc <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_RIGHT)){
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f7ff fd1c 	bl	80004cc <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_UP)){
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff fd19 	bl	80004cc <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_DOWN)){
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fd16 	bl	80004cc <BUTTON_GetAction>

	}
	if(BUTTON_GetAction(BUTTON_ENTER) == BUTTON_VERY_LONG_PRESS){
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f7ff fd13 	bl	80004cc <BUTTON_GetAction>

	}

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim16.Instance){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d101      	bne.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x18>
		BUTTON_TimerProcess();
 8000ac0:	f7ff fcc0 	bl	8000444 <BUTTON_TimerProcess>
	}
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000015c 	.word	0x2000015c

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	699a      	ldr	r2, [r3, #24]
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	619a      	str	r2, [r3, #24]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	69da      	ldr	r2, [r3, #28]
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0549      	lsls	r1, r1, #21
 8000b04:	430a      	orrs	r2, r1
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_MspInit+0x44>)
 8000b0a:	69da      	ldr	r2, [r3, #28]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	055b      	lsls	r3, r3, #21
 8000b10:	4013      	ands	r3, r2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	2414      	movs	r4, #20
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	0018      	movs	r0, r3
 8000b32:	2314      	movs	r3, #20
 8000b34:	001a      	movs	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	f001 ff3e 	bl	80029b8 <memset>
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_I2C_MspInit+0x90>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d131      	bne.n	8000baa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	02c9      	lsls	r1, r1, #11
 8000b50:	430a      	orrs	r2, r1
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	02db      	lsls	r3, r3, #11
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b62:	0021      	movs	r1, r4
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	22c0      	movs	r2, #192	; 0xc0
 8000b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2212      	movs	r2, #18
 8000b6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2201      	movs	r2, #1
 8000b80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_I2C_MspInit+0x98>)
 8000b86:	0019      	movs	r1, r3
 8000b88:	0010      	movs	r0, r2
 8000b8a:	f000 fa31 	bl	8000ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b90:	69da      	ldr	r2, [r3, #28]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0389      	lsls	r1, r1, #14
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	61da      	str	r2, [r3, #28]
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b9e:	69da      	ldr	r2, [r3, #28]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	039b      	lsls	r3, r3, #14
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b00b      	add	sp, #44	; 0x2c
 8000bb0:	bd90      	pop	{r4, r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_TIM_Base_MspInit+0x48>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d115      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_TIM_Base_MspInit+0x4c>)
 8000bd4:	699a      	ldr	r2, [r3, #24]
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_TIM_Base_MspInit+0x4c>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0289      	lsls	r1, r1, #10
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	619a      	str	r2, [r3, #24]
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_TIM_Base_MspInit+0x4c>)
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2015      	movs	r0, #21
 8000bf4:	f000 f9ca 	bl	8000f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000bf8:	2015      	movs	r0, #21
 8000bfa:	f000 f9dc 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40014400 	.word	0x40014400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f8be 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <TIM16_IRQHandler+0x14>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fcd0 	bl	80025ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000015c 	.word	0x2000015c

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f001 fe6c 	bl	8002964 <__errno>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	425b      	negs	r3, r3
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	18d2      	adds	r2, r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b006      	add	sp, #24
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20001000 	.word	0x20001000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	200001a4 	.word	0x200001a4
 8000cc0:	200001c0 	.word	0x200001c0

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cfa:	f7ff ffe3 	bl	8000cc4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f001 fe37 	bl	8002970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fd87 	bl	8000814 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000d14:	08003334 	.word	0x08003334
  ldr r2, =_sbss
 8000d18:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000d1c:	200001bc 	.word	0x200001bc

08000d20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_IRQHandler>
	...

08000d24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_Init+0x24>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_Init+0x24>)
 8000d2e:	2110      	movs	r1, #16
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f809 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3a:	f7ff fecf 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	; 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9e3 	bl	800012c <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9de 	bl	800012c <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e00f      	b.n	8000da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80b      	bhi.n	8000d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f8fc 	bl	8000f8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_InitTick+0x64>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	2000002c 	.word	0x2000002c
 8000dac:	20000034 	.word	0x20000034
 8000db0:	20000030 	.word	0x20000030

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000034 	.word	0x20000034
 8000dd4:	200001a8 	.word	0x200001a8

08000dd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	200001a8 	.word	0x200001a8

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	f7ff ffe0 	bl	8000dd8 <HAL_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000034 	.word	0x20000034

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b7f      	cmp	r3, #127	; 0x7f
 8000e46:	d809      	bhi.n	8000e5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	231f      	movs	r3, #31
 8000e50:	401a      	ands	r2, r3
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_EnableIRQ+0x30>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	4091      	lsls	r1, r2
 8000e58:	000a      	movs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
  }
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7c:	d828      	bhi.n	8000ed0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <__NVIC_SetPriority+0xd4>)
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	33c0      	adds	r3, #192	; 0xc0
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	589b      	ldr	r3, [r3, r2]
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	0011      	movs	r1, r2
 8000e94:	2203      	movs	r2, #3
 8000e96:	400a      	ands	r2, r1
 8000e98:	00d2      	lsls	r2, r2, #3
 8000e9a:	21ff      	movs	r1, #255	; 0xff
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	401a      	ands	r2, r3
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <__NVIC_SetPriority+0xd4>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	33c0      	adds	r3, #192	; 0xc0
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ece:	e031      	b.n	8000f34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <__NVIC_SetPriority+0xd8>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	230f      	movs	r3, #15
 8000eda:	400b      	ands	r3, r1
 8000edc:	3b08      	subs	r3, #8
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3306      	adds	r3, #6
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	18d3      	adds	r3, r2, r3
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1dfa      	adds	r2, r7, #7
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	43d2      	mvns	r2, r2
 8000efe:	401a      	ands	r2, r3
 8000f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	22ff      	movs	r2, #255	; 0xff
 8000f08:	401a      	ands	r2, r3
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2303      	movs	r3, #3
 8000f12:	4003      	ands	r3, r0
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <__NVIC_SetPriority+0xd8>)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	001c      	movs	r4, r3
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	3b08      	subs	r3, #8
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	3306      	adds	r3, #6
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	18c3      	adds	r3, r0, r3
 8000f30:	3304      	adds	r3, #4
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b003      	add	sp, #12
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	045b      	lsls	r3, r3, #17
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d301      	bcc.n	8000f5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e010      	b.n	8000f7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <SysTick_Config+0x44>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	3a01      	subs	r2, #1
 8000f62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f64:	2301      	movs	r3, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	2103      	movs	r1, #3
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ff7c 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x44>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x44>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	210f      	movs	r1, #15
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	1c02      	adds	r2, r0, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff ff33 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ffaf 	bl	8000f44 <SysTick_Config>
 8000fe6:	0003      	movs	r3, r0
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	e149      	b.n	8001294 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4091      	lsls	r1, r2
 800100a:	000a      	movs	r2, r1
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x28>
 8001016:	e13a      	b.n	800128e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2203      	movs	r2, #3
 800101e:	4013      	ands	r3, r2
 8001020:	2b01      	cmp	r3, #1
 8001022:	d005      	beq.n	8001030 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800102c:	2b02      	cmp	r3, #2
 800102e:	d130      	bne.n	8001092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	409a      	lsls	r2, r3
 8001052:	0013      	movs	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001066:	2201      	movs	r2, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	2201      	movs	r2, #1
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2203      	movs	r2, #3
 8001098:	4013      	ands	r3, r2
 800109a:	2b03      	cmp	r3, #3
 800109c:	d017      	beq.n	80010ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d123      	bne.n	8001122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	58d3      	ldr	r3, [r2, r3]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2207      	movs	r2, #7
 80010ec:	4013      	ands	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2107      	movs	r1, #7
 8001106:	400b      	ands	r3, r1
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	6939      	ldr	r1, [r7, #16]
 8001120:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2203      	movs	r2, #3
 8001140:	401a      	ands	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	23c0      	movs	r3, #192	; 0xc0
 800115c:	029b      	lsls	r3, r3, #10
 800115e:	4013      	ands	r3, r2
 8001160:	d100      	bne.n	8001164 <HAL_GPIO_Init+0x174>
 8001162:	e094      	b.n	800128e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	4b51      	ldr	r3, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x2bc>)
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x2bc>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <HAL_GPIO_Init+0x2bc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117c:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <HAL_GPIO_Init+0x2c0>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	589b      	ldr	r3, [r3, r2]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2203      	movs	r2, #3
 800118e:	4013      	ands	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	2390      	movs	r3, #144	; 0x90
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x1d6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a41      	ldr	r2, [pc, #260]	; (80012b4 <HAL_GPIO_Init+0x2c4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x1d2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a40      	ldr	r2, [pc, #256]	; (80012b8 <HAL_GPIO_Init+0x2c8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x1ce>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x1d8>
 80011be:	2305      	movs	r3, #5
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x1d8>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x1d8>
 80011c6:	2300      	movs	r3, #0
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	2103      	movs	r1, #3
 80011cc:	400a      	ands	r2, r1
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	; (80012b0 <HAL_GPIO_Init+0x2c0>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	4013      	ands	r3, r2
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	035b      	lsls	r3, r3, #13
 8001252:	4013      	ands	r3, r2
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	039b      	lsls	r3, r3, #14
 800127c:	4013      	ands	r3, r2
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	40da      	lsrs	r2, r3
 800129c:	1e13      	subs	r3, r2, #0
 800129e:	d000      	beq.n	80012a2 <HAL_GPIO_Init+0x2b2>
 80012a0:	e6ae      	b.n	8001000 <HAL_GPIO_Init+0x10>
  } 
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b006      	add	sp, #24
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000800 	.word	0x48000800
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	000a      	movs	r2, r1
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	1cba      	adds	r2, r7, #2
 80012d4:	8812      	ldrh	r2, [r2, #0]
 80012d6:	4013      	ands	r3, r2
 80012d8:	d004      	beq.n	80012e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012da:	230f      	movs	r3, #15
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e003      	b.n	80012ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e4:	230f      	movs	r3, #15
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	781b      	ldrb	r3, [r3, #0]
  }
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e082      	b.n	8001414 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2241      	movs	r2, #65	; 0x41
 8001312:	5c9b      	ldrb	r3, [r3, r2]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d107      	bne.n	800132a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2240      	movs	r2, #64	; 0x40
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fbfd 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2241      	movs	r2, #65	; 0x41
 800132e:	2124      	movs	r1, #36	; 0x24
 8001330:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	438a      	bics	r2, r1
 8001340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4934      	ldr	r1, [pc, #208]	; (800141c <HAL_I2C_Init+0x120>)
 800134c:	400a      	ands	r2, r1
 800134e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4931      	ldr	r1, [pc, #196]	; (8001420 <HAL_I2C_Init+0x124>)
 800135c:	400a      	ands	r2, r1
 800135e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0209      	lsls	r1, r1, #8
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	e007      	b.n	800138a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2184      	movs	r1, #132	; 0x84
 8001384:	0209      	lsls	r1, r1, #8
 8001386:	430a      	orrs	r2, r1
 8001388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d104      	bne.n	800139c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	491f      	ldr	r1, [pc, #124]	; (8001424 <HAL_I2C_Init+0x128>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	491a      	ldr	r1, [pc, #104]	; (8001420 <HAL_I2C_Init+0x124>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69d9      	ldr	r1, [r3, #28]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2241      	movs	r2, #65	; 0x41
 8001400:	2120      	movs	r1, #32
 8001402:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2242      	movs	r2, #66	; 0x42
 800140e:	2100      	movs	r1, #0
 8001410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}
 800141c:	f0ffffff 	.word	0xf0ffffff
 8001420:	ffff7fff 	.word	0xffff7fff
 8001424:	02008000 	.word	0x02008000

08001428 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	0008      	movs	r0, r1
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	0019      	movs	r1, r3
 8001436:	230a      	movs	r3, #10
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	2308      	movs	r3, #8
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	1c0a      	adds	r2, r1, #0
 8001444:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2241      	movs	r2, #65	; 0x41
 800144a:	5c9b      	ldrb	r3, [r3, r2]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b20      	cmp	r3, #32
 8001450:	d000      	beq.n	8001454 <HAL_I2C_Master_Transmit+0x2c>
 8001452:	e0e7      	b.n	8001624 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	5c9b      	ldrb	r3, [r3, r2]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_I2C_Master_Transmit+0x3a>
 800145e:	2302      	movs	r3, #2
 8001460:	e0e1      	b.n	8001626 <HAL_I2C_Master_Transmit+0x1fe>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2240      	movs	r2, #64	; 0x40
 8001466:	2101      	movs	r1, #1
 8001468:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800146a:	f7ff fcb5 	bl	8000dd8 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	0219      	lsls	r1, r3, #8
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2319      	movs	r3, #25
 800147e:	2201      	movs	r2, #1
 8001480:	f000 f8fc 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cc      	b.n	8001626 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2241      	movs	r2, #65	; 0x41
 8001490:	2121      	movs	r1, #33	; 0x21
 8001492:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2242      	movs	r2, #66	; 0x42
 8001498:	2110      	movs	r1, #16
 800149a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2208      	movs	r2, #8
 80014ac:	18ba      	adds	r2, r7, r2
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2bff      	cmp	r3, #255	; 0xff
 80014c0:	d911      	bls.n	80014e6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	045c      	lsls	r4, r3, #17
 80014d2:	230a      	movs	r3, #10
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	8819      	ldrh	r1, [r3, #0]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	4b55      	ldr	r3, [pc, #340]	; (8001630 <HAL_I2C_Master_Transmit+0x208>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	0023      	movs	r3, r4
 80014e0:	f000 fa00 	bl	80018e4 <I2C_TransferConfig>
 80014e4:	e075      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	049c      	lsls	r4, r3, #18
 80014fa:	230a      	movs	r3, #10
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	8819      	ldrh	r1, [r3, #0]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <HAL_I2C_Master_Transmit+0x208>)
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	0023      	movs	r3, r4
 8001508:	f000 f9ec 	bl	80018e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800150c:	e061      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	0018      	movs	r0, r3
 8001516:	f000 f8f0 	bl	80016fa <I2C_WaitOnTXISFlagUntilTimeout>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e081      	b.n	8001626 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153c:	b29b      	uxth	r3, r3
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154a:	3b01      	subs	r3, #1
 800154c:	b29a      	uxth	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001556:	b29b      	uxth	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d03a      	beq.n	80015d2 <HAL_I2C_Master_Transmit+0x1aa>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d136      	bne.n	80015d2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	0013      	movs	r3, r2
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	f000 f883 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e053      	b.n	8001626 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d911      	bls.n	80015ac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	22ff      	movs	r2, #255	; 0xff
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001592:	b2da      	uxtb	r2, r3
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	045c      	lsls	r4, r3, #17
 8001598:	230a      	movs	r3, #10
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	8819      	ldrh	r1, [r3, #0]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	2300      	movs	r3, #0
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	0023      	movs	r3, r4
 80015a6:	f000 f99d 	bl	80018e4 <I2C_TransferConfig>
 80015aa:	e012      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	049c      	lsls	r4, r3, #18
 80015c0:	230a      	movs	r3, #10
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	8819      	ldrh	r1, [r3, #0]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	0023      	movs	r3, r4
 80015ce:	f000 f989 	bl	80018e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d198      	bne.n	800150e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f8c8 	bl	8001778 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e01a      	b.n	8001626 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2220      	movs	r2, #32
 80015f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	490c      	ldr	r1, [pc, #48]	; (8001634 <HAL_I2C_Master_Transmit+0x20c>)
 8001604:	400a      	ands	r2, r1
 8001606:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2241      	movs	r2, #65	; 0x41
 800160c:	2120      	movs	r1, #32
 800160e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2242      	movs	r2, #66	; 0x42
 8001614:	2100      	movs	r1, #0
 8001616:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	e000      	b.n	8001626 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001624:	2302      	movs	r3, #2
  }
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b007      	add	sp, #28
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	80002000 	.word	0x80002000
 8001634:	fe00e800 	.word	0xfe00e800

08001638 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	2b02      	cmp	r3, #2
 800164c:	d103      	bne.n	8001656 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2201      	movs	r2, #1
 800165e:	4013      	ands	r3, r2
 8001660:	2b01      	cmp	r3, #1
 8001662:	d007      	beq.n	8001674 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	619a      	str	r2, [r3, #24]
  }
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800168c:	e021      	b.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	d01e      	beq.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001694:	f7ff fba0 	bl	8000dd8 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d302      	bcc.n	80016aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d113      	bne.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	2220      	movs	r2, #32
 80016b0:	431a      	orrs	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2241      	movs	r2, #65	; 0x41
 80016ba:	2120      	movs	r1, #32
 80016bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2242      	movs	r2, #66	; 0x42
 80016c2:	2100      	movs	r1, #0
 80016c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	4013      	ands	r3, r2
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	425a      	negs	r2, r3
 80016e2:	4153      	adcs	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	001a      	movs	r2, r3
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d0ce      	beq.n	800168e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bd80      	pop	{r7, pc}

080016fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001706:	e02b      	b.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	0018      	movs	r0, r3
 8001710:	f000 f86e 	bl	80017f0 <I2C_IsAcknowledgeFailed>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e029      	b.n	8001770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3301      	adds	r3, #1
 8001720:	d01e      	beq.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001722:	f7ff fb59 	bl	8000dd8 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	429a      	cmp	r2, r3
 8001730:	d302      	bcc.n	8001738 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d113      	bne.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	2220      	movs	r2, #32
 800173e:	431a      	orrs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2241      	movs	r2, #65	; 0x41
 8001748:	2120      	movs	r1, #32
 800174a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2242      	movs	r2, #66	; 0x42
 8001750:	2100      	movs	r1, #0
 8001752:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	2100      	movs	r1, #0
 800175a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e007      	b.n	8001770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d1cc      	bne.n	8001708 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b004      	add	sp, #16
 8001776:	bd80      	pop	{r7, pc}

08001778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001784:	e028      	b.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	0018      	movs	r0, r3
 800178e:	f000 f82f 	bl	80017f0 <I2C_IsAcknowledgeFailed>
 8001792:	1e03      	subs	r3, r0, #0
 8001794:	d001      	beq.n	800179a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e026      	b.n	80017e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff fb1d 	bl	8000dd8 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d113      	bne.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2241      	movs	r2, #65	; 0x41
 80017c0:	2120      	movs	r1, #32
 80017c2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2242      	movs	r2, #66	; 0x42
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e007      	b.n	80017e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2220      	movs	r2, #32
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d1cf      	bne.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2210      	movs	r2, #16
 8001804:	4013      	ands	r3, r2
 8001806:	2b10      	cmp	r3, #16
 8001808:	d164      	bne.n	80018d4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	049b      	lsls	r3, r3, #18
 8001814:	401a      	ands	r2, r3
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	049b      	lsls	r3, r3, #18
 800181a:	429a      	cmp	r2, r3
 800181c:	d02b      	beq.n	8001876 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	01c9      	lsls	r1, r1, #7
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001830:	e021      	b.n	8001876 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	d01e      	beq.n	8001876 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001838:	f7ff face 	bl	8000dd8 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	429a      	cmp	r2, r3
 8001846:	d302      	bcc.n	800184e <I2C_IsAcknowledgeFailed+0x5e>
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d113      	bne.n	8001876 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	2220      	movs	r2, #32
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2241      	movs	r2, #65	; 0x41
 800185e:	2120      	movs	r1, #32
 8001860:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2242      	movs	r2, #66	; 0x42
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e02f      	b.n	80018d6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2220      	movs	r2, #32
 800187e:	4013      	ands	r3, r2
 8001880:	2b20      	cmp	r3, #32
 8001882:	d1d6      	bne.n	8001832 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2220      	movs	r2, #32
 8001892:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff fece 	bl	8001638 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <I2C_IsAcknowledgeFailed+0xf0>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	2204      	movs	r2, #4
 80018b2:	431a      	orrs	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2241      	movs	r2, #65	; 0x41
 80018bc:	2120      	movs	r1, #32
 80018be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2242      	movs	r2, #66	; 0x42
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	2100      	movs	r1, #0
 80018ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	fe00e800 	.word	0xfe00e800

080018e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	0008      	movs	r0, r1
 80018ee:	0011      	movs	r1, r2
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	240a      	movs	r4, #10
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	1c02      	adds	r2, r0, #0
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	2009      	movs	r0, #9
 80018fc:	183b      	adds	r3, r7, r0
 80018fe:	1c0a      	adds	r2, r1, #0
 8001900:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	0d51      	lsrs	r1, r2, #21
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	00d2      	lsls	r2, r2, #3
 8001910:	400a      	ands	r2, r1
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <I2C_TransferConfig+0x68>)
 8001914:	430a      	orrs	r2, r1
 8001916:	43d2      	mvns	r2, r2
 8001918:	401a      	ands	r2, r3
 800191a:	0011      	movs	r1, r2
 800191c:	193b      	adds	r3, r7, r4
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	059b      	lsls	r3, r3, #22
 8001922:	0d9a      	lsrs	r2, r3, #22
 8001924:	183b      	adds	r3, r7, r0
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	0418      	lsls	r0, r3, #16
 800192a:	23ff      	movs	r3, #255	; 0xff
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	4003      	ands	r3, r0
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	431a      	orrs	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b005      	add	sp, #20
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	03ff63ff 	.word	0x03ff63ff

08001950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2241      	movs	r2, #65	; 0x41
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	d138      	bne.n	80019d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2240      	movs	r2, #64	; 0x40
 800196a:	5c9b      	ldrb	r3, [r3, r2]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001970:	2302      	movs	r3, #2
 8001972:	e032      	b.n	80019da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2240      	movs	r2, #64	; 0x40
 8001978:	2101      	movs	r1, #1
 800197a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	2124      	movs	r1, #36	; 0x24
 8001982:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	438a      	bics	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4911      	ldr	r1, [pc, #68]	; (80019e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2241      	movs	r2, #65	; 0x41
 80019c8:	2120      	movs	r1, #32
 80019ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	2100      	movs	r1, #0
 80019d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	ffffefff 	.word	0xffffefff

080019e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2241      	movs	r2, #65	; 0x41
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d139      	bne.n	8001a72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e033      	b.n	8001a74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	2101      	movs	r1, #1
 8001a12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2241      	movs	r2, #65	; 0x41
 8001a18:	2124      	movs	r1, #36	; 0x24
 8001a1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2101      	movs	r1, #1
 8001a28:	438a      	bics	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2241      	movs	r2, #65	; 0x41
 8001a62:	2120      	movs	r1, #32
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2240      	movs	r2, #64	; 0x40
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	fffff0ff 	.word	0xfffff0ff

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e301      	b.n	8002096 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1e>
 8001a9c:	e08d      	b.n	8001bba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a9e:	4bc3      	ldr	r3, [pc, #780]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aaa:	4bc0      	ldr	r3, [pc, #768]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	220c      	movs	r2, #12
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x64>
 8001ab6:	4bbd      	ldr	r3, [pc, #756]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	401a      	ands	r2, r3
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4bb8      	ldr	r3, [pc, #736]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x56>
 8001ad4:	e070      	b.n	8001bb8 <HAL_RCC_OscConfig+0x138>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d000      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x60>
 8001ade:	e06b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e2d8      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x7c>
 8001aec:	4baf      	ldr	r3, [pc, #700]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4bae      	ldr	r3, [pc, #696]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0249      	lsls	r1, r1, #9
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e02f      	b.n	8001b5c <HAL_RCC_OscConfig+0xdc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x9e>
 8001b04:	4ba9      	ldr	r3, [pc, #676]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4ba8      	ldr	r3, [pc, #672]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	49a9      	ldr	r1, [pc, #676]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	4ba6      	ldr	r3, [pc, #664]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4ba5      	ldr	r3, [pc, #660]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b16:	49a7      	ldr	r1, [pc, #668]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e01e      	b.n	8001b5c <HAL_RCC_OscConfig+0xdc>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0xc4>
 8001b26:	4ba1      	ldr	r3, [pc, #644]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	02c9      	lsls	r1, r1, #11
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b9c      	ldr	r3, [pc, #624]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0249      	lsls	r1, r1, #9
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xdc>
 8001b44:	4b99      	ldr	r3, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b98      	ldr	r3, [pc, #608]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	4999      	ldr	r1, [pc, #612]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b96      	ldr	r3, [pc, #600]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b95      	ldr	r3, [pc, #596]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b56:	4997      	ldr	r1, [pc, #604]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d014      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f938 	bl	8000dd8 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f933 	bl	8000dd8 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	; 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e28a      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b80:	4b8a      	ldr	r3, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0xee>
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f923 	bl	8000dd8 <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff f91e 	bl	8000dd8 <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e275      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	029b      	lsls	r3, r3, #10
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x118>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x146>
 8001bc4:	e069      	b.n	8001c9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc6:	4b79      	ldr	r3, [pc, #484]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d00b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bd0:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d11c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x196>
 8001bdc:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	4013      	ands	r3, r2
 8001be6:	d116      	bne.n	8001c16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be8:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e24b      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	22f8      	movs	r2, #248	; 0xf8
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	00da      	lsls	r2, r3, #3
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c14:	e041      	b.n	8001c9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff f8d5 	bl	8000dd8 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f8d0 	bl	8000dd8 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e227      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f1      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	22f8      	movs	r2, #248	; 0xf8
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00da      	lsls	r2, r3, #3
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff f8b0 	bl	8000dd8 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f8ab 	bl	8000dd8 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e202      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d1f1      	bne.n	8001c7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d036      	beq.n	8001d12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d019      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cac:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb0:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f88e 	bl	8000dd8 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f889 	bl	8000dd8 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1e0      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0f1      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x242>
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff f874 	bl	8000dd8 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f86f 	bl	8000dd8 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1c6      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d1f1      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCC_OscConfig+0x29e>
 8001d1c:	e0b4      	b.n	8001e88 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	201f      	movs	r0, #31
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d110      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0549      	lsls	r1, r1, #21
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f833 	bl	8000dd8 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7ff f82e 	bl	8000dd8 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e185      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10e      	bne.n	8001dbc <HAL_RCC_OscConfig+0x33c>
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	4b02      	ldr	r3, [pc, #8]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	621a      	str	r2, [r3, #32]
 8001daa:	e035      	b.n	8001e18 <HAL_RCC_OscConfig+0x398>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	fffeffff 	.word	0xfffeffff
 8001db4:	fffbffff 	.word	0xfffbffff
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x35e>
 8001dc4:	4bb6      	ldr	r3, [pc, #728]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	6a1a      	ldr	r2, [r3, #32]
 8001dc8:	4bb5      	ldr	r3, [pc, #724]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	621a      	str	r2, [r3, #32]
 8001dd0:	4bb3      	ldr	r3, [pc, #716]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	4bb2      	ldr	r3, [pc, #712]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	438a      	bics	r2, r1
 8001dda:	621a      	str	r2, [r3, #32]
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x398>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x380>
 8001de6:	4bae      	ldr	r3, [pc, #696]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	4bad      	ldr	r3, [pc, #692]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dec:	2104      	movs	r1, #4
 8001dee:	430a      	orrs	r2, r1
 8001df0:	621a      	str	r2, [r3, #32]
 8001df2:	4bab      	ldr	r3, [pc, #684]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	4baa      	ldr	r3, [pc, #680]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	621a      	str	r2, [r3, #32]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x398>
 8001e00:	4ba7      	ldr	r3, [pc, #668]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	621a      	str	r2, [r3, #32]
 8001e0c:	4ba4      	ldr	r3, [pc, #656]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	6a1a      	ldr	r2, [r3, #32]
 8001e10:	4ba3      	ldr	r3, [pc, #652]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e12:	2104      	movs	r1, #4
 8001e14:	438a      	bics	r2, r1
 8001e16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d014      	beq.n	8001e4a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe ffda 	bl	8000dd8 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe ffd5 	bl	8000dd8 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a9b      	ldr	r2, [pc, #620]	; (80020a4 <HAL_RCC_OscConfig+0x624>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e12b      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	4b98      	ldr	r3, [pc, #608]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3aa>
 8001e48:	e013      	b.n	8001e72 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ffc5 	bl	8000dd8 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e52:	e009      	b.n	8001e68 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe ffc0 	bl	8000dd8 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	4a91      	ldr	r2, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x624>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e116      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	4b8d      	ldr	r3, [pc, #564]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e72:	231f      	movs	r3, #31
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	4b87      	ldr	r3, [pc, #540]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e82:	4989      	ldr	r1, [pc, #548]	; (80020a8 <HAL_RCC_OscConfig+0x628>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d063      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d12a      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e9a:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9e:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ea6:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eaa:	4b7d      	ldr	r3, [pc, #500]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe ff91 	bl	8000dd8 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ebc:	f7fe ff8c 	bl	8000dd8 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0e3      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ece:	4b74      	ldr	r3, [pc, #464]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d0f1      	beq.n	8001ebc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed8:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	22f8      	movs	r2, #248	; 0xf8
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
 8001eee:	e034      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	d111      	bne.n	8001f1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef8:	4b69      	ldr	r3, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001efe:	2104      	movs	r1, #4
 8001f00:	438a      	bics	r2, r1
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	22f8      	movs	r2, #248	; 0xf8
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	00da      	lsls	r2, r3, #3
 8001f14:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f1c:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f22:	2104      	movs	r1, #4
 8001f24:	430a      	orrs	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f28:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2c:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	438a      	bics	r2, r1
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff50 	bl	8000dd8 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f3e:	f7fe ff4b 	bl	8000dd8 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0a2      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d1f1      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d100      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4e4>
 8001f62:	e097      	b.n	8002094 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	220c      	movs	r2, #12
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d100      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4f2>
 8001f70:	e06b      	b.n	800204a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d14c      	bne.n	8002014 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f80:	494a      	ldr	r1, [pc, #296]	; (80020ac <HAL_RCC_OscConfig+0x62c>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe ff27 	bl	8000dd8 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe ff22 	bl	8000dd8 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e079      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	049b      	lsls	r3, r3, #18
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fae:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0x630>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0449      	lsls	r1, r1, #17
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fef5 	bl	8000dd8 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fef0 	bl	8000dd8 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e047      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	049b      	lsls	r3, r3, #18
 800200e:	4013      	ands	r3, r2
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x574>
 8002012:	e03f      	b.n	8002094 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800201a:	4924      	ldr	r1, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x62c>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe feda 	bl	8000dd8 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fed5 	bl	8000dd8 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e02c      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	049b      	lsls	r3, r3, #18
 8002044:	4013      	ands	r3, r2
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x5aa>
 8002048:	e024      	b.n	8002094 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e01f      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	401a      	ands	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	429a      	cmp	r2, r3
 8002070:	d10e      	bne.n	8002090 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	220f      	movs	r2, #15
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	23f0      	movs	r3, #240	; 0xf0
 8002084:	039b      	lsls	r3, r3, #14
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b008      	add	sp, #32
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40021000 	.word	0x40021000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	efffffff 	.word	0xefffffff
 80020ac:	feffffff 	.word	0xfeffffff
 80020b0:	ffc2ffff 	.word	0xffc2ffff

080020b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b3      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d911      	bls.n	80020fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b58      	ldr	r3, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	4b55      	ldr	r3, [pc, #340]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e09a      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2202      	movs	r2, #2
 8002100:	4013      	ands	r3, r2
 8002102:	d015      	beq.n	8002130 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	d006      	beq.n	800211c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002114:	21e0      	movs	r1, #224	; 0xe0
 8002116:	00c9      	lsls	r1, r1, #3
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	22f0      	movs	r2, #240	; 0xf0
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4b44      	ldr	r3, [pc, #272]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d040      	beq.n	80021bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	4013      	ands	r3, r2
 800214c:	d114      	bne.n	8002178 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06e      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	049b      	lsls	r3, r3, #18
 8002162:	4013      	ands	r3, r2
 8002164:	d108      	bne.n	8002178 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e062      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e05b      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	4393      	bics	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7fe fe24 	bl	8000dd8 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002194:	e009      	b.n	80021aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002196:	f7fe fe1f 	bl	8000dd8 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <HAL_RCC_ClockConfig+0x18c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e042      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	220c      	movs	r2, #12
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1ec      	bne.n	8002196 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d211      	bcs.n	80021ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4393      	bics	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e020      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2204      	movs	r2, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_RCC_ClockConfig+0x190>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800220c:	f000 f820 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 8002210:	0001      	movs	r1, r0
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	220f      	movs	r2, #15
 800221a:	4013      	ands	r3, r2
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x194>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	000a      	movs	r2, r1
 8002222:	40da      	lsrs	r2, r3
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x198>)
 8002226:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fd8f 	bl	8000d4c <HAL_InitTick>
  
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000
 8002240:	00001388 	.word	0x00001388
 8002244:	fffff8ff 	.word	0xfffff8ff
 8002248:	080032e8 	.word	0x080032e8
 800224c:	2000002c 	.word	0x2000002c

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08f      	sub	sp, #60	; 0x3c
 8002254:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002256:	2314      	movs	r3, #20
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	4a2b      	ldr	r2, [pc, #172]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800225e:	c313      	stmia	r3!, {r0, r1, r4}
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002268:	ca13      	ldmia	r2!, {r0, r1, r4}
 800226a:	c313      	stmia	r3!, {r0, r1, r4}
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	220c      	movs	r2, #12
 800228e:	4013      	ands	r3, r2
 8002290:	2b04      	cmp	r3, #4
 8002292:	d002      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x4a>
 8002294:	2b08      	cmp	r3, #8
 8002296:	d003      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x50>
 8002298:	e02d      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800229e:	e02d      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	0c9b      	lsrs	r3, r3, #18
 80022a4:	220f      	movs	r2, #15
 80022a6:	4013      	ands	r3, r2
 80022a8:	2214      	movs	r2, #20
 80022aa:	18ba      	adds	r2, r7, r2
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	220f      	movs	r2, #15
 80022b6:	4013      	ands	r3, r2
 80022b8:	1d3a      	adds	r2, r7, #4
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4013      	ands	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ca:	4812      	ldr	r0, [pc, #72]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022cc:	f7fd ff2e 	bl	800012c <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	001a      	movs	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	4353      	muls	r3, r2
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
 80022da:	e009      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022de:	000a      	movs	r2, r1
 80022e0:	0152      	lsls	r2, r2, #5
 80022e2:	1a52      	subs	r2, r2, r1
 80022e4:	0193      	lsls	r3, r2, #6
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	185b      	adds	r3, r3, r1
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022f4:	e002      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b00f      	add	sp, #60	; 0x3c
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	080032c8 	.word	0x080032c8
 800230c:	080032d8 	.word	0x080032d8
 8002310:	40021000 	.word	0x40021000
 8002314:	007a1200 	.word	0x007a1200

08002318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	025b      	lsls	r3, r3, #9
 8002330:	4013      	ands	r3, r2
 8002332:	d100      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002334:	e08e      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2017      	movs	r0, #23
 8002338:	183b      	adds	r3, r7, r0
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	055b      	lsls	r3, r3, #21
 8002346:	4013      	ands	r3, r2
 8002348:	d110      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0549      	lsls	r1, r1, #21
 8002354:	430a      	orrs	r2, r1
 8002356:	61da      	str	r2, [r3, #28]
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	055b      	lsls	r3, r3, #21
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	183b      	adds	r3, r7, r0
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4013      	ands	r3, r2
 8002376:	d11a      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	0049      	lsls	r1, r1, #1
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe fd27 	bl	8000dd8 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	e008      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe fd22 	bl	8000dd8 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e077      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	23c0      	movs	r3, #192	; 0xc0
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d034      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	23c0      	movs	r3, #192	; 0xc0
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d02c      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d0:	4b32      	ldr	r3, [pc, #200]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023dc:	6a1a      	ldr	r2, [r3, #32]
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0249      	lsls	r1, r1, #9
 80023e4:	430a      	orrs	r2, r1
 80023e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ee:	492e      	ldr	r1, [pc, #184]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fce9 	bl	8000dd8 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	e009      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fce4 	bl	8000dd8 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e038      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d0f0      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800243a:	430a      	orrs	r2, r1
 800243c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800243e:	2317      	movs	r3, #23
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800244e:	4918      	ldr	r1, [pc, #96]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002450:	400a      	ands	r2, r1
 8002452:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	2203      	movs	r2, #3
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800246e:	430a      	orrs	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2220      	movs	r2, #32
 8002478:	4013      	ands	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	2210      	movs	r2, #16
 8002482:	4393      	bics	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800248c:	430a      	orrs	r2, r1
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b006      	add	sp, #24
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
 80024a4:	fffffcff 	.word	0xfffffcff
 80024a8:	fffeffff 	.word	0xfffeffff
 80024ac:	00001388 	.word	0x00001388
 80024b0:	efffffff 	.word	0xefffffff

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e042      	b.n	800254c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223d      	movs	r2, #61	; 0x3d
 80024ca:	5c9b      	ldrb	r3, [r3, r2]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223c      	movs	r2, #60	; 0x3c
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7fe fb6f 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223d      	movs	r2, #61	; 0x3d
 80024e6:	2102      	movs	r1, #2
 80024e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f000 f9af 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2246      	movs	r2, #70	; 0x46
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223e      	movs	r2, #62	; 0x3e
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2241      	movs	r2, #65	; 0x41
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2242      	movs	r2, #66	; 0x42
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2243      	movs	r2, #67	; 0x43
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2244      	movs	r2, #68	; 0x44
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2245      	movs	r2, #69	; 0x45
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	223d      	movs	r2, #61	; 0x3d
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	223d      	movs	r2, #61	; 0x3d
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d001      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e036      	b.n	80025da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223d      	movs	r2, #61	; 0x3d
 8002570:	2102      	movs	r1, #2
 8002572:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2101      	movs	r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <HAL_TIM_Base_Start_IT+0x90>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00a      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x50>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	05db      	lsls	r3, r3, #23
 8002596:	429a      	cmp	r2, r3
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x50>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <HAL_TIM_Base_Start_IT+0x94>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d111      	bne.n	80025c8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2207      	movs	r2, #7
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d010      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	430a      	orrs	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c6:	e007      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b004      	add	sp, #16
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400

080025ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d124      	bne.n	800264c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d11d      	bne.n	800264c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2203      	movs	r2, #3
 8002616:	4252      	negs	r2, r2
 8002618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2203      	movs	r2, #3
 8002628:	4013      	ands	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f8fa 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8002634:	e007      	b.n	8002646 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 f8ed 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f000 f8f9 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2204      	movs	r2, #4
 8002654:	4013      	ands	r3, r2
 8002656:	2b04      	cmp	r3, #4
 8002658:	d125      	bne.n	80026a6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2204      	movs	r2, #4
 8002662:	4013      	ands	r3, r2
 8002664:	2b04      	cmp	r3, #4
 8002666:	d11e      	bne.n	80026a6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2205      	movs	r2, #5
 800266e:	4252      	negs	r2, r2
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f8cd 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 800268e:	e007      	b.n	80026a0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 f8c0 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0018      	movs	r0, r3
 800269c:	f000 f8cc 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2208      	movs	r2, #8
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d124      	bne.n	80026fe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2208      	movs	r2, #8
 80026bc:	4013      	ands	r3, r2
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d11d      	bne.n	80026fe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2209      	movs	r2, #9
 80026c8:	4252      	negs	r2, r2
 80026ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2204      	movs	r2, #4
 80026d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f8a1 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 80026e6:	e007      	b.n	80026f8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f894 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f8a0 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2210      	movs	r2, #16
 8002706:	4013      	ands	r3, r2
 8002708:	2b10      	cmp	r3, #16
 800270a:	d125      	bne.n	8002758 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2210      	movs	r2, #16
 8002714:	4013      	ands	r3, r2
 8002716:	2b10      	cmp	r3, #16
 8002718:	d11e      	bne.n	8002758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2211      	movs	r2, #17
 8002720:	4252      	negs	r2, r2
 8002722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2208      	movs	r2, #8
 8002728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	23c0      	movs	r3, #192	; 0xc0
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f874 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8002740:	e007      	b.n	8002752 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f000 f867 	bl	8002818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f873 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2201      	movs	r2, #1
 8002760:	4013      	ands	r3, r2
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10f      	bne.n	8002786 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	2b01      	cmp	r3, #1
 8002772:	d108      	bne.n	8002786 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2202      	movs	r2, #2
 800277a:	4252      	negs	r2, r2
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe f993 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	4013      	ands	r3, r2
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d10f      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	4013      	ands	r3, r2
 800279e:	2b80      	cmp	r3, #128	; 0x80
 80027a0:	d108      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2281      	movs	r2, #129	; 0x81
 80027a8:	4252      	negs	r2, r2
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f8d0 	bl	8002954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	4013      	ands	r3, r2
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d10f      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d108      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2241      	movs	r2, #65	; 0x41
 80027d6:	4252      	negs	r2, r2
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 f833 	bl	8002848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2220      	movs	r2, #32
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d10f      	bne.n	8002810 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d108      	bne.n	8002810 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2221      	movs	r2, #33	; 0x21
 8002804:	4252      	negs	r2, r2
 8002806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f89a 	bl	8002944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <TIM_Base_SetConfig+0xd4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d008      	beq.n	8002882 <TIM_Base_SetConfig+0x2a>
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	429a      	cmp	r2, r3
 8002878:	d003      	beq.n	8002882 <TIM_Base_SetConfig+0x2a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <TIM_Base_SetConfig+0xd8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d108      	bne.n	8002894 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2270      	movs	r2, #112	; 0x70
 8002886:	4393      	bics	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a25      	ldr	r2, [pc, #148]	; (800292c <TIM_Base_SetConfig+0xd4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d014      	beq.n	80028c6 <TIM_Base_SetConfig+0x6e>
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d00f      	beq.n	80028c6 <TIM_Base_SetConfig+0x6e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <TIM_Base_SetConfig+0xd8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00b      	beq.n	80028c6 <TIM_Base_SetConfig+0x6e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a20      	ldr	r2, [pc, #128]	; (8002934 <TIM_Base_SetConfig+0xdc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_Base_SetConfig+0x6e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <TIM_Base_SetConfig+0xe0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_Base_SetConfig+0x6e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1e      	ldr	r2, [pc, #120]	; (800293c <TIM_Base_SetConfig+0xe4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d108      	bne.n	80028d8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	4393      	bics	r3, r2
 80028de:	001a      	movs	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <TIM_Base_SetConfig+0xd4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0xbe>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <TIM_Base_SetConfig+0xe0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0xbe>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <TIM_Base_SetConfig+0xe4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d103      	bne.n	800291e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	615a      	str	r2, [r3, #20]
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40002000 	.word	0x40002000
 8002938:	40014400 	.word	0x40014400
 800293c:	40014800 	.word	0x40014800
 8002940:	fffffcff 	.word	0xfffffcff

08002944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000038 	.word	0x20000038

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	2600      	movs	r6, #0
 8002974:	4d0c      	ldr	r5, [pc, #48]	; (80029a8 <__libc_init_array+0x38>)
 8002976:	4c0d      	ldr	r4, [pc, #52]	; (80029ac <__libc_init_array+0x3c>)
 8002978:	1b64      	subs	r4, r4, r5
 800297a:	10a4      	asrs	r4, r4, #2
 800297c:	42a6      	cmp	r6, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	2600      	movs	r6, #0
 8002982:	f000 fc8b 	bl	800329c <_init>
 8002986:	4d0a      	ldr	r5, [pc, #40]	; (80029b0 <__libc_init_array+0x40>)
 8002988:	4c0a      	ldr	r4, [pc, #40]	; (80029b4 <__libc_init_array+0x44>)
 800298a:	1b64      	subs	r4, r4, r5
 800298c:	10a4      	asrs	r4, r4, #2
 800298e:	42a6      	cmp	r6, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	00b3      	lsls	r3, r6, #2
 8002996:	58eb      	ldr	r3, [r5, r3]
 8002998:	4798      	blx	r3
 800299a:	3601      	adds	r6, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	00b3      	lsls	r3, r6, #2
 80029a0:	58eb      	ldr	r3, [r5, r3]
 80029a2:	4798      	blx	r3
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	0800332c 	.word	0x0800332c
 80029ac:	0800332c 	.word	0x0800332c
 80029b0:	0800332c 	.word	0x0800332c
 80029b4:	08003330 	.word	0x08003330

080029b8 <memset>:
 80029b8:	0003      	movs	r3, r0
 80029ba:	1882      	adds	r2, r0, r2
 80029bc:	4293      	cmp	r3, r2
 80029be:	d100      	bne.n	80029c2 <memset+0xa>
 80029c0:	4770      	bx	lr
 80029c2:	7019      	strb	r1, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	e7f9      	b.n	80029bc <memset+0x4>

080029c8 <siprintf>:
 80029c8:	b40e      	push	{r1, r2, r3}
 80029ca:	b500      	push	{lr}
 80029cc:	490b      	ldr	r1, [pc, #44]	; (80029fc <siprintf+0x34>)
 80029ce:	b09c      	sub	sp, #112	; 0x70
 80029d0:	ab1d      	add	r3, sp, #116	; 0x74
 80029d2:	9002      	str	r0, [sp, #8]
 80029d4:	9006      	str	r0, [sp, #24]
 80029d6:	9107      	str	r1, [sp, #28]
 80029d8:	9104      	str	r1, [sp, #16]
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <siprintf+0x38>)
 80029dc:	4909      	ldr	r1, [pc, #36]	; (8002a04 <siprintf+0x3c>)
 80029de:	cb04      	ldmia	r3!, {r2}
 80029e0:	9105      	str	r1, [sp, #20]
 80029e2:	6800      	ldr	r0, [r0, #0]
 80029e4:	a902      	add	r1, sp, #8
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	f000 f870 	bl	8002acc <_svfiprintf_r>
 80029ec:	2300      	movs	r3, #0
 80029ee:	9a02      	ldr	r2, [sp, #8]
 80029f0:	7013      	strb	r3, [r2, #0]
 80029f2:	b01c      	add	sp, #112	; 0x70
 80029f4:	bc08      	pop	{r3}
 80029f6:	b003      	add	sp, #12
 80029f8:	4718      	bx	r3
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	7fffffff 	.word	0x7fffffff
 8002a00:	20000038 	.word	0x20000038
 8002a04:	ffff0208 	.word	0xffff0208

08002a08 <__ssputs_r>:
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	688e      	ldr	r6, [r1, #8]
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	0007      	movs	r7, r0
 8002a10:	000c      	movs	r4, r1
 8002a12:	9203      	str	r2, [sp, #12]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	429e      	cmp	r6, r3
 8002a18:	d83c      	bhi.n	8002a94 <__ssputs_r+0x8c>
 8002a1a:	2390      	movs	r3, #144	; 0x90
 8002a1c:	898a      	ldrh	r2, [r1, #12]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	421a      	tst	r2, r3
 8002a22:	d034      	beq.n	8002a8e <__ssputs_r+0x86>
 8002a24:	6909      	ldr	r1, [r1, #16]
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	6960      	ldr	r0, [r4, #20]
 8002a2a:	1a5b      	subs	r3, r3, r1
 8002a2c:	9302      	str	r3, [sp, #8]
 8002a2e:	2303      	movs	r3, #3
 8002a30:	4343      	muls	r3, r0
 8002a32:	0fdd      	lsrs	r5, r3, #31
 8002a34:	18ed      	adds	r5, r5, r3
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	9802      	ldr	r0, [sp, #8]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	181b      	adds	r3, r3, r0
 8002a3e:	106d      	asrs	r5, r5, #1
 8002a40:	42ab      	cmp	r3, r5
 8002a42:	d900      	bls.n	8002a46 <__ssputs_r+0x3e>
 8002a44:	001d      	movs	r5, r3
 8002a46:	0553      	lsls	r3, r2, #21
 8002a48:	d532      	bpl.n	8002ab0 <__ssputs_r+0xa8>
 8002a4a:	0029      	movs	r1, r5
 8002a4c:	0038      	movs	r0, r7
 8002a4e:	f000 fb53 	bl	80030f8 <_malloc_r>
 8002a52:	1e06      	subs	r6, r0, #0
 8002a54:	d109      	bne.n	8002a6a <__ssputs_r+0x62>
 8002a56:	230c      	movs	r3, #12
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	89a2      	ldrh	r2, [r4, #12]
 8002a60:	4240      	negs	r0, r0
 8002a62:	4313      	orrs	r3, r2
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	b005      	add	sp, #20
 8002a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6a:	9a02      	ldr	r2, [sp, #8]
 8002a6c:	6921      	ldr	r1, [r4, #16]
 8002a6e:	f000 faba 	bl	8002fe6 <memcpy>
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <__ssputs_r+0xc0>)
 8002a76:	401a      	ands	r2, r3
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	81a3      	strh	r3, [r4, #12]
 8002a7e:	9b02      	ldr	r3, [sp, #8]
 8002a80:	6126      	str	r6, [r4, #16]
 8002a82:	18f6      	adds	r6, r6, r3
 8002a84:	6026      	str	r6, [r4, #0]
 8002a86:	6165      	str	r5, [r4, #20]
 8002a88:	9e01      	ldr	r6, [sp, #4]
 8002a8a:	1aed      	subs	r5, r5, r3
 8002a8c:	60a5      	str	r5, [r4, #8]
 8002a8e:	9b01      	ldr	r3, [sp, #4]
 8002a90:	429e      	cmp	r6, r3
 8002a92:	d900      	bls.n	8002a96 <__ssputs_r+0x8e>
 8002a94:	9e01      	ldr	r6, [sp, #4]
 8002a96:	0032      	movs	r2, r6
 8002a98:	9903      	ldr	r1, [sp, #12]
 8002a9a:	6820      	ldr	r0, [r4, #0]
 8002a9c:	f000 faac 	bl	8002ff8 <memmove>
 8002aa0:	68a3      	ldr	r3, [r4, #8]
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	1b9b      	subs	r3, r3, r6
 8002aa6:	60a3      	str	r3, [r4, #8]
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	199e      	adds	r6, r3, r6
 8002aac:	6026      	str	r6, [r4, #0]
 8002aae:	e7da      	b.n	8002a66 <__ssputs_r+0x5e>
 8002ab0:	002a      	movs	r2, r5
 8002ab2:	0038      	movs	r0, r7
 8002ab4:	f000 fb96 	bl	80031e4 <_realloc_r>
 8002ab8:	1e06      	subs	r6, r0, #0
 8002aba:	d1e0      	bne.n	8002a7e <__ssputs_r+0x76>
 8002abc:	0038      	movs	r0, r7
 8002abe:	6921      	ldr	r1, [r4, #16]
 8002ac0:	f000 faae 	bl	8003020 <_free_r>
 8002ac4:	e7c7      	b.n	8002a56 <__ssputs_r+0x4e>
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	fffffb7f 	.word	0xfffffb7f

08002acc <_svfiprintf_r>:
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b0a1      	sub	sp, #132	; 0x84
 8002ad0:	9003      	str	r0, [sp, #12]
 8002ad2:	001d      	movs	r5, r3
 8002ad4:	898b      	ldrh	r3, [r1, #12]
 8002ad6:	000f      	movs	r7, r1
 8002ad8:	0016      	movs	r6, r2
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	d511      	bpl.n	8002b02 <_svfiprintf_r+0x36>
 8002ade:	690b      	ldr	r3, [r1, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10e      	bne.n	8002b02 <_svfiprintf_r+0x36>
 8002ae4:	2140      	movs	r1, #64	; 0x40
 8002ae6:	f000 fb07 	bl	80030f8 <_malloc_r>
 8002aea:	6038      	str	r0, [r7, #0]
 8002aec:	6138      	str	r0, [r7, #16]
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d105      	bne.n	8002afe <_svfiprintf_r+0x32>
 8002af2:	230c      	movs	r3, #12
 8002af4:	9a03      	ldr	r2, [sp, #12]
 8002af6:	3801      	subs	r0, #1
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	b021      	add	sp, #132	; 0x84
 8002afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afe:	2340      	movs	r3, #64	; 0x40
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	2300      	movs	r3, #0
 8002b04:	ac08      	add	r4, sp, #32
 8002b06:	6163      	str	r3, [r4, #20]
 8002b08:	3320      	adds	r3, #32
 8002b0a:	7663      	strb	r3, [r4, #25]
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	76a3      	strb	r3, [r4, #26]
 8002b10:	9507      	str	r5, [sp, #28]
 8002b12:	0035      	movs	r5, r6
 8002b14:	782b      	ldrb	r3, [r5, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <_svfiprintf_r+0x52>
 8002b1a:	2b25      	cmp	r3, #37	; 0x25
 8002b1c:	d147      	bne.n	8002bae <_svfiprintf_r+0xe2>
 8002b1e:	1bab      	subs	r3, r5, r6
 8002b20:	9305      	str	r3, [sp, #20]
 8002b22:	42b5      	cmp	r5, r6
 8002b24:	d00c      	beq.n	8002b40 <_svfiprintf_r+0x74>
 8002b26:	0032      	movs	r2, r6
 8002b28:	0039      	movs	r1, r7
 8002b2a:	9803      	ldr	r0, [sp, #12]
 8002b2c:	f7ff ff6c 	bl	8002a08 <__ssputs_r>
 8002b30:	1c43      	adds	r3, r0, #1
 8002b32:	d100      	bne.n	8002b36 <_svfiprintf_r+0x6a>
 8002b34:	e0ae      	b.n	8002c94 <_svfiprintf_r+0x1c8>
 8002b36:	6962      	ldr	r2, [r4, #20]
 8002b38:	9b05      	ldr	r3, [sp, #20]
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	4463      	add	r3, ip
 8002b3e:	6163      	str	r3, [r4, #20]
 8002b40:	782b      	ldrb	r3, [r5, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d100      	bne.n	8002b48 <_svfiprintf_r+0x7c>
 8002b46:	e0a5      	b.n	8002c94 <_svfiprintf_r+0x1c8>
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	6062      	str	r2, [r4, #4]
 8002b50:	a904      	add	r1, sp, #16
 8002b52:	3254      	adds	r2, #84	; 0x54
 8002b54:	1852      	adds	r2, r2, r1
 8002b56:	1c6e      	adds	r6, r5, #1
 8002b58:	6023      	str	r3, [r4, #0]
 8002b5a:	60e3      	str	r3, [r4, #12]
 8002b5c:	60a3      	str	r3, [r4, #8]
 8002b5e:	7013      	strb	r3, [r2, #0]
 8002b60:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b62:	2205      	movs	r2, #5
 8002b64:	7831      	ldrb	r1, [r6, #0]
 8002b66:	4854      	ldr	r0, [pc, #336]	; (8002cb8 <_svfiprintf_r+0x1ec>)
 8002b68:	f000 fa32 	bl	8002fd0 <memchr>
 8002b6c:	1c75      	adds	r5, r6, #1
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d11f      	bne.n	8002bb2 <_svfiprintf_r+0xe6>
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	06d3      	lsls	r3, r2, #27
 8002b76:	d504      	bpl.n	8002b82 <_svfiprintf_r+0xb6>
 8002b78:	2353      	movs	r3, #83	; 0x53
 8002b7a:	a904      	add	r1, sp, #16
 8002b7c:	185b      	adds	r3, r3, r1
 8002b7e:	2120      	movs	r1, #32
 8002b80:	7019      	strb	r1, [r3, #0]
 8002b82:	0713      	lsls	r3, r2, #28
 8002b84:	d504      	bpl.n	8002b90 <_svfiprintf_r+0xc4>
 8002b86:	2353      	movs	r3, #83	; 0x53
 8002b88:	a904      	add	r1, sp, #16
 8002b8a:	185b      	adds	r3, r3, r1
 8002b8c:	212b      	movs	r1, #43	; 0x2b
 8002b8e:	7019      	strb	r1, [r3, #0]
 8002b90:	7833      	ldrb	r3, [r6, #0]
 8002b92:	2b2a      	cmp	r3, #42	; 0x2a
 8002b94:	d016      	beq.n	8002bc4 <_svfiprintf_r+0xf8>
 8002b96:	0035      	movs	r5, r6
 8002b98:	2100      	movs	r1, #0
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	68e3      	ldr	r3, [r4, #12]
 8002b9e:	782a      	ldrb	r2, [r5, #0]
 8002ba0:	1c6e      	adds	r6, r5, #1
 8002ba2:	3a30      	subs	r2, #48	; 0x30
 8002ba4:	2a09      	cmp	r2, #9
 8002ba6:	d94e      	bls.n	8002c46 <_svfiprintf_r+0x17a>
 8002ba8:	2900      	cmp	r1, #0
 8002baa:	d111      	bne.n	8002bd0 <_svfiprintf_r+0x104>
 8002bac:	e017      	b.n	8002bde <_svfiprintf_r+0x112>
 8002bae:	3501      	adds	r5, #1
 8002bb0:	e7b0      	b.n	8002b14 <_svfiprintf_r+0x48>
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <_svfiprintf_r+0x1ec>)
 8002bb4:	6822      	ldr	r2, [r4, #0]
 8002bb6:	1ac0      	subs	r0, r0, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4083      	lsls	r3, r0
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	002e      	movs	r6, r5
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	e7ce      	b.n	8002b62 <_svfiprintf_r+0x96>
 8002bc4:	9b07      	ldr	r3, [sp, #28]
 8002bc6:	1d19      	adds	r1, r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	9107      	str	r1, [sp, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db01      	blt.n	8002bd4 <_svfiprintf_r+0x108>
 8002bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bd2:	e004      	b.n	8002bde <_svfiprintf_r+0x112>
 8002bd4:	425b      	negs	r3, r3
 8002bd6:	60e3      	str	r3, [r4, #12]
 8002bd8:	2302      	movs	r3, #2
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	782b      	ldrb	r3, [r5, #0]
 8002be0:	2b2e      	cmp	r3, #46	; 0x2e
 8002be2:	d10a      	bne.n	8002bfa <_svfiprintf_r+0x12e>
 8002be4:	786b      	ldrb	r3, [r5, #1]
 8002be6:	2b2a      	cmp	r3, #42	; 0x2a
 8002be8:	d135      	bne.n	8002c56 <_svfiprintf_r+0x18a>
 8002bea:	9b07      	ldr	r3, [sp, #28]
 8002bec:	3502      	adds	r5, #2
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	9207      	str	r2, [sp, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db2b      	blt.n	8002c50 <_svfiprintf_r+0x184>
 8002bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bfa:	4e30      	ldr	r6, [pc, #192]	; (8002cbc <_svfiprintf_r+0x1f0>)
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	0030      	movs	r0, r6
 8002c00:	7829      	ldrb	r1, [r5, #0]
 8002c02:	f000 f9e5 	bl	8002fd0 <memchr>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d006      	beq.n	8002c18 <_svfiprintf_r+0x14c>
 8002c0a:	2340      	movs	r3, #64	; 0x40
 8002c0c:	1b80      	subs	r0, r0, r6
 8002c0e:	4083      	lsls	r3, r0
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	3501      	adds	r5, #1
 8002c14:	4313      	orrs	r3, r2
 8002c16:	6023      	str	r3, [r4, #0]
 8002c18:	7829      	ldrb	r1, [r5, #0]
 8002c1a:	2206      	movs	r2, #6
 8002c1c:	4828      	ldr	r0, [pc, #160]	; (8002cc0 <_svfiprintf_r+0x1f4>)
 8002c1e:	1c6e      	adds	r6, r5, #1
 8002c20:	7621      	strb	r1, [r4, #24]
 8002c22:	f000 f9d5 	bl	8002fd0 <memchr>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d03c      	beq.n	8002ca4 <_svfiprintf_r+0x1d8>
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <_svfiprintf_r+0x1f8>)
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d125      	bne.n	8002c7c <_svfiprintf_r+0x1b0>
 8002c30:	2207      	movs	r2, #7
 8002c32:	9b07      	ldr	r3, [sp, #28]
 8002c34:	3307      	adds	r3, #7
 8002c36:	4393      	bics	r3, r2
 8002c38:	3308      	adds	r3, #8
 8002c3a:	9307      	str	r3, [sp, #28]
 8002c3c:	6963      	ldr	r3, [r4, #20]
 8002c3e:	9a04      	ldr	r2, [sp, #16]
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	6163      	str	r3, [r4, #20]
 8002c44:	e765      	b.n	8002b12 <_svfiprintf_r+0x46>
 8002c46:	4343      	muls	r3, r0
 8002c48:	0035      	movs	r5, r6
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	e7a6      	b.n	8002b9e <_svfiprintf_r+0xd2>
 8002c50:	2301      	movs	r3, #1
 8002c52:	425b      	negs	r3, r3
 8002c54:	e7d0      	b.n	8002bf8 <_svfiprintf_r+0x12c>
 8002c56:	2300      	movs	r3, #0
 8002c58:	200a      	movs	r0, #10
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	3501      	adds	r5, #1
 8002c5e:	6063      	str	r3, [r4, #4]
 8002c60:	7829      	ldrb	r1, [r5, #0]
 8002c62:	1c6e      	adds	r6, r5, #1
 8002c64:	3930      	subs	r1, #48	; 0x30
 8002c66:	2909      	cmp	r1, #9
 8002c68:	d903      	bls.n	8002c72 <_svfiprintf_r+0x1a6>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0c5      	beq.n	8002bfa <_svfiprintf_r+0x12e>
 8002c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8002c70:	e7c3      	b.n	8002bfa <_svfiprintf_r+0x12e>
 8002c72:	4342      	muls	r2, r0
 8002c74:	0035      	movs	r5, r6
 8002c76:	2301      	movs	r3, #1
 8002c78:	1852      	adds	r2, r2, r1
 8002c7a:	e7f1      	b.n	8002c60 <_svfiprintf_r+0x194>
 8002c7c:	ab07      	add	r3, sp, #28
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	003a      	movs	r2, r7
 8002c82:	0021      	movs	r1, r4
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_svfiprintf_r+0x1fc>)
 8002c86:	9803      	ldr	r0, [sp, #12]
 8002c88:	e000      	b.n	8002c8c <_svfiprintf_r+0x1c0>
 8002c8a:	bf00      	nop
 8002c8c:	9004      	str	r0, [sp, #16]
 8002c8e:	9b04      	ldr	r3, [sp, #16]
 8002c90:	3301      	adds	r3, #1
 8002c92:	d1d3      	bne.n	8002c3c <_svfiprintf_r+0x170>
 8002c94:	89bb      	ldrh	r3, [r7, #12]
 8002c96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002c98:	065b      	lsls	r3, r3, #25
 8002c9a:	d400      	bmi.n	8002c9e <_svfiprintf_r+0x1d2>
 8002c9c:	e72d      	b.n	8002afa <_svfiprintf_r+0x2e>
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	4240      	negs	r0, r0
 8002ca2:	e72a      	b.n	8002afa <_svfiprintf_r+0x2e>
 8002ca4:	ab07      	add	r3, sp, #28
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	003a      	movs	r2, r7
 8002caa:	0021      	movs	r1, r4
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <_svfiprintf_r+0x1fc>)
 8002cae:	9803      	ldr	r0, [sp, #12]
 8002cb0:	f000 f87c 	bl	8002dac <_printf_i>
 8002cb4:	e7ea      	b.n	8002c8c <_svfiprintf_r+0x1c0>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	080032f8 	.word	0x080032f8
 8002cbc:	080032fe 	.word	0x080032fe
 8002cc0:	08003302 	.word	0x08003302
 8002cc4:	00000000 	.word	0x00000000
 8002cc8:	08002a09 	.word	0x08002a09

08002ccc <_printf_common>:
 8002ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cce:	0015      	movs	r5, r2
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	688a      	ldr	r2, [r1, #8]
 8002cd4:	690b      	ldr	r3, [r1, #16]
 8002cd6:	000c      	movs	r4, r1
 8002cd8:	9000      	str	r0, [sp, #0]
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	da00      	bge.n	8002ce0 <_printf_common+0x14>
 8002cde:	0013      	movs	r3, r2
 8002ce0:	0022      	movs	r2, r4
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	3243      	adds	r2, #67	; 0x43
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d001      	beq.n	8002cf0 <_printf_common+0x24>
 8002cec:	3301      	adds	r3, #1
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	d502      	bpl.n	8002cfc <_printf_common+0x30>
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	2306      	movs	r3, #6
 8002d00:	0017      	movs	r7, r2
 8002d02:	401f      	ands	r7, r3
 8002d04:	421a      	tst	r2, r3
 8002d06:	d027      	beq.n	8002d58 <_printf_common+0x8c>
 8002d08:	0023      	movs	r3, r4
 8002d0a:	3343      	adds	r3, #67	; 0x43
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	4193      	sbcs	r3, r2
 8002d12:	6822      	ldr	r2, [r4, #0]
 8002d14:	0692      	lsls	r2, r2, #26
 8002d16:	d430      	bmi.n	8002d7a <_printf_common+0xae>
 8002d18:	0022      	movs	r2, r4
 8002d1a:	9901      	ldr	r1, [sp, #4]
 8002d1c:	9800      	ldr	r0, [sp, #0]
 8002d1e:	9e08      	ldr	r6, [sp, #32]
 8002d20:	3243      	adds	r2, #67	; 0x43
 8002d22:	47b0      	blx	r6
 8002d24:	1c43      	adds	r3, r0, #1
 8002d26:	d025      	beq.n	8002d74 <_printf_common+0xa8>
 8002d28:	2306      	movs	r3, #6
 8002d2a:	6820      	ldr	r0, [r4, #0]
 8002d2c:	682a      	ldr	r2, [r5, #0]
 8002d2e:	68e1      	ldr	r1, [r4, #12]
 8002d30:	2500      	movs	r5, #0
 8002d32:	4003      	ands	r3, r0
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d103      	bne.n	8002d40 <_printf_common+0x74>
 8002d38:	1a8d      	subs	r5, r1, r2
 8002d3a:	43eb      	mvns	r3, r5
 8002d3c:	17db      	asrs	r3, r3, #31
 8002d3e:	401d      	ands	r5, r3
 8002d40:	68a3      	ldr	r3, [r4, #8]
 8002d42:	6922      	ldr	r2, [r4, #16]
 8002d44:	4293      	cmp	r3, r2
 8002d46:	dd01      	ble.n	8002d4c <_printf_common+0x80>
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	18ed      	adds	r5, r5, r3
 8002d4c:	2700      	movs	r7, #0
 8002d4e:	42bd      	cmp	r5, r7
 8002d50:	d120      	bne.n	8002d94 <_printf_common+0xc8>
 8002d52:	2000      	movs	r0, #0
 8002d54:	e010      	b.n	8002d78 <_printf_common+0xac>
 8002d56:	3701      	adds	r7, #1
 8002d58:	68e3      	ldr	r3, [r4, #12]
 8002d5a:	682a      	ldr	r2, [r5, #0]
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	42bb      	cmp	r3, r7
 8002d60:	ddd2      	ble.n	8002d08 <_printf_common+0x3c>
 8002d62:	0022      	movs	r2, r4
 8002d64:	2301      	movs	r3, #1
 8002d66:	9901      	ldr	r1, [sp, #4]
 8002d68:	9800      	ldr	r0, [sp, #0]
 8002d6a:	9e08      	ldr	r6, [sp, #32]
 8002d6c:	3219      	adds	r2, #25
 8002d6e:	47b0      	blx	r6
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d1f0      	bne.n	8002d56 <_printf_common+0x8a>
 8002d74:	2001      	movs	r0, #1
 8002d76:	4240      	negs	r0, r0
 8002d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d7a:	2030      	movs	r0, #48	; 0x30
 8002d7c:	18e1      	adds	r1, r4, r3
 8002d7e:	3143      	adds	r1, #67	; 0x43
 8002d80:	7008      	strb	r0, [r1, #0]
 8002d82:	0021      	movs	r1, r4
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	3145      	adds	r1, #69	; 0x45
 8002d88:	7809      	ldrb	r1, [r1, #0]
 8002d8a:	18a2      	adds	r2, r4, r2
 8002d8c:	3243      	adds	r2, #67	; 0x43
 8002d8e:	3302      	adds	r3, #2
 8002d90:	7011      	strb	r1, [r2, #0]
 8002d92:	e7c1      	b.n	8002d18 <_printf_common+0x4c>
 8002d94:	0022      	movs	r2, r4
 8002d96:	2301      	movs	r3, #1
 8002d98:	9901      	ldr	r1, [sp, #4]
 8002d9a:	9800      	ldr	r0, [sp, #0]
 8002d9c:	9e08      	ldr	r6, [sp, #32]
 8002d9e:	321a      	adds	r2, #26
 8002da0:	47b0      	blx	r6
 8002da2:	1c43      	adds	r3, r0, #1
 8002da4:	d0e6      	beq.n	8002d74 <_printf_common+0xa8>
 8002da6:	3701      	adds	r7, #1
 8002da8:	e7d1      	b.n	8002d4e <_printf_common+0x82>
	...

08002dac <_printf_i>:
 8002dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dae:	b08b      	sub	sp, #44	; 0x2c
 8002db0:	9206      	str	r2, [sp, #24]
 8002db2:	000a      	movs	r2, r1
 8002db4:	3243      	adds	r2, #67	; 0x43
 8002db6:	9307      	str	r3, [sp, #28]
 8002db8:	9005      	str	r0, [sp, #20]
 8002dba:	9204      	str	r2, [sp, #16]
 8002dbc:	7e0a      	ldrb	r2, [r1, #24]
 8002dbe:	000c      	movs	r4, r1
 8002dc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002dc2:	2a78      	cmp	r2, #120	; 0x78
 8002dc4:	d807      	bhi.n	8002dd6 <_printf_i+0x2a>
 8002dc6:	2a62      	cmp	r2, #98	; 0x62
 8002dc8:	d809      	bhi.n	8002dde <_printf_i+0x32>
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d100      	bne.n	8002dd0 <_printf_i+0x24>
 8002dce:	e0c1      	b.n	8002f54 <_printf_i+0x1a8>
 8002dd0:	2a58      	cmp	r2, #88	; 0x58
 8002dd2:	d100      	bne.n	8002dd6 <_printf_i+0x2a>
 8002dd4:	e08c      	b.n	8002ef0 <_printf_i+0x144>
 8002dd6:	0026      	movs	r6, r4
 8002dd8:	3642      	adds	r6, #66	; 0x42
 8002dda:	7032      	strb	r2, [r6, #0]
 8002ddc:	e022      	b.n	8002e24 <_printf_i+0x78>
 8002dde:	0010      	movs	r0, r2
 8002de0:	3863      	subs	r0, #99	; 0x63
 8002de2:	2815      	cmp	r0, #21
 8002de4:	d8f7      	bhi.n	8002dd6 <_printf_i+0x2a>
 8002de6:	f7fd f997 	bl	8000118 <__gnu_thumb1_case_shi>
 8002dea:	0016      	.short	0x0016
 8002dec:	fff6001f 	.word	0xfff6001f
 8002df0:	fff6fff6 	.word	0xfff6fff6
 8002df4:	001ffff6 	.word	0x001ffff6
 8002df8:	fff6fff6 	.word	0xfff6fff6
 8002dfc:	fff6fff6 	.word	0xfff6fff6
 8002e00:	003600a8 	.word	0x003600a8
 8002e04:	fff6009a 	.word	0xfff6009a
 8002e08:	00b9fff6 	.word	0x00b9fff6
 8002e0c:	0036fff6 	.word	0x0036fff6
 8002e10:	fff6fff6 	.word	0xfff6fff6
 8002e14:	009e      	.short	0x009e
 8002e16:	0026      	movs	r6, r4
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	3642      	adds	r6, #66	; 0x42
 8002e1c:	1d11      	adds	r1, r2, #4
 8002e1e:	6019      	str	r1, [r3, #0]
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	7033      	strb	r3, [r6, #0]
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0a7      	b.n	8002f78 <_printf_i+0x1cc>
 8002e28:	6808      	ldr	r0, [r1, #0]
 8002e2a:	6819      	ldr	r1, [r3, #0]
 8002e2c:	1d0a      	adds	r2, r1, #4
 8002e2e:	0605      	lsls	r5, r0, #24
 8002e30:	d50b      	bpl.n	8002e4a <_printf_i+0x9e>
 8002e32:	680d      	ldr	r5, [r1, #0]
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	da03      	bge.n	8002e42 <_printf_i+0x96>
 8002e3a:	232d      	movs	r3, #45	; 0x2d
 8002e3c:	9a04      	ldr	r2, [sp, #16]
 8002e3e:	426d      	negs	r5, r5
 8002e40:	7013      	strb	r3, [r2, #0]
 8002e42:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <_printf_i+0x21c>)
 8002e44:	270a      	movs	r7, #10
 8002e46:	9303      	str	r3, [sp, #12]
 8002e48:	e01b      	b.n	8002e82 <_printf_i+0xd6>
 8002e4a:	680d      	ldr	r5, [r1, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	0641      	lsls	r1, r0, #25
 8002e50:	d5f1      	bpl.n	8002e36 <_printf_i+0x8a>
 8002e52:	b22d      	sxth	r5, r5
 8002e54:	e7ef      	b.n	8002e36 <_printf_i+0x8a>
 8002e56:	680d      	ldr	r5, [r1, #0]
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	1d08      	adds	r0, r1, #4
 8002e5c:	6018      	str	r0, [r3, #0]
 8002e5e:	062e      	lsls	r6, r5, #24
 8002e60:	d501      	bpl.n	8002e66 <_printf_i+0xba>
 8002e62:	680d      	ldr	r5, [r1, #0]
 8002e64:	e003      	b.n	8002e6e <_printf_i+0xc2>
 8002e66:	066d      	lsls	r5, r5, #25
 8002e68:	d5fb      	bpl.n	8002e62 <_printf_i+0xb6>
 8002e6a:	680d      	ldr	r5, [r1, #0]
 8002e6c:	b2ad      	uxth	r5, r5
 8002e6e:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <_printf_i+0x21c>)
 8002e70:	2708      	movs	r7, #8
 8002e72:	9303      	str	r3, [sp, #12]
 8002e74:	2a6f      	cmp	r2, #111	; 0x6f
 8002e76:	d000      	beq.n	8002e7a <_printf_i+0xce>
 8002e78:	3702      	adds	r7, #2
 8002e7a:	0023      	movs	r3, r4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	3343      	adds	r3, #67	; 0x43
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	6863      	ldr	r3, [r4, #4]
 8002e84:	60a3      	str	r3, [r4, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db03      	blt.n	8002e92 <_printf_i+0xe6>
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	6821      	ldr	r1, [r4, #0]
 8002e8e:	4391      	bics	r1, r2
 8002e90:	6021      	str	r1, [r4, #0]
 8002e92:	2d00      	cmp	r5, #0
 8002e94:	d102      	bne.n	8002e9c <_printf_i+0xf0>
 8002e96:	9e04      	ldr	r6, [sp, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00c      	beq.n	8002eb6 <_printf_i+0x10a>
 8002e9c:	9e04      	ldr	r6, [sp, #16]
 8002e9e:	0028      	movs	r0, r5
 8002ea0:	0039      	movs	r1, r7
 8002ea2:	f7fd f9c9 	bl	8000238 <__aeabi_uidivmod>
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	3e01      	subs	r6, #1
 8002eaa:	5c5b      	ldrb	r3, [r3, r1]
 8002eac:	7033      	strb	r3, [r6, #0]
 8002eae:	002b      	movs	r3, r5
 8002eb0:	0005      	movs	r5, r0
 8002eb2:	429f      	cmp	r7, r3
 8002eb4:	d9f3      	bls.n	8002e9e <_printf_i+0xf2>
 8002eb6:	2f08      	cmp	r7, #8
 8002eb8:	d109      	bne.n	8002ece <_printf_i+0x122>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	07db      	lsls	r3, r3, #31
 8002ebe:	d506      	bpl.n	8002ece <_printf_i+0x122>
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	6922      	ldr	r2, [r4, #16]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	dc02      	bgt.n	8002ece <_printf_i+0x122>
 8002ec8:	2330      	movs	r3, #48	; 0x30
 8002eca:	3e01      	subs	r6, #1
 8002ecc:	7033      	strb	r3, [r6, #0]
 8002ece:	9b04      	ldr	r3, [sp, #16]
 8002ed0:	1b9b      	subs	r3, r3, r6
 8002ed2:	6123      	str	r3, [r4, #16]
 8002ed4:	9b07      	ldr	r3, [sp, #28]
 8002ed6:	0021      	movs	r1, r4
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	9805      	ldr	r0, [sp, #20]
 8002edc:	9b06      	ldr	r3, [sp, #24]
 8002ede:	aa09      	add	r2, sp, #36	; 0x24
 8002ee0:	f7ff fef4 	bl	8002ccc <_printf_common>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d14c      	bne.n	8002f82 <_printf_i+0x1d6>
 8002ee8:	2001      	movs	r0, #1
 8002eea:	4240      	negs	r0, r0
 8002eec:	b00b      	add	sp, #44	; 0x2c
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef0:	3145      	adds	r1, #69	; 0x45
 8002ef2:	700a      	strb	r2, [r1, #0]
 8002ef4:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <_printf_i+0x21c>)
 8002ef6:	9203      	str	r2, [sp, #12]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	6821      	ldr	r1, [r4, #0]
 8002efc:	ca20      	ldmia	r2!, {r5}
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	0608      	lsls	r0, r1, #24
 8002f02:	d516      	bpl.n	8002f32 <_printf_i+0x186>
 8002f04:	07cb      	lsls	r3, r1, #31
 8002f06:	d502      	bpl.n	8002f0e <_printf_i+0x162>
 8002f08:	2320      	movs	r3, #32
 8002f0a:	4319      	orrs	r1, r3
 8002f0c:	6021      	str	r1, [r4, #0]
 8002f0e:	2710      	movs	r7, #16
 8002f10:	2d00      	cmp	r5, #0
 8002f12:	d1b2      	bne.n	8002e7a <_printf_i+0xce>
 8002f14:	2320      	movs	r3, #32
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	439a      	bics	r2, r3
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	e7ad      	b.n	8002e7a <_printf_i+0xce>
 8002f1e:	2220      	movs	r2, #32
 8002f20:	6809      	ldr	r1, [r1, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	6022      	str	r2, [r4, #0]
 8002f26:	0022      	movs	r2, r4
 8002f28:	2178      	movs	r1, #120	; 0x78
 8002f2a:	3245      	adds	r2, #69	; 0x45
 8002f2c:	7011      	strb	r1, [r2, #0]
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <_printf_i+0x220>)
 8002f30:	e7e1      	b.n	8002ef6 <_printf_i+0x14a>
 8002f32:	0648      	lsls	r0, r1, #25
 8002f34:	d5e6      	bpl.n	8002f04 <_printf_i+0x158>
 8002f36:	b2ad      	uxth	r5, r5
 8002f38:	e7e4      	b.n	8002f04 <_printf_i+0x158>
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	680d      	ldr	r5, [r1, #0]
 8002f3e:	1d10      	adds	r0, r2, #4
 8002f40:	6949      	ldr	r1, [r1, #20]
 8002f42:	6018      	str	r0, [r3, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	062e      	lsls	r6, r5, #24
 8002f48:	d501      	bpl.n	8002f4e <_printf_i+0x1a2>
 8002f4a:	6019      	str	r1, [r3, #0]
 8002f4c:	e002      	b.n	8002f54 <_printf_i+0x1a8>
 8002f4e:	066d      	lsls	r5, r5, #25
 8002f50:	d5fb      	bpl.n	8002f4a <_printf_i+0x19e>
 8002f52:	8019      	strh	r1, [r3, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	9e04      	ldr	r6, [sp, #16]
 8002f58:	6123      	str	r3, [r4, #16]
 8002f5a:	e7bb      	b.n	8002ed4 <_printf_i+0x128>
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	1d11      	adds	r1, r2, #4
 8002f60:	6019      	str	r1, [r3, #0]
 8002f62:	6816      	ldr	r6, [r2, #0]
 8002f64:	2100      	movs	r1, #0
 8002f66:	0030      	movs	r0, r6
 8002f68:	6862      	ldr	r2, [r4, #4]
 8002f6a:	f000 f831 	bl	8002fd0 <memchr>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d001      	beq.n	8002f76 <_printf_i+0x1ca>
 8002f72:	1b80      	subs	r0, r0, r6
 8002f74:	6060      	str	r0, [r4, #4]
 8002f76:	6863      	ldr	r3, [r4, #4]
 8002f78:	6123      	str	r3, [r4, #16]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9a04      	ldr	r2, [sp, #16]
 8002f7e:	7013      	strb	r3, [r2, #0]
 8002f80:	e7a8      	b.n	8002ed4 <_printf_i+0x128>
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	0032      	movs	r2, r6
 8002f86:	9906      	ldr	r1, [sp, #24]
 8002f88:	9805      	ldr	r0, [sp, #20]
 8002f8a:	9d07      	ldr	r5, [sp, #28]
 8002f8c:	47a8      	blx	r5
 8002f8e:	1c43      	adds	r3, r0, #1
 8002f90:	d0aa      	beq.n	8002ee8 <_printf_i+0x13c>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	079b      	lsls	r3, r3, #30
 8002f96:	d415      	bmi.n	8002fc4 <_printf_i+0x218>
 8002f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f9a:	68e0      	ldr	r0, [r4, #12]
 8002f9c:	4298      	cmp	r0, r3
 8002f9e:	daa5      	bge.n	8002eec <_printf_i+0x140>
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	e7a3      	b.n	8002eec <_printf_i+0x140>
 8002fa4:	0022      	movs	r2, r4
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	9906      	ldr	r1, [sp, #24]
 8002faa:	9805      	ldr	r0, [sp, #20]
 8002fac:	9e07      	ldr	r6, [sp, #28]
 8002fae:	3219      	adds	r2, #25
 8002fb0:	47b0      	blx	r6
 8002fb2:	1c43      	adds	r3, r0, #1
 8002fb4:	d098      	beq.n	8002ee8 <_printf_i+0x13c>
 8002fb6:	3501      	adds	r5, #1
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	42ab      	cmp	r3, r5
 8002fc0:	dcf0      	bgt.n	8002fa4 <_printf_i+0x1f8>
 8002fc2:	e7e9      	b.n	8002f98 <_printf_i+0x1ec>
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	e7f7      	b.n	8002fb8 <_printf_i+0x20c>
 8002fc8:	08003309 	.word	0x08003309
 8002fcc:	0800331a 	.word	0x0800331a

08002fd0 <memchr>:
 8002fd0:	b2c9      	uxtb	r1, r1
 8002fd2:	1882      	adds	r2, r0, r2
 8002fd4:	4290      	cmp	r0, r2
 8002fd6:	d101      	bne.n	8002fdc <memchr+0xc>
 8002fd8:	2000      	movs	r0, #0
 8002fda:	4770      	bx	lr
 8002fdc:	7803      	ldrb	r3, [r0, #0]
 8002fde:	428b      	cmp	r3, r1
 8002fe0:	d0fb      	beq.n	8002fda <memchr+0xa>
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	e7f6      	b.n	8002fd4 <memchr+0x4>

08002fe6 <memcpy>:
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d100      	bne.n	8002ff0 <memcpy+0xa>
 8002fee:	bd10      	pop	{r4, pc}
 8002ff0:	5ccc      	ldrb	r4, [r1, r3]
 8002ff2:	54c4      	strb	r4, [r0, r3]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e7f8      	b.n	8002fea <memcpy+0x4>

08002ff8 <memmove>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4288      	cmp	r0, r1
 8002ffc:	d902      	bls.n	8003004 <memmove+0xc>
 8002ffe:	188b      	adds	r3, r1, r2
 8003000:	4298      	cmp	r0, r3
 8003002:	d303      	bcc.n	800300c <memmove+0x14>
 8003004:	2300      	movs	r3, #0
 8003006:	e007      	b.n	8003018 <memmove+0x20>
 8003008:	5c8b      	ldrb	r3, [r1, r2]
 800300a:	5483      	strb	r3, [r0, r2]
 800300c:	3a01      	subs	r2, #1
 800300e:	d2fb      	bcs.n	8003008 <memmove+0x10>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	5ccc      	ldrb	r4, [r1, r3]
 8003014:	54c4      	strb	r4, [r0, r3]
 8003016:	3301      	adds	r3, #1
 8003018:	429a      	cmp	r2, r3
 800301a:	d1fa      	bne.n	8003012 <memmove+0x1a>
 800301c:	e7f8      	b.n	8003010 <memmove+0x18>
	...

08003020 <_free_r>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	0005      	movs	r5, r0
 8003024:	2900      	cmp	r1, #0
 8003026:	d010      	beq.n	800304a <_free_r+0x2a>
 8003028:	1f0c      	subs	r4, r1, #4
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	da00      	bge.n	8003032 <_free_r+0x12>
 8003030:	18e4      	adds	r4, r4, r3
 8003032:	0028      	movs	r0, r5
 8003034:	f000 f918 	bl	8003268 <__malloc_lock>
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <_free_r+0x90>)
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <_free_r+0x2c>
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	6014      	str	r4, [r2, #0]
 8003044:	0028      	movs	r0, r5
 8003046:	f000 f917 	bl	8003278 <__malloc_unlock>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	42a3      	cmp	r3, r4
 800304e:	d908      	bls.n	8003062 <_free_r+0x42>
 8003050:	6821      	ldr	r1, [r4, #0]
 8003052:	1860      	adds	r0, r4, r1
 8003054:	4283      	cmp	r3, r0
 8003056:	d1f3      	bne.n	8003040 <_free_r+0x20>
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	1841      	adds	r1, r0, r1
 800305e:	6021      	str	r1, [r4, #0]
 8003060:	e7ee      	b.n	8003040 <_free_r+0x20>
 8003062:	001a      	movs	r2, r3
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <_free_r+0x4e>
 800306a:	42a3      	cmp	r3, r4
 800306c:	d9f9      	bls.n	8003062 <_free_r+0x42>
 800306e:	6811      	ldr	r1, [r2, #0]
 8003070:	1850      	adds	r0, r2, r1
 8003072:	42a0      	cmp	r0, r4
 8003074:	d10b      	bne.n	800308e <_free_r+0x6e>
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	1809      	adds	r1, r1, r0
 800307a:	1850      	adds	r0, r2, r1
 800307c:	6011      	str	r1, [r2, #0]
 800307e:	4283      	cmp	r3, r0
 8003080:	d1e0      	bne.n	8003044 <_free_r+0x24>
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	1841      	adds	r1, r0, r1
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	6053      	str	r3, [r2, #4]
 800308c:	e7da      	b.n	8003044 <_free_r+0x24>
 800308e:	42a0      	cmp	r0, r4
 8003090:	d902      	bls.n	8003098 <_free_r+0x78>
 8003092:	230c      	movs	r3, #12
 8003094:	602b      	str	r3, [r5, #0]
 8003096:	e7d5      	b.n	8003044 <_free_r+0x24>
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	1860      	adds	r0, r4, r1
 800309c:	4283      	cmp	r3, r0
 800309e:	d103      	bne.n	80030a8 <_free_r+0x88>
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	1841      	adds	r1, r0, r1
 80030a6:	6021      	str	r1, [r4, #0]
 80030a8:	6063      	str	r3, [r4, #4]
 80030aa:	6054      	str	r4, [r2, #4]
 80030ac:	e7ca      	b.n	8003044 <_free_r+0x24>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	200001ac 	.word	0x200001ac

080030b4 <sbrk_aligned>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4e0f      	ldr	r6, [pc, #60]	; (80030f4 <sbrk_aligned+0x40>)
 80030b8:	000d      	movs	r5, r1
 80030ba:	6831      	ldr	r1, [r6, #0]
 80030bc:	0004      	movs	r4, r0
 80030be:	2900      	cmp	r1, #0
 80030c0:	d102      	bne.n	80030c8 <sbrk_aligned+0x14>
 80030c2:	f000 f8bf 	bl	8003244 <_sbrk_r>
 80030c6:	6030      	str	r0, [r6, #0]
 80030c8:	0029      	movs	r1, r5
 80030ca:	0020      	movs	r0, r4
 80030cc:	f000 f8ba 	bl	8003244 <_sbrk_r>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d00a      	beq.n	80030ea <sbrk_aligned+0x36>
 80030d4:	2303      	movs	r3, #3
 80030d6:	1cc5      	adds	r5, r0, #3
 80030d8:	439d      	bics	r5, r3
 80030da:	42a8      	cmp	r0, r5
 80030dc:	d007      	beq.n	80030ee <sbrk_aligned+0x3a>
 80030de:	1a29      	subs	r1, r5, r0
 80030e0:	0020      	movs	r0, r4
 80030e2:	f000 f8af 	bl	8003244 <_sbrk_r>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	d101      	bne.n	80030ee <sbrk_aligned+0x3a>
 80030ea:	2501      	movs	r5, #1
 80030ec:	426d      	negs	r5, r5
 80030ee:	0028      	movs	r0, r5
 80030f0:	bd70      	pop	{r4, r5, r6, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	200001b0 	.word	0x200001b0

080030f8 <_malloc_r>:
 80030f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030fa:	2203      	movs	r2, #3
 80030fc:	1ccb      	adds	r3, r1, #3
 80030fe:	4393      	bics	r3, r2
 8003100:	3308      	adds	r3, #8
 8003102:	0006      	movs	r6, r0
 8003104:	001f      	movs	r7, r3
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d232      	bcs.n	8003170 <_malloc_r+0x78>
 800310a:	270c      	movs	r7, #12
 800310c:	42b9      	cmp	r1, r7
 800310e:	d831      	bhi.n	8003174 <_malloc_r+0x7c>
 8003110:	0030      	movs	r0, r6
 8003112:	f000 f8a9 	bl	8003268 <__malloc_lock>
 8003116:	4d32      	ldr	r5, [pc, #200]	; (80031e0 <_malloc_r+0xe8>)
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	001c      	movs	r4, r3
 800311c:	2c00      	cmp	r4, #0
 800311e:	d12e      	bne.n	800317e <_malloc_r+0x86>
 8003120:	0039      	movs	r1, r7
 8003122:	0030      	movs	r0, r6
 8003124:	f7ff ffc6 	bl	80030b4 <sbrk_aligned>
 8003128:	0004      	movs	r4, r0
 800312a:	1c43      	adds	r3, r0, #1
 800312c:	d11e      	bne.n	800316c <_malloc_r+0x74>
 800312e:	682c      	ldr	r4, [r5, #0]
 8003130:	0025      	movs	r5, r4
 8003132:	2d00      	cmp	r5, #0
 8003134:	d14a      	bne.n	80031cc <_malloc_r+0xd4>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	0029      	movs	r1, r5
 800313a:	18e3      	adds	r3, r4, r3
 800313c:	0030      	movs	r0, r6
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	f000 f880 	bl	8003244 <_sbrk_r>
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	4283      	cmp	r3, r0
 8003148:	d143      	bne.n	80031d2 <_malloc_r+0xda>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	3703      	adds	r7, #3
 800314e:	1aff      	subs	r7, r7, r3
 8003150:	2303      	movs	r3, #3
 8003152:	439f      	bics	r7, r3
 8003154:	3708      	adds	r7, #8
 8003156:	2f0c      	cmp	r7, #12
 8003158:	d200      	bcs.n	800315c <_malloc_r+0x64>
 800315a:	270c      	movs	r7, #12
 800315c:	0039      	movs	r1, r7
 800315e:	0030      	movs	r0, r6
 8003160:	f7ff ffa8 	bl	80030b4 <sbrk_aligned>
 8003164:	1c43      	adds	r3, r0, #1
 8003166:	d034      	beq.n	80031d2 <_malloc_r+0xda>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	19df      	adds	r7, r3, r7
 800316c:	6027      	str	r7, [r4, #0]
 800316e:	e013      	b.n	8003198 <_malloc_r+0xa0>
 8003170:	2b00      	cmp	r3, #0
 8003172:	dacb      	bge.n	800310c <_malloc_r+0x14>
 8003174:	230c      	movs	r3, #12
 8003176:	2500      	movs	r5, #0
 8003178:	6033      	str	r3, [r6, #0]
 800317a:	0028      	movs	r0, r5
 800317c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800317e:	6822      	ldr	r2, [r4, #0]
 8003180:	1bd1      	subs	r1, r2, r7
 8003182:	d420      	bmi.n	80031c6 <_malloc_r+0xce>
 8003184:	290b      	cmp	r1, #11
 8003186:	d917      	bls.n	80031b8 <_malloc_r+0xc0>
 8003188:	19e2      	adds	r2, r4, r7
 800318a:	6027      	str	r7, [r4, #0]
 800318c:	42a3      	cmp	r3, r4
 800318e:	d111      	bne.n	80031b4 <_malloc_r+0xbc>
 8003190:	602a      	str	r2, [r5, #0]
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	6053      	str	r3, [r2, #4]
 8003198:	0030      	movs	r0, r6
 800319a:	0025      	movs	r5, r4
 800319c:	f000 f86c 	bl	8003278 <__malloc_unlock>
 80031a0:	2207      	movs	r2, #7
 80031a2:	350b      	adds	r5, #11
 80031a4:	1d23      	adds	r3, r4, #4
 80031a6:	4395      	bics	r5, r2
 80031a8:	1aea      	subs	r2, r5, r3
 80031aa:	429d      	cmp	r5, r3
 80031ac:	d0e5      	beq.n	800317a <_malloc_r+0x82>
 80031ae:	1b5b      	subs	r3, r3, r5
 80031b0:	50a3      	str	r3, [r4, r2]
 80031b2:	e7e2      	b.n	800317a <_malloc_r+0x82>
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e7ec      	b.n	8003192 <_malloc_r+0x9a>
 80031b8:	6862      	ldr	r2, [r4, #4]
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d101      	bne.n	80031c2 <_malloc_r+0xca>
 80031be:	602a      	str	r2, [r5, #0]
 80031c0:	e7ea      	b.n	8003198 <_malloc_r+0xa0>
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	e7e8      	b.n	8003198 <_malloc_r+0xa0>
 80031c6:	0023      	movs	r3, r4
 80031c8:	6864      	ldr	r4, [r4, #4]
 80031ca:	e7a7      	b.n	800311c <_malloc_r+0x24>
 80031cc:	002c      	movs	r4, r5
 80031ce:	686d      	ldr	r5, [r5, #4]
 80031d0:	e7af      	b.n	8003132 <_malloc_r+0x3a>
 80031d2:	230c      	movs	r3, #12
 80031d4:	0030      	movs	r0, r6
 80031d6:	6033      	str	r3, [r6, #0]
 80031d8:	f000 f84e 	bl	8003278 <__malloc_unlock>
 80031dc:	e7cd      	b.n	800317a <_malloc_r+0x82>
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	200001ac 	.word	0x200001ac

080031e4 <_realloc_r>:
 80031e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031e6:	0007      	movs	r7, r0
 80031e8:	000e      	movs	r6, r1
 80031ea:	0014      	movs	r4, r2
 80031ec:	2900      	cmp	r1, #0
 80031ee:	d105      	bne.n	80031fc <_realloc_r+0x18>
 80031f0:	0011      	movs	r1, r2
 80031f2:	f7ff ff81 	bl	80030f8 <_malloc_r>
 80031f6:	0005      	movs	r5, r0
 80031f8:	0028      	movs	r0, r5
 80031fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	d103      	bne.n	8003208 <_realloc_r+0x24>
 8003200:	f7ff ff0e 	bl	8003020 <_free_r>
 8003204:	0025      	movs	r5, r4
 8003206:	e7f7      	b.n	80031f8 <_realloc_r+0x14>
 8003208:	f000 f83e 	bl	8003288 <_malloc_usable_size_r>
 800320c:	9001      	str	r0, [sp, #4]
 800320e:	4284      	cmp	r4, r0
 8003210:	d803      	bhi.n	800321a <_realloc_r+0x36>
 8003212:	0035      	movs	r5, r6
 8003214:	0843      	lsrs	r3, r0, #1
 8003216:	42a3      	cmp	r3, r4
 8003218:	d3ee      	bcc.n	80031f8 <_realloc_r+0x14>
 800321a:	0021      	movs	r1, r4
 800321c:	0038      	movs	r0, r7
 800321e:	f7ff ff6b 	bl	80030f8 <_malloc_r>
 8003222:	1e05      	subs	r5, r0, #0
 8003224:	d0e8      	beq.n	80031f8 <_realloc_r+0x14>
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	0022      	movs	r2, r4
 800322a:	429c      	cmp	r4, r3
 800322c:	d900      	bls.n	8003230 <_realloc_r+0x4c>
 800322e:	001a      	movs	r2, r3
 8003230:	0031      	movs	r1, r6
 8003232:	0028      	movs	r0, r5
 8003234:	f7ff fed7 	bl	8002fe6 <memcpy>
 8003238:	0031      	movs	r1, r6
 800323a:	0038      	movs	r0, r7
 800323c:	f7ff fef0 	bl	8003020 <_free_r>
 8003240:	e7da      	b.n	80031f8 <_realloc_r+0x14>
	...

08003244 <_sbrk_r>:
 8003244:	2300      	movs	r3, #0
 8003246:	b570      	push	{r4, r5, r6, lr}
 8003248:	4d06      	ldr	r5, [pc, #24]	; (8003264 <_sbrk_r+0x20>)
 800324a:	0004      	movs	r4, r0
 800324c:	0008      	movs	r0, r1
 800324e:	602b      	str	r3, [r5, #0]
 8003250:	f7fd fd02 	bl	8000c58 <_sbrk>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d103      	bne.n	8003260 <_sbrk_r+0x1c>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d000      	beq.n	8003260 <_sbrk_r+0x1c>
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	200001b4 	.word	0x200001b4

08003268 <__malloc_lock>:
 8003268:	b510      	push	{r4, lr}
 800326a:	4802      	ldr	r0, [pc, #8]	; (8003274 <__malloc_lock+0xc>)
 800326c:	f000 f814 	bl	8003298 <__retarget_lock_acquire_recursive>
 8003270:	bd10      	pop	{r4, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	200001b8 	.word	0x200001b8

08003278 <__malloc_unlock>:
 8003278:	b510      	push	{r4, lr}
 800327a:	4802      	ldr	r0, [pc, #8]	; (8003284 <__malloc_unlock+0xc>)
 800327c:	f000 f80d 	bl	800329a <__retarget_lock_release_recursive>
 8003280:	bd10      	pop	{r4, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	200001b8 	.word	0x200001b8

08003288 <_malloc_usable_size_r>:
 8003288:	1f0b      	subs	r3, r1, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1f18      	subs	r0, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	da01      	bge.n	8003296 <_malloc_usable_size_r+0xe>
 8003292:	580b      	ldr	r3, [r1, r0]
 8003294:	18c0      	adds	r0, r0, r3
 8003296:	4770      	bx	lr

08003298 <__retarget_lock_acquire_recursive>:
 8003298:	4770      	bx	lr

0800329a <__retarget_lock_release_recursive>:
 800329a:	4770      	bx	lr

0800329c <_init>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr

080032a8 <_fini>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr
